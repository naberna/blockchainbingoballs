{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningStargateClient = exports.defaultRegistryTypes = void 0;\n\nconst amino_1 = require(\"@cosmjs/amino\");\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\n\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nconst coin_1 = require(\"cosmjs-types/cosmos/base/v1beta1/coin\");\n\nconst tx_1 = require(\"cosmjs-types/cosmos/distribution/v1beta1/tx\");\n\nconst tx_2 = require(\"cosmjs-types/cosmos/staking/v1beta1/tx\");\n\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\n\nconst tx_3 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\n\nconst tx_4 = require(\"cosmjs-types/ibc/applications/transfer/v1/tx\");\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst aminotypes_1 = require(\"./aminotypes\");\n\nconst fee_1 = require(\"./fee\");\n\nconst modules_1 = require(\"./modules\");\n\nconst modules_2 = require(\"./modules\");\n\nconst stargateclient_1 = require(\"./stargateclient\");\n\nexports.defaultRegistryTypes = [[\"/cosmos.base.v1beta1.Coin\", coin_1.Coin], ...modules_1.authzTypes, ...modules_1.bankTypes, ...modules_1.distributionTypes, ...modules_1.feegrantTypes, ...modules_1.govTypes, ...modules_1.stakingTypes, ...modules_1.ibcTypes, ...modules_1.vestingTypes];\n\nfunction createDefaultRegistry() {\n  return new proto_signing_1.Registry(exports.defaultRegistryTypes);\n}\n\nfunction createDefaultTypes(prefix) {\n  return { ...(0, modules_2.createAuthzAminoConverters)(),\n    ...(0, modules_2.createBankAminoConverters)(),\n    ...(0, modules_2.createDistributionAminoConverters)(),\n    ...(0, modules_2.createGovAminoConverters)(),\n    ...(0, modules_2.createStakingAminoConverters)(prefix),\n    ...(0, modules_2.createIbcAminoConverters)(),\n    ...(0, modules_2.createFreegrantAminoConverters)(),\n    ...(0, modules_2.createVestingAminoConverters)()\n  };\n}\n\nclass SigningStargateClient extends stargateclient_1.StargateClient {\n  constructor(tmClient, signer, options) {\n    var _a;\n\n    super(tmClient, options); // TODO: do we really want to set a default here? Ideally we could get it from the signer such that users only have to set it once.\n\n    const prefix = (_a = options.prefix) !== null && _a !== void 0 ? _a : \"cosmos\";\n    const {\n      registry = createDefaultRegistry(),\n      aminoTypes = new aminotypes_1.AminoTypes(createDefaultTypes(prefix))\n    } = options;\n    this.registry = registry;\n    this.aminoTypes = aminoTypes;\n    this.signer = signer;\n    this.broadcastTimeoutMs = options.broadcastTimeoutMs;\n    this.broadcastPollIntervalMs = options.broadcastPollIntervalMs;\n    this.gasPrice = options.gasPrice;\n  }\n\n  static async connectWithSigner(endpoint, signer) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n    return new SigningStargateClient(tmClient, signer, options);\n  }\n  /**\n   * Creates a client in offline mode.\n   *\n   * This should only be used in niche cases where you know exactly what you're doing,\n   * e.g. when building an offline signing application.\n   *\n   * When you try to use online functionality with such a signer, an\n   * exception will be raised.\n   */\n\n\n  static async offline(signer) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new SigningStargateClient(undefined, signer, options);\n  }\n\n  async simulate(signerAddress, messages, memo) {\n    const anyMsgs = messages.map(m => this.registry.encodeAsAny(m));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n\n    const pubkey = (0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey);\n    const {\n      sequence\n    } = await this.getSequence(signerAddress);\n    const {\n      gasInfo\n    } = await this.forceGetQueryClient().tx.simulate(anyMsgs, memo, pubkey, sequence);\n    (0, utils_1.assertDefined)(gasInfo);\n    return math_1.Uint53.fromString(gasInfo.gasUsed.toString()).toNumber();\n  }\n\n  async sendTokens(senderAddress, recipientAddress, amount, fee) {\n    let memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    const sendMsg = {\n      typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n      value: {\n        fromAddress: senderAddress,\n        toAddress: recipientAddress,\n        amount: [...amount]\n      }\n    };\n    return this.signAndBroadcast(senderAddress, [sendMsg], fee, memo);\n  }\n\n  async delegateTokens(delegatorAddress, validatorAddress, amount, fee) {\n    let memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    const delegateMsg = {\n      typeUrl: \"/cosmos.staking.v1beta1.MsgDelegate\",\n      value: tx_2.MsgDelegate.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress: validatorAddress,\n        amount: amount\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [delegateMsg], fee, memo);\n  }\n\n  async undelegateTokens(delegatorAddress, validatorAddress, amount, fee) {\n    let memo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    const undelegateMsg = {\n      typeUrl: \"/cosmos.staking.v1beta1.MsgUndelegate\",\n      value: tx_2.MsgUndelegate.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress: validatorAddress,\n        amount: amount\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [undelegateMsg], fee, memo);\n  }\n\n  async withdrawRewards(delegatorAddress, validatorAddress, fee) {\n    let memo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    const withdrawMsg = {\n      typeUrl: \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\",\n      value: tx_1.MsgWithdrawDelegatorReward.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress: validatorAddress\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [withdrawMsg], fee, memo);\n  }\n\n  async sendIbcTokens(senderAddress, recipientAddress, transferAmount, sourcePort, sourceChannel, timeoutHeight,\n  /** timeout in seconds */\n  timeoutTimestamp, fee) {\n    let memo = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : \"\";\n    const timeoutTimestampNanoseconds = timeoutTimestamp ? long_1.default.fromNumber(timeoutTimestamp).multiply(1000000000) : undefined;\n    const transferMsg = {\n      typeUrl: \"/ibc.applications.transfer.v1.MsgTransfer\",\n      value: tx_4.MsgTransfer.fromPartial({\n        sourcePort: sourcePort,\n        sourceChannel: sourceChannel,\n        sender: senderAddress,\n        receiver: recipientAddress,\n        token: transferAmount,\n        timeoutHeight: timeoutHeight,\n        timeoutTimestamp: timeoutTimestampNanoseconds\n      })\n    };\n    return this.signAndBroadcast(senderAddress, [transferMsg], fee, memo);\n  }\n\n  async signAndBroadcast(signerAddress, messages, fee) {\n    let memo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    let usedFee;\n\n    if (fee == \"auto\" || typeof fee === \"number\") {\n      (0, utils_1.assertDefined)(this.gasPrice, \"Gas price must be set in the client options when auto gas is used.\");\n      const gasEstimation = await this.simulate(signerAddress, messages, memo);\n      const multiplier = typeof fee === \"number\" ? fee : 1.3;\n      usedFee = (0, fee_1.calculateFee)(Math.round(gasEstimation * multiplier), this.gasPrice);\n    } else {\n      usedFee = fee;\n    }\n\n    const txRaw = await this.sign(signerAddress, messages, usedFee, memo);\n    const txBytes = tx_3.TxRaw.encode(txRaw).finish();\n    return this.broadcastTx(txBytes, this.broadcastTimeoutMs, this.broadcastPollIntervalMs);\n  }\n  /**\n   * Gets account number and sequence from the API, creates a sign doc,\n   * creates a single signature and assembles the signed transaction.\n   *\n   * The sign mode (SIGN_MODE_DIRECT or SIGN_MODE_LEGACY_AMINO_JSON) is determined by this client's signer.\n   *\n   * You can pass signer data (account number, sequence and chain ID) explicitly instead of querying them\n   * from the chain. This is needed when signing for a multisig account, but it also allows for offline signing\n   * (See the SigningStargateClient.offline constructor).\n   */\n\n\n  async sign(signerAddress, messages, fee, memo, explicitSignerData) {\n    let signerData;\n\n    if (explicitSignerData) {\n      signerData = explicitSignerData;\n    } else {\n      const {\n        accountNumber,\n        sequence\n      } = await this.getSequence(signerAddress);\n      const chainId = await this.getChainId();\n      signerData = {\n        accountNumber: accountNumber,\n        sequence: sequence,\n        chainId: chainId\n      };\n    }\n\n    return (0, proto_signing_1.isOfflineDirectSigner)(this.signer) ? this.signDirect(signerAddress, messages, fee, memo, signerData) : this.signAmino(signerAddress, messages, fee, memo, signerData);\n  }\n\n  async signAmino(signerAddress, messages, fee, memo, _ref) {\n    let {\n      accountNumber,\n      sequence,\n      chainId\n    } = _ref;\n    (0, utils_1.assert)(!(0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n\n    const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n    const signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n    const msgs = messages.map(msg => this.aminoTypes.toAmino(msg));\n    const signDoc = (0, amino_1.makeSignDoc)(msgs, fee, chainId, memo, accountNumber, sequence);\n    const {\n      signature,\n      signed\n    } = await this.signer.signAmino(signerAddress, signDoc);\n    const signedTxBody = {\n      messages: signed.msgs.map(msg => this.aminoTypes.fromAmino(msg)),\n      memo: signed.memo\n    };\n    const signedTxBodyEncodeObject = {\n      typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n      value: signedTxBody\n    };\n    const signedTxBodyBytes = this.registry.encode(signedTxBodyEncodeObject);\n    const signedGasLimit = math_1.Int53.fromString(signed.fee.gas).toNumber();\n    const signedSequence = math_1.Int53.fromString(signed.sequence).toNumber();\n    const signedAuthInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{\n      pubkey,\n      sequence: signedSequence\n    }], signed.fee.amount, signedGasLimit, signMode);\n    return tx_3.TxRaw.fromPartial({\n      bodyBytes: signedTxBodyBytes,\n      authInfoBytes: signedAuthInfoBytes,\n      signatures: [(0, encoding_1.fromBase64)(signature.signature)]\n    });\n  }\n\n  async signDirect(signerAddress, messages, fee, memo, _ref2) {\n    let {\n      accountNumber,\n      sequence,\n      chainId\n    } = _ref2;\n    (0, utils_1.assert)((0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n\n    const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n    const txBodyEncodeObject = {\n      typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n      value: {\n        messages: messages,\n        memo: memo\n      }\n    };\n    const txBodyBytes = this.registry.encode(txBodyEncodeObject);\n    const gasLimit = math_1.Int53.fromString(fee.gas).toNumber();\n    const authInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{\n      pubkey,\n      sequence\n    }], fee.amount, gasLimit);\n    const signDoc = (0, proto_signing_1.makeSignDoc)(txBodyBytes, authInfoBytes, chainId, accountNumber);\n    const {\n      signature,\n      signed\n    } = await this.signer.signDirect(signerAddress, signDoc);\n    return tx_3.TxRaw.fromPartial({\n      bodyBytes: signed.bodyBytes,\n      authInfoBytes: signed.authInfoBytes,\n      signatures: [(0, encoding_1.fromBase64)(signature.signature)]\n    });\n  }\n\n}\n\nexports.SigningStargateClient = SigningStargateClient;","map":{"version":3,"mappings":"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","names":["exports","coin_1","modules_1","createDefaultRegistry","proto_signing_1","createDefaultTypes","prefix","SigningStargateClient","stargateclient_1","constructor","tmClient","signer","options","_a","registry","aminoTypes","aminotypes_1","broadcastTimeoutMs","broadcastPollIntervalMs","gasPrice","connectWithSigner","endpoint","tendermint_rpc_1","connect","offline","undefined","simulate","signerAddress","messages","memo","anyMsgs","map","m","encodeAsAny","accountFromSigner","getAccounts","find","account","address","Error","pubkey","sequence","getSequence","gasInfo","forceGetQueryClient","tx","math_1","fromString","gasUsed","toString","toNumber","sendTokens","senderAddress","recipientAddress","amount","fee","sendMsg","typeUrl","value","fromAddress","toAddress","signAndBroadcast","delegateTokens","delegatorAddress","validatorAddress","delegateMsg","tx_2","fromPartial","undelegateTokens","undelegateMsg","withdrawRewards","withdrawMsg","tx_1","sendIbcTokens","transferAmount","sourcePort","sourceChannel","timeoutHeight","timeoutTimestamp","timeoutTimestampNanoseconds","long_1","fromNumber","multiply","transferMsg","tx_4","sender","receiver","token","usedFee","gasEstimation","multiplier","Math","round","txRaw","sign","txBytes","tx_3","encode","finish","broadcastTx","explicitSignerData","signerData","accountNumber","chainId","getChainId","signDirect","signAmino","signMode","signing_1","SIGN_MODE_LEGACY_AMINO_JSON","msgs","msg","toAmino","signDoc","signature","signed","signedTxBody","fromAmino","signedTxBodyEncodeObject","signedTxBodyBytes","signedGasLimit","gas","signedSequence","signedAuthInfoBytes","bodyBytes","authInfoBytes","signatures","txBodyEncodeObject","txBodyBytes","gasLimit"],"sourceRoot":"","sources":["../src/signingstargateclient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}