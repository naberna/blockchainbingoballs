{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupTxExtension = void 0;\n\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\n\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\n\nconst service_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/service\");\n\nconst tx_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst queryclient_1 = require(\"../../queryclient\");\n\nfunction setupTxExtension(base) {\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n  const queryService = new service_1.ServiceClientImpl(rpc);\n  return {\n    tx: {\n      getTx: async txId => {\n        const request = {\n          hash: txId\n        };\n        const response = await queryService.GetTx(request);\n        return response;\n      },\n      simulate: async (messages, memo, signer, sequence) => {\n        const request = service_1.SimulateRequest.fromPartial({\n          tx: tx_1.Tx.fromPartial({\n            authInfo: tx_1.AuthInfo.fromPartial({\n              fee: tx_1.Fee.fromPartial({}),\n              signerInfos: [{\n                publicKey: (0, proto_signing_1.encodePubkey)(signer),\n                sequence: long_1.default.fromNumber(sequence, true),\n                modeInfo: {\n                  single: {\n                    mode: signing_1.SignMode.SIGN_MODE_UNSPECIFIED\n                  }\n                }\n              }]\n            }),\n            body: tx_1.TxBody.fromPartial({\n              messages: Array.from(messages),\n              memo: memo\n            }),\n            signatures: [new Uint8Array()]\n          }),\n          // Sending serialized `txBytes` is the future. But\n          // this is not available in Comsos SDK 0.42.\n          txBytes: undefined\n        });\n        const response = await queryService.Simulate(request);\n        return response;\n      }\n    }\n  };\n}\n\nexports.setupTxExtension = setupTxExtension;","map":{"version":3,"mappings":";;;;;;;;;;;;;AACA;;AACA;;AACA;;AAOA;;AAEA;;AAEA;;AAiBA,SAAgBA,gBAAhB,CAAiCC,IAAjC,EAAkD;EAChD;EACA;EACA,MAAMC,GAAG,GAAG,2CAAwBD,IAAxB,CAAZ;EACA,MAAME,YAAY,GAAG,IAAIC,2BAAJ,CAAsBF,GAAtB,CAArB;EAEA,OAAO;IACLG,EAAE,EAAE;MACFC,KAAK,EAAE,MAAOC,IAAP,IAAuB;QAC5B,MAAMC,OAAO,GAAiB;UAC5BC,IAAI,EAAEF;QADsB,CAA9B;QAGA,MAAMG,QAAQ,GAAG,MAAMP,YAAY,CAACQ,KAAb,CAAmBH,OAAnB,CAAvB;QACA,OAAOE,QAAP;MACD,CAPC;MAQFE,QAAQ,EAAE,OACRC,QADQ,EAERC,IAFQ,EAGRC,MAHQ,EAIRC,QAJQ,KAKN;QACF,MAAMR,OAAO,GAAGJ,0BAAgBa,WAAhB,CAA4B;UAC1CZ,EAAE,EAAEa,QAAGD,WAAH,CAAe;YACjBE,QAAQ,EAAED,cAASD,WAAT,CAAqB;cAC7BG,GAAG,EAAEF,SAAID,WAAJ,CAAgB,EAAhB,CADwB;cAE7BI,WAAW,EAAE,CACX;gBACEC,SAAS,EAAE,kCAAaP,MAAb,CADb;gBAEEC,QAAQ,EAAEO,eAAKC,UAAL,CAAgBR,QAAhB,EAA0B,IAA1B,CAFZ;gBAGES,QAAQ,EAAE;kBAAEC,MAAM,EAAE;oBAAEC,IAAI,EAAEC,mBAASC;kBAAjB;gBAAV;cAHZ,CADW;YAFgB,CAArB,CADO;YAWjBC,IAAI,EAAEZ,YAAOD,WAAP,CAAmB;cACvBJ,QAAQ,EAAEkB,KAAK,CAACC,IAAN,CAAWnB,QAAX,CADa;cAEvBC,IAAI,EAAEA;YAFiB,CAAnB,CAXW;YAejBmB,UAAU,EAAE,CAAC,IAAIC,UAAJ,EAAD;UAfK,CAAf,CADsC;UAkB1C;UACA;UACAC,OAAO,EAAEC;QApBiC,CAA5B,CAAhB;QAsBA,MAAM1B,QAAQ,GAAG,MAAMP,YAAY,CAACkC,QAAb,CAAsB7B,OAAtB,CAAvB;QACA,OAAOE,QAAP;MACD;IAtCC;EADC,CAAP;AA0CD;;AAhDD4B","names":["setupTxExtension","base","rpc","queryService","service_1","tx","getTx","txId","request","hash","response","GetTx","simulate","messages","memo","signer","sequence","fromPartial","tx_1","authInfo","fee","signerInfos","publicKey","long_1","fromNumber","modeInfo","single","mode","signing_1","SIGN_MODE_UNSPECIFIED","body","Array","from","signatures","Uint8Array","txBytes","undefined","Simulate","exports"],"sourceRoot":"","sources":["../../../src/modules/tx/queries.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}