{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bech32 = exports.normalizeBech32 = exports.fromBech32 = exports.toBech32 = void 0;\n\nconst bech32 = __importStar(require(\"bech32\"));\n\nfunction toBech32(prefix, data, limit) {\n  const address = bech32.encode(prefix, bech32.toWords(data), limit);\n  return address;\n}\n\nexports.toBech32 = toBech32;\n\nfunction fromBech32(address) {\n  let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  const decodedAddress = bech32.decode(address, limit);\n  return {\n    prefix: decodedAddress.prefix,\n    data: new Uint8Array(bech32.fromWords(decodedAddress.words))\n  };\n}\n\nexports.fromBech32 = fromBech32;\n/**\n * Takes a bech32 address and returns a normalized (i.e. lower case) representation of it.\n *\n * The input is validated along the way, which makes this significantly safer than\n * using `address.toLowerCase()`.\n */\n\nfunction normalizeBech32(address) {\n  const {\n    prefix,\n    data\n  } = fromBech32(address);\n  return toBech32(prefix, data);\n}\n\nexports.normalizeBech32 = normalizeBech32;\n/**\n * @deprecated This class is deprecated and will be removed soon. Please use fromBech32() and toBech32() instead. For more details please refer to https://github.com/cosmos/cosmjs/issues/1053.\n */\n\nclass Bech32 {\n  /**\n   * @deprecated This class is deprecated and will be removed soon. Please use fromBech32() and toBech32() instead. For more details please refer to https://github.com/cosmos/cosmjs/issues/1053.\n   */\n  static encode(prefix, data, limit) {\n    return toBech32(prefix, data, limit);\n  }\n  /**\n   * @deprecated This class is deprecated and will be removed soon. Please use fromBech32() and toBech32() instead. For more details please refer to https://github.com/cosmos/cosmjs/issues/1053.\n   */\n\n\n  static decode(address) {\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n    return fromBech32(address, limit);\n  }\n\n}\n\nexports.Bech32 = Bech32;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA,SAAgBA,QAAhB,CAAyBC,MAAzB,EAAyCC,IAAzC,EAA2DC,KAA3D,EAAyE;EACvE,MAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcL,MAAd,EAAsBI,MAAM,CAACE,OAAP,CAAeL,IAAf,CAAtB,EAA4CC,KAA5C,CAAhB;EACA,OAAOC,OAAP;AACD;;AAHDI;;AAKA,SAAgBC,UAAhB,CACEL,OADF,EAEkB;EAAA,IAAhBD,KAAgB,uEAARO,QAAQ;EAEhB,MAAMC,cAAc,GAAGN,MAAM,CAACO,MAAP,CAAcR,OAAd,EAAuBD,KAAvB,CAAvB;EACA,OAAO;IACLF,MAAM,EAAEU,cAAc,CAACV,MADlB;IAELC,IAAI,EAAE,IAAIW,UAAJ,CAAeR,MAAM,CAACS,SAAP,CAAiBH,cAAc,CAACI,KAAhC,CAAf;EAFD,CAAP;AAID;;AATDP;AAWA;;;;;;;AAMA,SAAgBQ,eAAhB,CAAgCZ,OAAhC,EAA+C;EAC7C,MAAM;IAAEH,MAAF;IAAUC;EAAV,IAAmBO,UAAU,CAACL,OAAD,CAAnC;EACA,OAAOJ,QAAQ,CAACC,MAAD,EAASC,IAAT,CAAf;AACD;;AAHDM;AAKA;;;;AAGA,MAAaS,MAAb,CAAmB;EACjB;;;EAGoB,OAANX,MAAM,CAACL,MAAD,EAAiBC,IAAjB,EAAmCC,KAAnC,EAAiD;IACnE,OAAOH,QAAQ,CAACC,MAAD,EAASC,IAAT,EAAeC,KAAf,CAAf;EACD;EAED;;;;;EAGoB,OAANS,MAAM,CAClBR,OADkB,EAEF;IAAA,IAAhBD,KAAgB,uEAARO,QAAQ;IAEhB,OAAOD,UAAU,CAACL,OAAD,EAAUD,KAAV,CAAjB;EACD;;AAhBgB;;AAAnBK","names":["toBech32","prefix","data","limit","address","bech32","encode","toWords","exports","fromBech32","Infinity","decodedAddress","decode","Uint8Array","fromWords","words","normalizeBech32","Bech32"],"sourceRoot":"","sources":["../src/bech32.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}