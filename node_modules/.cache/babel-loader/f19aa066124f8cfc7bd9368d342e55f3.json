{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accountFromAny = void 0;\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nconst auth_1 = require(\"cosmjs-types/cosmos/auth/v1beta1/auth\");\n\nconst vesting_1 = require(\"cosmjs-types/cosmos/vesting/v1beta1/vesting\");\n\nfunction uint64FromProto(input) {\n  return math_1.Uint64.fromString(input.toString());\n}\n\nfunction accountFromBaseAccount(input) {\n  const {\n    address,\n    pubKey,\n    accountNumber,\n    sequence\n  } = input;\n  const pubkey = (0, proto_signing_1.decodePubkey)(pubKey);\n  return {\n    address: address,\n    pubkey: pubkey,\n    accountNumber: uint64FromProto(accountNumber).toNumber(),\n    sequence: uint64FromProto(sequence).toNumber()\n  };\n}\n/**\n * Basic implementation of AccountParser. This is supposed to support the most relevant\n * common Cosmos SDK account types. If you need support for exotic account types,\n * you'll need to write your own account decoder.\n */\n\n\nfunction accountFromAny(input) {\n  var _a, _b, _c, _d, _e, _f, _g;\n\n  const {\n    typeUrl,\n    value\n  } = input;\n\n  switch (typeUrl) {\n    // auth\n    case \"/cosmos.auth.v1beta1.BaseAccount\":\n      return accountFromBaseAccount(auth_1.BaseAccount.decode(value));\n\n    case \"/cosmos.auth.v1beta1.ModuleAccount\":\n      {\n        const baseAccount = auth_1.ModuleAccount.decode(value).baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    // vesting\n\n    case \"/cosmos.vesting.v1beta1.BaseVestingAccount\":\n      {\n        const baseAccount = (_a = vesting_1.BaseVestingAccount.decode(value)) === null || _a === void 0 ? void 0 : _a.baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n\n    case \"/cosmos.vesting.v1beta1.ContinuousVestingAccount\":\n      {\n        const baseAccount = (_c = (_b = vesting_1.ContinuousVestingAccount.decode(value)) === null || _b === void 0 ? void 0 : _b.baseVestingAccount) === null || _c === void 0 ? void 0 : _c.baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n\n    case \"/cosmos.vesting.v1beta1.DelayedVestingAccount\":\n      {\n        const baseAccount = (_e = (_d = vesting_1.DelayedVestingAccount.decode(value)) === null || _d === void 0 ? void 0 : _d.baseVestingAccount) === null || _e === void 0 ? void 0 : _e.baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n\n    case \"/cosmos.vesting.v1beta1.PeriodicVestingAccount\":\n      {\n        const baseAccount = (_g = (_f = vesting_1.PeriodicVestingAccount.decode(value)) === null || _f === void 0 ? void 0 : _f.baseVestingAccount) === null || _g === void 0 ? void 0 : _g.baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n\n    default:\n      throw new Error(`Unsupported type: '${typeUrl}'`);\n  }\n}\n\nexports.accountFromAny = accountFromAny;","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AAiBA,SAASA,eAAT,CAAyBC,KAAzB,EAA6C;EAC3C,OAAOC,cAAOC,UAAP,CAAkBF,KAAK,CAACG,QAAN,EAAlB,CAAP;AACD;;AAED,SAASC,sBAAT,CAAgCJ,KAAhC,EAAkD;EAChD,MAAM;IAAEK,OAAF;IAAWC,MAAX;IAAmBC,aAAnB;IAAkCC;EAAlC,IAA+CR,KAArD;EACA,MAAMS,MAAM,GAAG,kCAAaH,MAAb,CAAf;EACA,OAAO;IACLD,OAAO,EAAEA,OADJ;IAELI,MAAM,EAAEA,MAFH;IAGLF,aAAa,EAAER,eAAe,CAACQ,aAAD,CAAf,CAA+BG,QAA/B,EAHV;IAILF,QAAQ,EAAET,eAAe,CAACS,QAAD,CAAf,CAA0BE,QAA1B;EAJL,CAAP;AAMD;AAQD;;;;;;;AAKA,SAAgBC,cAAhB,CAA+BX,KAA/B,EAAyC;;;EACvC,MAAM;IAAEY,OAAF;IAAWC;EAAX,IAAqBb,KAA3B;;EAEA,QAAQY,OAAR;IACE;IAEA,KAAK,kCAAL;MACE,OAAOR,sBAAsB,CAACU,mBAAYC,MAAZ,CAAmBF,KAAnB,CAAD,CAA7B;;IACF,KAAK,oCAAL;MAA2C;QACzC,MAAMG,WAAW,GAAGF,qBAAcC,MAAd,CAAqBF,KAArB,EAA4BG,WAAhD;QACA,oBAAOA,WAAP;QACA,OAAOZ,sBAAsB,CAACY,WAAD,CAA7B;MACD;IAED;;IAEA,KAAK,4CAAL;MAAmD;QACjD,MAAMA,WAAW,GAAG,mCAAmBD,MAAnB,CAA0BF,KAA1B,OAAgC,IAAhC,IAAgCI,aAAhC,GAAgC,MAAhC,GAAgCA,GAAED,WAAtD;QACA,oBAAOA,WAAP;QACA,OAAOZ,sBAAsB,CAACY,WAAD,CAA7B;MACD;;IACD,KAAK,kDAAL;MAAyD;QACvD,MAAMA,WAAW,GAAG,+CAAyBD,MAAzB,CAAgCF,KAAhC,OAAsC,IAAtC,IAAsCK,aAAtC,GAAsC,MAAtC,GAAsCA,GAAEC,kBAAxC,MAA0D,IAA1D,IAA0DC,aAA1D,GAA0D,MAA1D,GAA0DA,GAAEJ,WAAhF;QACA,oBAAOA,WAAP;QACA,OAAOZ,sBAAsB,CAACY,WAAD,CAA7B;MACD;;IACD,KAAK,+CAAL;MAAsD;QACpD,MAAMA,WAAW,GAAG,4CAAsBD,MAAtB,CAA6BF,KAA7B,OAAmC,IAAnC,IAAmCQ,aAAnC,GAAmC,MAAnC,GAAmCA,GAAEF,kBAArC,MAAuD,IAAvD,IAAuDG,aAAvD,GAAuD,MAAvD,GAAuDA,GAAEN,WAA7E;QACA,oBAAOA,WAAP;QACA,OAAOZ,sBAAsB,CAACY,WAAD,CAA7B;MACD;;IACD,KAAK,gDAAL;MAAuD;QACrD,MAAMA,WAAW,GAAG,6CAAuBD,MAAvB,CAA8BF,KAA9B,OAAoC,IAApC,IAAoCU,aAApC,GAAoC,MAApC,GAAoCA,GAAEJ,kBAAtC,MAAwD,IAAxD,IAAwDK,aAAxD,GAAwD,MAAxD,GAAwDA,GAAER,WAA9E;QACA,oBAAOA,WAAP;QACA,OAAOZ,sBAAsB,CAACY,WAAD,CAA7B;MACD;;IAED;MACE,MAAM,IAAIS,KAAJ,CAAU,sBAAsBb,OAAO,GAAvC,CAAN;EAnCJ;AAqCD;;AAxCDc","names":["uint64FromProto","input","math_1","fromString","toString","accountFromBaseAccount","address","pubKey","accountNumber","sequence","pubkey","toNumber","accountFromAny","typeUrl","value","auth_1","decode","baseAccount","_a","_b","baseVestingAccount","_c","_d","_e","_f","_g","Error","exports"],"sourceRoot":"","sources":["../src/accounts.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}