{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMultisigThresholdPubkey = exports.compareArrays = void 0;\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst addresses_1 = require(\"./addresses\");\n/**\n * Compare arrays lexicographically.\n *\n * Returns value < 0 if `a < b`.\n * Returns value > 0 if `a > b`.\n * Returns 0 if `a === b`.\n */\n\n\nfunction compareArrays(a, b) {\n  const aHex = (0, encoding_1.toHex)(a);\n  const bHex = (0, encoding_1.toHex)(b);\n  return aHex === bHex ? 0 : aHex < bHex ? -1 : 1;\n}\n\nexports.compareArrays = compareArrays;\n\nfunction createMultisigThresholdPubkey(pubkeys, threshold) {\n  let nosort = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const uintThreshold = new math_1.Uint53(threshold);\n\n  if (uintThreshold.toNumber() > pubkeys.length) {\n    throw new Error(`Threshold k = ${uintThreshold.toNumber()} exceeds number of keys n = ${pubkeys.length}`);\n  }\n\n  const outPubkeys = nosort ? pubkeys : Array.from(pubkeys).sort((lhs, rhs) => {\n    // https://github.com/cosmos/cosmos-sdk/blob/v0.42.2/client/keys/add.go#L172-L174\n    const addressLhs = (0, addresses_1.pubkeyToRawAddress)(lhs);\n    const addressRhs = (0, addresses_1.pubkeyToRawAddress)(rhs);\n    return compareArrays(addressLhs, addressRhs);\n  });\n  return {\n    type: \"tendermint/PubKeyMultisigThreshold\",\n    value: {\n      threshold: uintThreshold.toString(),\n      pubkeys: outPubkeys\n    }\n  };\n}\n\nexports.createMultisigThresholdPubkey = createMultisigThresholdPubkey;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAEA;AAGA;;;;;;;;;AAOA,SAAgBA,aAAhB,CAA8BC,CAA9B,EAA6CC,CAA7C,EAA0D;EACxD,MAAMC,IAAI,GAAG,sBAAMF,CAAN,CAAb;EACA,MAAMG,IAAI,GAAG,sBAAMF,CAAN,CAAb;EACA,OAAOC,IAAI,KAAKC,IAAT,GAAgB,CAAhB,GAAoBD,IAAI,GAAGC,IAAP,GAAc,CAAC,CAAf,GAAmB,CAA9C;AACD;;AAJDC;;AAMA,SAAgBC,6BAAhB,CACEC,OADF,EAEEC,SAFF,EAGgB;EAAA,IAAdC,MAAc,uEAAL,KAAK;EAEd,MAAMC,aAAa,GAAG,IAAIC,aAAJ,CAAWH,SAAX,CAAtB;;EACA,IAAIE,aAAa,CAACE,QAAd,KAA2BL,OAAO,CAACM,MAAvC,EAA+C;IAC7C,MAAM,IAAIC,KAAJ,CAAU,iBAAiBJ,aAAa,CAACE,QAAd,EAAwB,+BAA+BL,OAAO,CAACM,MAAM,EAAhG,CAAN;EACD;;EAED,MAAME,UAAU,GAAGN,MAAM,GACrBF,OADqB,GAErBS,KAAK,CAACC,IAAN,CAAWV,OAAX,EAAoBW,IAApB,CAAyB,CAACC,GAAD,EAAMC,GAAN,KAAa;IACpC;IACA,MAAMC,UAAU,GAAG,oCAAmBF,GAAnB,CAAnB;IACA,MAAMG,UAAU,GAAG,oCAAmBF,GAAnB,CAAnB;IACA,OAAOpB,aAAa,CAACqB,UAAD,EAAaC,UAAb,CAApB;EACD,CALD,CAFJ;EAQA,OAAO;IACLC,IAAI,EAAE,oCADD;IAELC,KAAK,EAAE;MACLhB,SAAS,EAAEE,aAAa,CAACe,QAAd,EADN;MAELlB,OAAO,EAAEQ;IAFJ;EAFF,CAAP;AAOD;;AAzBDV","names":["compareArrays","a","b","aHex","bHex","exports","createMultisigThresholdPubkey","pubkeys","threshold","nosort","uintThreshold","math_1","toNumber","length","Error","outPubkeys","Array","from","sort","lhs","rhs","addressLhs","addressRhs","type","value","toString"],"sourceRoot":"","sources":["../src/multisig.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}