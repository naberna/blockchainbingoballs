{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupBankExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nconst query_1 = require(\"cosmjs-types/cosmos/bank/v1beta1/query\");\n\nconst queryclient_1 = require(\"../../queryclient\");\n\nfunction setupBankExtension(base) {\n  const rpc = (0, queryclient_1.createProtobufRpcClient)(base); // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    bank: {\n      balance: async (address, denom) => {\n        const {\n          balance\n        } = await queryService.Balance({\n          address: address,\n          denom: denom\n        });\n        (0, utils_1.assert)(balance);\n        return balance;\n      },\n      allBalances: async address => {\n        const {\n          balances\n        } = await queryService.AllBalances({\n          address: address\n        });\n        return balances;\n      },\n      totalSupply: async () => {\n        const {\n          supply\n        } = await queryService.TotalSupply({});\n        return supply;\n      },\n      supplyOf: async denom => {\n        const {\n          amount\n        } = await queryService.SupplyOf({\n          denom: denom\n        });\n        (0, utils_1.assert)(amount);\n        return amount;\n      },\n      denomMetadata: async denom => {\n        const {\n          metadata\n        } = await queryService.DenomMetadata({\n          denom\n        });\n        (0, utils_1.assert)(metadata);\n        return metadata;\n      },\n      denomsMetadata: async () => {\n        const {\n          metadatas\n        } = await queryService.DenomsMetadata({\n          pagination: undefined // Not implemented\n\n        });\n        return metadatas;\n      }\n    }\n  };\n}\n\nexports.setupBankExtension = setupBankExtension;","map":{"version":3,"mappings":";;;;;;AAAA;;AACA;;AAEA;;AAGA;;AAaA,SAAgBA,kBAAhB,CAAmCC,IAAnC,EAAoD;EAClD,MAAMC,GAAG,GAAG,2CAAwBD,IAAxB,CAAZ,CADkD,CAElD;EACA;;EACA,MAAME,YAAY,GAAG,IAAIC,uBAAJ,CAAoBF,GAApB,CAArB;EAEA,OAAO;IACLG,IAAI,EAAE;MACJC,OAAO,EAAE,OAAOC,OAAP,EAAwBC,KAAxB,KAAyC;QAChD,MAAM;UAAEF;QAAF,IAAc,MAAMH,YAAY,CAACM,OAAb,CAAqB;UAAEF,OAAO,EAAEA,OAAX;UAAoBC,KAAK,EAAEA;QAA3B,CAArB,CAA1B;QACA,oBAAOF,OAAP;QACA,OAAOA,OAAP;MACD,CALG;MAMJI,WAAW,EAAE,MAAOH,OAAP,IAA0B;QACrC,MAAM;UAAEI;QAAF,IAAe,MAAMR,YAAY,CAACS,WAAb,CAAyB;UAAEL,OAAO,EAAEA;QAAX,CAAzB,CAA3B;QACA,OAAOI,QAAP;MACD,CATG;MAUJE,WAAW,EAAE,YAAW;QACtB,MAAM;UAAEC;QAAF,IAAa,MAAMX,YAAY,CAACY,WAAb,CAAyB,EAAzB,CAAzB;QACA,OAAOD,MAAP;MACD,CAbG;MAcJE,QAAQ,EAAE,MAAOR,KAAP,IAAwB;QAChC,MAAM;UAAES;QAAF,IAAa,MAAMd,YAAY,CAACe,QAAb,CAAsB;UAAEV,KAAK,EAAEA;QAAT,CAAtB,CAAzB;QACA,oBAAOS,MAAP;QACA,OAAOA,MAAP;MACD,CAlBG;MAmBJE,aAAa,EAAE,MAAOX,KAAP,IAAwB;QACrC,MAAM;UAAEY;QAAF,IAAe,MAAMjB,YAAY,CAACkB,aAAb,CAA2B;UAAEb;QAAF,CAA3B,CAA3B;QACA,oBAAOY,QAAP;QACA,OAAOA,QAAP;MACD,CAvBG;MAwBJE,cAAc,EAAE,YAAW;QACzB,MAAM;UAAEC;QAAF,IAAgB,MAAMpB,YAAY,CAACqB,cAAb,CAA4B;UACtDC,UAAU,EAAEC,SAD0C,CAC/B;;QAD+B,CAA5B,CAA5B;QAGA,OAAOH,SAAP;MACD;IA7BG;EADD,CAAP;AAiCD;;AAvCDI","names":["setupBankExtension","base","rpc","queryService","query_1","bank","balance","address","denom","Balance","allBalances","balances","AllBalances","totalSupply","supply","TotalSupply","supplyOf","amount","SupplyOf","denomMetadata","metadata","DenomMetadata","denomsMetadata","metadatas","DenomsMetadata","pagination","undefined","exports"],"sourceRoot":"","sources":["../../../src/modules/bank/queries.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}