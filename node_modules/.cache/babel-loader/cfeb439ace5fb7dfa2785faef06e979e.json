{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeBlockId = exports.encodeVersion = exports.encodeBytes = exports.encodeTime = exports.encodeInt = exports.encodeString = exports.Integer = exports.dictionaryToStringMap = exports.may = exports.optional = exports.assertNotEmpty = exports.assertObject = exports.assertArray = exports.assertNumber = exports.assertString = exports.assertBoolean = exports.assertSet = void 0;\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n/**\n * A runtime checker that ensures a given value is set (i.e. not undefined or null)\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n */\n\n\nfunction assertSet(value) {\n  if (value === undefined) {\n    throw new Error(\"Value must not be undefined\");\n  }\n\n  if (value === null) {\n    throw new Error(\"Value must not be null\");\n  }\n\n  return value;\n}\n\nexports.assertSet = assertSet;\n/**\n * A runtime checker that ensures a given value is a boolean\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\n\nfunction assertBoolean(value) {\n  assertSet(value);\n\n  if (typeof value !== \"boolean\") {\n    throw new Error(\"Value must be a boolean\");\n  }\n\n  return value;\n}\n\nexports.assertBoolean = assertBoolean;\n/**\n * A runtime checker that ensures a given value is a string.\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\n\nfunction assertString(value) {\n  assertSet(value);\n\n  if (typeof value !== \"string\") {\n    throw new Error(\"Value must be a string\");\n  }\n\n  return value;\n}\n\nexports.assertString = assertString;\n/**\n * A runtime checker that ensures a given value is a number\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\n\nfunction assertNumber(value) {\n  assertSet(value);\n\n  if (typeof value !== \"number\") {\n    throw new Error(\"Value must be a number\");\n  }\n\n  return value;\n}\n\nexports.assertNumber = assertNumber;\n/**\n * A runtime checker that ensures a given value is an array\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\n\nfunction assertArray(value) {\n  assertSet(value);\n\n  if (!Array.isArray(value)) {\n    throw new Error(\"Value must be a an array\");\n  }\n\n  return value;\n}\n\nexports.assertArray = assertArray;\n/**\n * A runtime checker that ensures a given value is an object in the sense of JSON\n * (an unordered collection of keyâ€“value pairs where the keys are strings)\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\n\nfunction assertObject(value) {\n  assertSet(value);\n\n  if (typeof value !== \"object\") {\n    throw new Error(\"Value must be an object\");\n  } // Exclude special kind of objects like Array, Date or Uint8Array\n  // Object.prototype.toString() returns a specified value:\n  // http://www.ecma-international.org/ecma-262/7.0/index.html#sec-object.prototype.tostring\n\n\n  if (Object.prototype.toString.call(value) !== \"[object Object]\") {\n    throw new Error(\"Value must be a simple object\");\n  }\n\n  return value;\n}\n\nexports.assertObject = assertObject;\n/**\n * Throws an error if value matches the empty value for the\n * given type (array/string of length 0, number of value 0, ...)\n *\n * Otherwise returns the value.\n *\n * This implies assertSet\n */\n\nfunction assertNotEmpty(value) {\n  assertSet(value);\n\n  if (typeof value === \"number\" && value === 0) {\n    throw new Error(\"must provide a non-zero value\");\n  } else if (value.length === 0) {\n    throw new Error(\"must provide a non-empty value\");\n  }\n\n  return value;\n}\n\nexports.assertNotEmpty = assertNotEmpty; // optional uses the value or provides a default\n\nfunction optional(value, fallback) {\n  return value === undefined || value === null ? fallback : value;\n}\n\nexports.optional = optional; // may will run the transform if value is defined, otherwise returns undefined\n\nfunction may(transform, value) {\n  return value === undefined || value === null ? undefined : transform(value);\n}\n\nexports.may = may;\n\nfunction dictionaryToStringMap(obj) {\n  const out = new Map();\n\n  for (const key of Object.keys(obj)) {\n    const value = obj[key];\n\n    if (typeof value !== \"string\") {\n      throw new Error(\"Found dictionary value of type other than string\");\n    }\n\n    out.set(key, value);\n  }\n\n  return out;\n}\n\nexports.dictionaryToStringMap = dictionaryToStringMap;\n\nclass Integer {\n  static parse(input) {\n    const asInt = typeof input === \"number\" ? new math_1.Int53(input) : math_1.Int53.fromString(input);\n    return asInt.toNumber();\n  }\n\n  static encode(num) {\n    return new math_1.Int53(num).toString();\n  }\n\n}\n\nexports.Integer = Integer; // Encodings needed for hashing block headers\n// Several of these functions are inspired by https://github.com/nomic-io/js-tendermint/blob/tendermint-0.30/src/\n// See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L193-L195\n\nfunction encodeString(s) {\n  const utf8 = (0, encoding_1.toUtf8)(s);\n  return Uint8Array.from([utf8.length, ...utf8]);\n}\n\nexports.encodeString = encodeString; // See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L79-L87\n\nfunction encodeInt(n) {\n  // eslint-disable-next-line no-bitwise\n  return n >= 0x80 ? Uint8Array.from([n & 0xff | 0x80, ...encodeInt(n >> 7)]) : Uint8Array.from([n & 0xff]);\n}\n\nexports.encodeInt = encodeInt; // See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L134-L178\n\nfunction encodeTime(time) {\n  const milliseconds = time.getTime();\n  const seconds = Math.floor(milliseconds / 1000);\n  const secondsArray = seconds ? [0x08, ...encodeInt(seconds)] : new Uint8Array();\n  const nanoseconds = (time.nanoseconds || 0) + milliseconds % 1000 * 1e6;\n  const nanosecondsArray = nanoseconds ? [0x10, ...encodeInt(nanoseconds)] : new Uint8Array();\n  return Uint8Array.from([...secondsArray, ...nanosecondsArray]);\n}\n\nexports.encodeTime = encodeTime; // See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L180-L187\n\nfunction encodeBytes(bytes) {\n  // Since we're only dealing with short byte arrays we don't need a full VarBuffer implementation yet\n  if (bytes.length >= 0x80) throw new Error(\"Not implemented for byte arrays of length 128 or more\");\n  return bytes.length ? Uint8Array.from([bytes.length, ...bytes]) : new Uint8Array();\n}\n\nexports.encodeBytes = encodeBytes;\n\nfunction encodeVersion(version) {\n  const blockArray = version.block ? Uint8Array.from([0x08, ...encodeInt(version.block)]) : new Uint8Array();\n  const appArray = version.app ? Uint8Array.from([0x10, ...encodeInt(version.app)]) : new Uint8Array();\n  return Uint8Array.from([...blockArray, ...appArray]);\n}\n\nexports.encodeVersion = encodeVersion;\n\nfunction encodeBlockId(blockId) {\n  return Uint8Array.from([0x0a, blockId.hash.length, ...blockId.hash, 0x12, blockId.parts.hash.length + 4, 0x08, blockId.parts.total, 0x12, blockId.parts.hash.length, ...blockId.parts.hash]);\n}\n\nexports.encodeBlockId = encodeBlockId;","map":{"version":3,"mappings":"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","names":["assertSet","value","undefined","Error","exports","assertBoolean","assertString","assertNumber","assertArray","Array","isArray","assertObject","Object","prototype","toString","call","assertNotEmpty","length","optional","fallback","may","transform","dictionaryToStringMap","obj","out","Map","key","keys","set","Integer","parse","input","asInt","math_1","fromString","toNumber","encode","num","encodeString","s","utf8","Uint8Array","from","encodeInt","n","encodeTime","time","milliseconds","getTime","seconds","Math","floor","secondsArray","nanoseconds","nanosecondsArray","encodeBytes","bytes","encodeVersion","version","blockArray","block","appArray","app","encodeBlockId","blockId","hash","parts","total"],"sourceRoot":"","sources":["../../src/tendermint34/encodings.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}