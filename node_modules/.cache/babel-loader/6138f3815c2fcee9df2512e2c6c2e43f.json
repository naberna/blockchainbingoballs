{"ast":null,"code":"\"use strict\"; // Keep all classes requiring libsodium-js in one file as having multiple\n// requiring of the libsodium-wrappers module currently crashes browsers\n//\n// libsodium.js API: https://gist.github.com/webmaster128/b2dbe6d54d36dd168c9fabf441b9b09c\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Xchacha20poly1305Ietf = exports.xchacha20NonceLength = exports.Ed25519 = exports.Ed25519Keypair = exports.Argon2id = exports.isArgon2idOptions = void 0;\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nconst libsodium_wrappers_1 = __importDefault(require(\"libsodium-wrappers\"));\n\nfunction isArgon2idOptions(thing) {\n  if (!(0, utils_1.isNonNullObject)(thing)) return false;\n  if (typeof thing.outputLength !== \"number\") return false;\n  if (typeof thing.opsLimit !== \"number\") return false;\n  if (typeof thing.memLimitKib !== \"number\") return false;\n  return true;\n}\n\nexports.isArgon2idOptions = isArgon2idOptions;\n\nclass Argon2id {\n  static async execute(password, salt, options) {\n    await libsodium_wrappers_1.default.ready;\n    return libsodium_wrappers_1.default.crypto_pwhash(options.outputLength, password, salt, // libsodium only supports 16 byte salts and will throw when you don't respect that\n    options.opsLimit, options.memLimitKib * 1024, libsodium_wrappers_1.default.crypto_pwhash_ALG_ARGON2ID13);\n  }\n\n}\n\nexports.Argon2id = Argon2id;\n\nclass Ed25519Keypair {\n  constructor(privkey, pubkey) {\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n  } // a libsodium privkey has the format `<ed25519 privkey> + <ed25519 pubkey>`\n\n\n  static fromLibsodiumPrivkey(libsodiumPrivkey) {\n    if (libsodiumPrivkey.length !== 64) {\n      throw new Error(`Unexpected key length ${libsodiumPrivkey.length}. Must be 64.`);\n    }\n\n    return new Ed25519Keypair(libsodiumPrivkey.slice(0, 32), libsodiumPrivkey.slice(32, 64));\n  }\n\n  toLibsodiumPrivkey() {\n    return new Uint8Array([...this.privkey, ...this.pubkey]);\n  }\n\n}\n\nexports.Ed25519Keypair = Ed25519Keypair;\n\nclass Ed25519 {\n  /**\n   * Generates a keypair deterministically from a given 32 bytes seed.\n   *\n   * This seed equals the Ed25519 private key.\n   * For implementation details see crypto_sign_seed_keypair in\n   * https://download.libsodium.org/doc/public-key_cryptography/public-key_signatures.html\n   * and diagram on https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  static async makeKeypair(seed) {\n    await libsodium_wrappers_1.default.ready;\n    const keypair = libsodium_wrappers_1.default.crypto_sign_seed_keypair(seed);\n    return Ed25519Keypair.fromLibsodiumPrivkey(keypair.privateKey);\n  }\n\n  static async createSignature(message, keyPair) {\n    await libsodium_wrappers_1.default.ready;\n    return libsodium_wrappers_1.default.crypto_sign_detached(message, keyPair.toLibsodiumPrivkey());\n  }\n\n  static async verifySignature(signature, message, pubkey) {\n    await libsodium_wrappers_1.default.ready;\n    return libsodium_wrappers_1.default.crypto_sign_verify_detached(signature, message, pubkey);\n  }\n\n}\n\nexports.Ed25519 = Ed25519;\n/**\n * Nonce length in bytes for all flavours of XChaCha20.\n *\n * @see https://libsodium.gitbook.io/doc/advanced/stream_ciphers/xchacha20#notes\n */\n\nexports.xchacha20NonceLength = 24;\n\nclass Xchacha20poly1305Ietf {\n  static async encrypt(message, key, nonce) {\n    await libsodium_wrappers_1.default.ready;\n    const additionalData = null;\n    return libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_encrypt(message, additionalData, null, // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n    nonce, key);\n  }\n\n  static async decrypt(ciphertext, key, nonce) {\n    await libsodium_wrappers_1.default.ready;\n    const additionalData = null;\n    return libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_decrypt(null, // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n    ciphertext, additionalData, nonce, key);\n  }\n\n}\n\nexports.Xchacha20poly1305Ietf = Xchacha20poly1305Ietf;","map":{"version":3,"mappings":"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","names":["isArgon2idOptions","thing","outputLength","opsLimit","memLimitKib","exports","Argon2id","execute","password","salt","options","libsodium_wrappers_1","ready","crypto_pwhash","crypto_pwhash_ALG_ARGON2ID13","Ed25519Keypair","constructor","privkey","pubkey","fromLibsodiumPrivkey","libsodiumPrivkey","length","Error","slice","toLibsodiumPrivkey","Uint8Array","Ed25519","makeKeypair","seed","keypair","crypto_sign_seed_keypair","privateKey","createSignature","message","keyPair","crypto_sign_detached","verifySignature","signature","crypto_sign_verify_detached","Xchacha20poly1305Ietf","encrypt","key","nonce","additionalData","crypto_aead_xchacha20poly1305_ietf_encrypt","decrypt","ciphertext","crypto_aead_xchacha20poly1305_ietf_decrypt"],"sourceRoot":"","sources":["../src/libsodium.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}