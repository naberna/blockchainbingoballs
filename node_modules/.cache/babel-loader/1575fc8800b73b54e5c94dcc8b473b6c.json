{"ast":null,"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nvar TWITCH_EMBED_URL = 'https://embed.twitch.tv/embed/v1.js';\nvar TWITCH_CHAT_URL = 'https://www.twitch.tv/embed';\nvar TWITCH_CLIP_URL = 'https://clips.twitch.tv/embed';\nvar TWITCH_PLAYER_URL = 'https://player.twitch.tv/js/embed/v1.js';\nvar CHAT_DEFAULT_HEIGHT = 500;\nvar CHAT_DEFAULT_WIDTH = 350;\nvar MEDIA_DEFAULT_HEIGHT = 480;\nvar MEDIA_DEFAULT_WIDTH = 940;\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar parseParentQuery = function parseParentQuery(parent) {\n  return '&parent=' + [window.location.hostname].concat(toConsumableArray(parent)).join('&parent=');\n};\n\nvar getUnknownProps = function getUnknownProps(props, propTypes) {\n  return Object.keys(props).reduce(function (unknown, prop) {\n    if (propTypes.hasOwnProperty(prop)) {\n      return unknown;\n    }\n\n    unknown[prop] = props[prop];\n    return unknown;\n  }, {});\n};\n\nvar scriptElement = null;\n\nvar loadScript = function loadScript() {\n  scriptElement = document.createElement('script');\n  scriptElement.setAttribute('type', 'text/javascript');\n  scriptElement.setAttribute('src', TWITCH_EMBED_URL);\n  document.body.appendChild(scriptElement);\n};\n\nvar propTypes = {\n  id: PropTypes.string,\n  allowFullscreen: PropTypes.bool,\n  channel: PropTypes.string.isRequired,\n  fontSize: PropTypes.oneOf(['small', 'medium', 'large']),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  withChat: PropTypes.bool,\n  theme: PropTypes.oneOf(['light', 'dark']),\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onAuthenticate: PropTypes.func,\n  onVideoPlay: PropTypes.func,\n  onVideoPause: PropTypes.func,\n  onVideoReady: PropTypes.func,\n  autoplay: PropTypes.bool,\n  muted: PropTypes.bool,\n  parent: PropTypes.arrayOf(PropTypes.string)\n};\nvar defaultProps = {\n  id: 'twitch-embed',\n  allowFullscreen: true,\n  fontSize: 'small',\n  height: MEDIA_DEFAULT_HEIGHT,\n  withChat: true,\n  theme: 'light',\n  width: MEDIA_DEFAULT_WIDTH,\n  onAuthenticate: function onAuthenticate() {\n    return null;\n  },\n  onVideoPlay: function onVideoPlay() {\n    return null;\n  },\n  onVideoPause: function onVideoPause() {\n    return null;\n  },\n  onVideoReady: function onVideoReady() {\n    return null;\n  },\n  autoplay: true,\n  muted: false,\n  parent: []\n};\n\nvar TwitchEmbed = function (_Component) {\n  inherits(TwitchEmbed, _Component);\n\n  function TwitchEmbed() {\n    classCallCheck(this, TwitchEmbed);\n    return possibleConstructorReturn(this, (TwitchEmbed.__proto__ || Object.getPrototypeOf(TwitchEmbed)).apply(this, arguments));\n  }\n\n  createClass(TwitchEmbed, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this._validateProps();\n\n      if (window.Twitch && window.Twitch.Embed) {\n        return this._createEmbed();\n      }\n\n      if (!scriptElement) {\n        loadScript();\n      }\n\n      scriptElement.addEventListener('load', function () {\n        _this2._createEmbed();\n      });\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var _this3 = this;\n\n      this._validateProps();\n\n      if (prevProps.withChat) {\n        this.embed = null;\n        this.player = null;\n        document.getElementById(prevProps.id).innerHTML = '';\n        return this._createEmbed();\n      }\n\n      var updatedPropsExceptChannel = Object.keys(prevProps).reduce(function (updated, prop) {\n        if (prop === 'channel') {\n          return updated;\n        }\n\n        if (prevProps[prop] !== _this3.props[prop]) {\n          updated.push(prop);\n        }\n\n        return updated;\n      }, []);\n\n      if (updatedPropsExceptChannel.length > 0) {\n        this.embed = null;\n        this.player = null;\n        document.getElementById(prevProps.id).innerHTML = '';\n        return this._createEmbed();\n      }\n\n      if (prevProps.channel !== this.props.channel) {\n        this.player.setChannel(this.props.channel);\n      }\n    }\n  }, {\n    key: '_createEmbed',\n    value: function _createEmbed() {\n      this.embed = new window.Twitch.Embed(this.props.id, {\n        allowfullscreen: this.props.allowFullscreen,\n        channel: this.props.channel,\n        'font-size': this.props.fontSize,\n        height: '100%',\n        layout: this.props.withChat ? 'video-with-chat' : 'video',\n        theme: this.props.theme,\n        width: '100%',\n        parent: this.props.parent\n      });\n\n      this._addEventListeners();\n    }\n  }, {\n    key: '_addEventListeners',\n    value: function _addEventListeners() {\n      var _this4 = this;\n\n      this.embed.addEventListener(window.Twitch.Embed.AUTHENTICATE, this.props.onAuthenticate);\n      this.embed.addEventListener(window.Twitch.Embed.VIDEO_PLAY, this.props.onVideoPlay);\n      this.embed.addEventListener(window.Twitch.Embed.VIDEO_PAUSE, this.props.onVideoPause);\n      this.embed.addEventListener(window.Twitch.Embed.VIDEO_READY, function () {\n        var _props = _this4.props,\n            autoplay = _props.autoplay,\n            muted = _props.muted;\n        _this4.player = _this4.embed.getPlayer();\n\n        if (muted) {\n          _this4.player.setVolume(0);\n        }\n\n        if (!autoplay) {\n          _this4.player.pause();\n        }\n\n        _this4.props.onVideoReady(_this4.player);\n      });\n    }\n  }, {\n    key: '_validateProps',\n    value: function _validateProps() {\n      if (!this.props.channel) {\n        throw new Error('A channel prop must be supplied to TwitchEmbed!');\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var unknownProps = getUnknownProps(this.props, propTypes);\n      return React.createElement('div', _extends({\n        style: {\n          width: this.props.width,\n          height: this.props.height\n        },\n        id: this.props.id\n      }, unknownProps));\n    }\n  }]);\n  return TwitchEmbed;\n}(Component);\n\nTwitchEmbed.propTypes = propTypes;\nTwitchEmbed.defaultProps = defaultProps;\nvar propTypes$1 = {\n  channel: PropTypes.string.isRequired,\n  id: PropTypes.string,\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  theme: PropTypes.oneOf(['light', 'dark']),\n  parent: PropTypes.arrayOf(PropTypes.string),\n  migration: PropTypes.bool\n};\nvar defaultProps$1 = {\n  id: 'twitch-chat-embed',\n  height: CHAT_DEFAULT_HEIGHT,\n  width: CHAT_DEFAULT_WIDTH,\n  theme: 'light',\n  migration: true,\n  parent: []\n};\n\nvar TwitchChat = function (_Component) {\n  inherits(TwitchChat, _Component);\n\n  function TwitchChat() {\n    classCallCheck(this, TwitchChat);\n    return possibleConstructorReturn(this, (TwitchChat.__proto__ || Object.getPrototypeOf(TwitchChat)).apply(this, arguments));\n  }\n\n  createClass(TwitchChat, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._validateProps();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      this._validateProps();\n    }\n  }, {\n    key: '_validateProps',\n    value: function _validateProps() {\n      if (!this.props.channel) {\n        throw new Error('A channel prop must be supplied to TwitchChat!');\n      }\n    }\n  }, {\n    key: '_createEmbedURL',\n    value: function _createEmbedURL() {\n      var _props = this.props,\n          channel = _props.channel,\n          theme = _props.theme,\n          parent = _props.parent,\n          migration = _props.migration;\n      var themeQuery = theme === 'dark' ? '?darkpopout' : '';\n      var migrationFirstChar = theme !== 'dark' ? '?' : '&';\n      return TWITCH_CHAT_URL + '/' + channel + '/chat' + themeQuery + migrationFirstChar + 'migration=' + migration.toString() + parseParentQuery(parent);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          height = _props2.height,\n          id = _props2.id,\n          width = _props2.width;\n      var unknownProps = getUnknownProps(this.props, propTypes$1);\n      return React.createElement('iframe', _extends({\n        title: 'Twitch Chat - ' + id,\n        id: id,\n        src: this._createEmbedURL(),\n        height: height,\n        width: width,\n        frameBorder: 0\n      }, unknownProps));\n    }\n  }]);\n  return TwitchChat;\n}(Component);\n\nTwitchChat.propTypes = propTypes$1;\nTwitchChat.defaultProps = defaultProps$1;\nvar propTypes$2 = {\n  clip: PropTypes.string.isRequired,\n  id: PropTypes.string,\n  autoplay: PropTypes.bool,\n  muted: PropTypes.bool,\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  allowFullscreen: PropTypes.bool,\n  parent: PropTypes.arrayOf(PropTypes.string),\n  migration: PropTypes.bool\n};\nvar defaultProps$2 = {\n  id: 'twitch-clip-embed',\n  autoplay: true,\n  muted: false,\n  height: MEDIA_DEFAULT_HEIGHT,\n  width: MEDIA_DEFAULT_WIDTH,\n  allowFullscreen: true,\n  migration: true,\n  parent: []\n};\n\nvar TwitchClip = function (_Component) {\n  inherits(TwitchClip, _Component);\n\n  function TwitchClip() {\n    classCallCheck(this, TwitchClip);\n    return possibleConstructorReturn(this, (TwitchClip.__proto__ || Object.getPrototypeOf(TwitchClip)).apply(this, arguments));\n  }\n\n  createClass(TwitchClip, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._validateProps();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      this._validateProps();\n    }\n  }, {\n    key: '_validateProps',\n    value: function _validateProps() {\n      if (!this.props.clip) {\n        throw new Error('A clip prop must be supplied to TwitchClip!');\n      }\n    }\n  }, {\n    key: '_createEmbedURL',\n    value: function _createEmbedURL() {\n      var _props = this.props,\n          clip = _props.clip,\n          autoplay = _props.autoplay,\n          muted = _props.muted,\n          parent = _props.parent,\n          migration = _props.migration;\n      return TWITCH_CLIP_URL + '?clip=' + clip + '&autoplay=' + autoplay + '&muted=' + muted + '&migration=' + migration.toString() + parseParentQuery(parent);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          id = _props2.id,\n          height = _props2.height,\n          width = _props2.width,\n          allowFullscreen = _props2.allowFullscreen;\n      var unknownProps = getUnknownProps(this.props, propTypes$2);\n      return React.createElement('iframe', _extends({\n        title: 'Twitch Clip Embed - ' + id,\n        src: this._createEmbedURL(),\n        id: id,\n        height: height,\n        width: width,\n        allowFullScreen: allowFullscreen,\n        frameBorder: 0\n      }, unknownProps));\n    }\n  }]);\n  return TwitchClip;\n}(Component);\n\nTwitchClip.propTypes = propTypes$2;\nTwitchClip.defaultProps = defaultProps$2;\nvar mediaProps = ['channel', 'collection', 'video'];\nvar scriptElement$1 = null;\n\nvar loadScript$1 = function loadScript() {\n  scriptElement$1 = document.createElement('script');\n  scriptElement$1.setAttribute('type', 'text/javascript');\n  scriptElement$1.setAttribute('src', TWITCH_PLAYER_URL);\n  document.body.appendChild(scriptElement$1);\n};\n\nvar propTypes$3 = {\n  id: PropTypes.string,\n  channel: PropTypes.string,\n  collection: PropTypes.string,\n  video: PropTypes.string,\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  playsInline: PropTypes.bool,\n  autoplay: PropTypes.bool,\n  muted: PropTypes.bool,\n  allowFullscreen: PropTypes.bool,\n  time: PropTypes.string,\n  hideControls: PropTypes.bool,\n  onEnded: PropTypes.func,\n  onPause: PropTypes.func,\n  onPlay: PropTypes.func,\n  onPlaybackBlocked: PropTypes.func,\n  onPlaying: PropTypes.func,\n  onOffline: PropTypes.func,\n  onOnline: PropTypes.func,\n  onReady: PropTypes.func,\n  parent: PropTypes.arrayOf(PropTypes.string)\n};\nvar defaultProps$3 = {\n  id: 'twitch-player-embed',\n  channel: null,\n  collection: null,\n  video: null,\n  height: MEDIA_DEFAULT_HEIGHT,\n  width: MEDIA_DEFAULT_WIDTH,\n  playsInline: true,\n  autoplay: true,\n  muted: false,\n  allowFullscreen: true,\n  time: '0h0m0s',\n  hideControls: false,\n  onEnded: function onEnded() {\n    return null;\n  },\n  onPause: function onPause() {\n    return null;\n  },\n  onPlay: function onPlay() {\n    return null;\n  },\n  onPlaybackBlocked: function onPlaybackBlocked() {\n    return null;\n  },\n  onPlaying: function onPlaying() {\n    return null;\n  },\n  onOffline: function onOffline() {\n    return null;\n  },\n  onOnline: function onOnline() {\n    return null;\n  },\n  onReady: function onReady() {\n    return null;\n  },\n  parent: []\n};\n\nvar TwitchPlayer = function (_Component) {\n  inherits(TwitchPlayer, _Component);\n\n  function TwitchPlayer() {\n    classCallCheck(this, TwitchPlayer);\n    return possibleConstructorReturn(this, (TwitchPlayer.__proto__ || Object.getPrototypeOf(TwitchPlayer)).apply(this, arguments));\n  }\n\n  createClass(TwitchPlayer, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this._validateProps();\n\n      if (window.Twitch && window.Twitch.Player) {\n        return this._createPlayer();\n      }\n\n      if (!scriptElement$1) {\n        loadScript$1();\n      }\n\n      scriptElement$1.addEventListener('load', function () {\n        _this2._createPlayer();\n      });\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var _this3 = this;\n\n      this._validateProps();\n\n      var updatedPropsExceptMedia = Object.keys(prevProps).reduce(function (updated, prop) {\n        if (mediaProps.includes(prop)) {\n          return updated;\n        }\n\n        if (prevProps[prop] !== _this3.props[prop]) {\n          updated.push(prop);\n        }\n\n        return updated;\n      }, []);\n\n      if (updatedPropsExceptMedia.length > 0) {\n        this.player = null;\n        document.getElementById(prevProps.id).innerHTML = '';\n        return this._createPlayer();\n      }\n\n      if (prevProps.channel !== this.props.channel && this.props.channel) {\n        return this.player.setChannel(this.props.channel);\n      }\n\n      if (prevProps.collection !== this.props.collection && this.props.collection) {\n        this.player.setCollection(this.props.collection);\n      }\n\n      if (prevProps.video !== this.props.video && this.props.video) {\n        this.player.setVideo('v' + this.props.video);\n      }\n    }\n  }, {\n    key: '_createPlayer',\n    value: function _createPlayer() {\n      var options = {\n        height: '100%',\n        width: '100%',\n        playsinline: this.props.playsInline,\n        allowfullscreen: this.props.allowFullscreen,\n        autoplay: this.props.autoplay,\n        muted: this.props.muted,\n        time: this.props.time,\n        controls: !this.props.hideControls,\n        parent: this.props.parent\n      };\n\n      if (this.props.channel) {\n        options.channel = this.props.channel;\n      }\n\n      if (this.props.video) {\n        options.video = this.props.video;\n      }\n\n      if (this.props.collection) {\n        options.collection = this.props.collection;\n      }\n\n      this.player = new window.Twitch.Player(this.props.id, options);\n\n      this._addEventListeners();\n    }\n  }, {\n    key: '_addEventListeners',\n    value: function _addEventListeners() {\n      var _this4 = this;\n\n      this.player.addEventListener(window.Twitch.Player.ENDED, this.props.onEnded);\n      this.player.addEventListener(window.Twitch.Player.PAUSE, this.props.onPause);\n      this.player.addEventListener(window.Twitch.Player.PLAY, this.props.onPlay);\n      this.player.addEventListener(window.Twitch.Player.PLAYBACK_BLOCKED, this.props.onPlaybackBlocked);\n      this.player.addEventListener(window.Twitch.Player.PLAYING, this.props.onPlaying);\n      this.player.addEventListener(window.Twitch.Player.OFFLINE, this.props.onOffline);\n      this.player.addEventListener(window.Twitch.Player.ONLINE, this.props.onOnline);\n      this.player.addEventListener(window.Twitch.Player.READY, function () {\n        _this4.props.onReady(_this4.player);\n      });\n    }\n  }, {\n    key: '_validateProps',\n    value: function _validateProps() {\n      var _props = this.props,\n          channel = _props.channel,\n          collection = _props.collection,\n          video = _props.video;\n\n      if (!channel && !collection && !video) {\n        throw new Error('A channel, collection or video prop must be supplied to TwitchPlayer!');\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var unknownProps = getUnknownProps(this.props, propTypes$3);\n      return React.createElement('div', _extends({\n        id: this.props.id,\n        style: {\n          width: this.props.width,\n          height: this.props.height\n        }\n      }, unknownProps));\n    }\n  }]);\n  return TwitchPlayer;\n}(Component);\n\nTwitchPlayer.propTypes = propTypes$3;\nTwitchPlayer.defaultProps = defaultProps$3;\nexport { TwitchEmbed, TwitchChat, TwitchClip, TwitchPlayer };","map":{"version":3,"mappings":"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","names":["TWITCH_EMBED_URL","TWITCH_CHAT_URL","TWITCH_CLIP_URL","TWITCH_PLAYER_URL","CHAT_DEFAULT_HEIGHT","CHAT_DEFAULT_WIDTH","MEDIA_DEFAULT_HEIGHT","MEDIA_DEFAULT_WIDTH","parseParentQuery","parent","window","location","hostname","join","getUnknownProps","props","propTypes","Object","keys","reduce","unknown","prop","hasOwnProperty","scriptElement","loadScript","document","createElement","setAttribute","body","appendChild","PropTypes","string","bool","isRequired","oneOf","oneOfType","number","func","arrayOf","defaultProps","TwitchEmbed","_validateProps","Twitch","Embed","_createEmbed","addEventListener","prevProps","prevState","snapshot","withChat","embed","player","getElementById","id","innerHTML","updatedPropsExceptChannel","updated","_this3","push","length","channel","setChannel","allowFullscreen","fontSize","theme","_addEventListeners","AUTHENTICATE","onAuthenticate","VIDEO_PLAY","onVideoPlay","VIDEO_PAUSE","onVideoPause","VIDEO_READY","_this4","autoplay","muted","getPlayer","setVolume","pause","onVideoReady","Error","unknownProps","React","style","width","height","Component","TwitchChat","migration","themeQuery","migrationFirstChar","toString","_createEmbedURL","TwitchClip","clip","mediaProps","TwitchPlayer","Player","_createPlayer","updatedPropsExceptMedia","includes","collection","setCollection","video","setVideo","options","playsInline","time","hideControls","ENDED","onEnded","PAUSE","onPause","PLAY","onPlay","PLAYBACK_BLOCKED","onPlaybackBlocked","PLAYING","onPlaying","OFFLINE","onOffline","ONLINE","onOnline","READY","onReady"],"sources":["../src/constants.js","../src/utils.js","../src/components/TwitchEmbed.js","../src/components/TwitchChat.js","../src/components/TwitchClip.js","../src/components/TwitchPlayer.js"],"sourcesContent":["const TWITCH_EMBED_URL = 'https://embed.twitch.tv/embed/v1.js';\nconst TWITCH_CHAT_URL = 'https://www.twitch.tv/embed';\nconst TWITCH_CLIP_URL = 'https://clips.twitch.tv/embed';\nconst TWITCH_PLAYER_URL = 'https://player.twitch.tv/js/embed/v1.js';\n\nconst CHAT_DEFAULT_HEIGHT = 500;\nconst CHAT_DEFAULT_WIDTH = 350;\nconst MEDIA_DEFAULT_HEIGHT = 480;\nconst MEDIA_DEFAULT_WIDTH = 940;\n\nexport {\n  TWITCH_EMBED_URL,\n  TWITCH_CHAT_URL,\n  TWITCH_CLIP_URL,\n  TWITCH_PLAYER_URL,\n  CHAT_DEFAULT_HEIGHT,\n  CHAT_DEFAULT_WIDTH,\n  MEDIA_DEFAULT_HEIGHT,\n  MEDIA_DEFAULT_WIDTH\n};\n","const parseParentQuery = (parent) => {\n  return `&parent=${[window.location.hostname, ...parent].join('&parent=')}`;\n};\n\nconst getUnknownProps = (props, propTypes) => {\n  return Object.keys(props).reduce((unknown, prop) => {\n    if (propTypes.hasOwnProperty(prop)) {\n      return unknown;\n    }\n\n    unknown[prop] = props[prop];\n    return unknown;\n  }, {});\n};\n\nexport {\n  parseParentQuery,\n  getUnknownProps\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TWITCH_EMBED_URL, MEDIA_DEFAULT_WIDTH, MEDIA_DEFAULT_HEIGHT } from '../constants';\nimport { getUnknownProps } from '../utils';\n\nlet scriptElement = null;\n\nconst loadScript = () => {\n  scriptElement = document.createElement('script');\n  scriptElement.setAttribute('type', 'text/javascript');\n  scriptElement.setAttribute('src', TWITCH_EMBED_URL);\n  document.body.appendChild(scriptElement);\n};\n\nconst propTypes = {\n  id: PropTypes.string,\n  allowFullscreen: PropTypes.bool,\n  channel: PropTypes.string.isRequired,\n  fontSize: PropTypes.oneOf(['small', 'medium', 'large']),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  withChat: PropTypes.bool,\n  theme: PropTypes.oneOf(['light', 'dark']),\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onAuthenticate: PropTypes.func,\n  onVideoPlay: PropTypes.func,\n  onVideoPause: PropTypes.func,\n  onVideoReady: PropTypes.func,\n  autoplay: PropTypes.bool,\n  muted: PropTypes.bool,\n  parent: PropTypes.arrayOf(PropTypes.string)\n};\n\nconst defaultProps = {\n  id: 'twitch-embed',\n  allowFullscreen: true,\n  fontSize: 'small',\n  height: MEDIA_DEFAULT_HEIGHT,\n  withChat: true,\n  theme: 'light',\n  width: MEDIA_DEFAULT_WIDTH,\n  onAuthenticate: () => null,\n  onVideoPlay: () => null,\n  onVideoPause: () => null,\n  onVideoReady: () => null,\n  autoplay: true,\n  muted: false,\n  parent: []\n};\n\nclass TwitchEmbed extends Component {\n  componentDidMount() {\n    this._validateProps();\n\n    if (window.Twitch && window.Twitch.Embed) {\n      return this._createEmbed();\n    }\n\n    if (!scriptElement) {\n      loadScript();\n    }\n\n    scriptElement.addEventListener('load', () => {\n      this._createEmbed();\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this._validateProps();\n\n    if (prevProps.withChat) {\n      this.embed = null;\n      this.player = null;\n      document.getElementById(prevProps.id).innerHTML = '';\n      return this._createEmbed();\n    }\n\n    const updatedPropsExceptChannel = Object.keys(prevProps).reduce((updated, prop) => {\n      if (prop === 'channel') {\n        return updated;\n      }\n\n      if (prevProps[prop] !== this.props[prop]) {\n        updated.push(prop);\n      }\n\n      return updated;\n    }, []);\n\n    if (updatedPropsExceptChannel.length > 0) {\n      this.embed = null;\n      this.player = null;\n      document.getElementById(prevProps.id).innerHTML = '';\n      return this._createEmbed();\n    }\n\n    if (prevProps.channel !== this.props.channel) {\n      this.player.setChannel(this.props.channel);\n    }\n  }\n\n  _createEmbed() {\n    this.embed = new window.Twitch.Embed(this.props.id, {\n      allowfullscreen: this.props.allowFullscreen,\n      channel: this.props.channel,\n      'font-size': this.props.fontSize,\n      height: '100%',\n      layout: this.props.withChat ? 'video-with-chat' : 'video',\n      theme: this.props.theme,\n      width: '100%',\n      parent: this.props.parent\n    });\n\n    this._addEventListeners();\n  }\n\n  _addEventListeners() {\n    this.embed.addEventListener(window.Twitch.Embed.AUTHENTICATE, this.props.onAuthenticate);\n    this.embed.addEventListener(window.Twitch.Embed.VIDEO_PLAY, this.props.onVideoPlay);\n    this.embed.addEventListener(window.Twitch.Embed.VIDEO_PAUSE, this.props.onVideoPause);\n    this.embed.addEventListener(window.Twitch.Embed.VIDEO_READY, () => {\n      const { autoplay, muted } = this.props;\n      this.player = this.embed.getPlayer();\n\n      if (muted) {\n        this.player.setVolume(0);\n      }\n\n      if (!autoplay) {\n        this.player.pause();\n      }\n\n      this.props.onVideoReady(this.player);\n    });\n  }\n\n  _validateProps() {\n    if (!this.props.channel) {\n      throw new Error('A channel prop must be supplied to TwitchEmbed!');\n    }\n  }\n\n  render() {\n    const unknownProps = getUnknownProps(this.props, propTypes);\n\n    return (\n      <div style={{ width: this.props.width, height: this.props.height }} id={this.props.id} {...unknownProps} />\n    );\n  }\n}\n\nTwitchEmbed.propTypes = propTypes;\nTwitchEmbed.defaultProps = defaultProps;\n\nexport default TwitchEmbed;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CHAT_DEFAULT_HEIGHT, CHAT_DEFAULT_WIDTH, TWITCH_CHAT_URL } from '../constants';\nimport { getUnknownProps, parseParentQuery } from '../utils';\n\nconst propTypes = {\n  channel: PropTypes.string.isRequired,\n  id: PropTypes.string,\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  theme: PropTypes.oneOf(['light', 'dark']),\n  parent: PropTypes.arrayOf(PropTypes.string),\n  migration: PropTypes.bool\n};\n\nconst defaultProps = {\n  id: 'twitch-chat-embed',\n  height: CHAT_DEFAULT_HEIGHT,\n  width: CHAT_DEFAULT_WIDTH,\n  theme: 'light',\n  migration: true,\n  parent: []\n};\n\nclass TwitchChat extends Component {\n  componentDidMount() {\n    this._validateProps();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this._validateProps();\n  }\n\n  _validateProps() {\n    if (!this.props.channel) {\n      throw new Error('A channel prop must be supplied to TwitchChat!');\n    }\n  }\n\n  _createEmbedURL() {\n    const { channel, theme, parent, migration } = this.props;\n\n    const themeQuery = theme === 'dark' ? '?darkpopout' : '';\n    const migrationFirstChar = theme !== 'dark' ? '?' : '&';\n    return `${TWITCH_CHAT_URL}/${channel}/chat${themeQuery}${migrationFirstChar}migration=${migration.toString()}${parseParentQuery(parent)}`;\n  }\n\n  render() {\n    const { height, id, width } = this.props;\n    const unknownProps = getUnknownProps(this.props, propTypes);\n\n    return (\n      <iframe\n        title={`Twitch Chat - ${id}`}\n        id={id}\n        src={this._createEmbedURL()}\n        height={height}\n        width={width}\n        frameBorder={0}\n        {...unknownProps}\n      />\n    );\n  }\n}\n\nTwitchChat.propTypes = propTypes;\nTwitchChat.defaultProps = defaultProps;\n\nexport default TwitchChat;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { MEDIA_DEFAULT_HEIGHT, MEDIA_DEFAULT_WIDTH, TWITCH_CLIP_URL } from '../constants';\nimport { getUnknownProps, parseParentQuery } from '../utils';\n\nconst propTypes = {\n  clip: PropTypes.string.isRequired,\n  id: PropTypes.string,\n  autoplay: PropTypes.bool,\n  muted: PropTypes.bool,\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  allowFullscreen: PropTypes.bool,\n  parent: PropTypes.arrayOf(PropTypes.string),\n  migration: PropTypes.bool\n};\n\nconst defaultProps = {\n  id: 'twitch-clip-embed',\n  autoplay: true,\n  muted: false,\n  height: MEDIA_DEFAULT_HEIGHT,\n  width: MEDIA_DEFAULT_WIDTH,\n  allowFullscreen: true,\n  migration: true,\n  parent: []\n};\n\nclass TwitchClip extends Component {\n  componentDidMount() {\n    this._validateProps();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this._validateProps();\n  }\n\n  _validateProps() {\n    if (!this.props.clip) {\n      throw new Error('A clip prop must be supplied to TwitchClip!');\n    }\n  }\n\n  _createEmbedURL() {\n    const { clip, autoplay, muted, parent, migration } = this.props;\n\n    return `${TWITCH_CLIP_URL}?clip=${clip}&autoplay=${autoplay}&muted=${muted}&migration=${migration.toString()}${parseParentQuery(parent)}`;\n  }\n\n  render() {\n    const { id, height, width, allowFullscreen } = this.props;\n    const unknownProps = getUnknownProps(this.props, propTypes);\n\n    return (\n      <iframe\n        title={`Twitch Clip Embed - ${id}`}\n        src={this._createEmbedURL()}\n        id={id}\n        height={height}\n        width={width}\n        allowFullScreen={allowFullscreen}\n        frameBorder={0}\n        {...unknownProps}\n      />\n    );\n  }\n}\n\nTwitchClip.propTypes = propTypes;\nTwitchClip.defaultProps = defaultProps;\n\nexport default TwitchClip;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TWITCH_PLAYER_URL, MEDIA_DEFAULT_WIDTH, MEDIA_DEFAULT_HEIGHT } from '../constants';\nimport { getUnknownProps } from '../utils';\n\nconst mediaProps = ['channel', 'collection', 'video'];\nlet scriptElement = null;\n\nconst loadScript = () => {\n  scriptElement = document.createElement('script');\n  scriptElement.setAttribute('type', 'text/javascript');\n  scriptElement.setAttribute('src', TWITCH_PLAYER_URL);\n  document.body.appendChild(scriptElement);\n};\n\nconst propTypes = {\n  id: PropTypes.string,\n  channel: PropTypes.string,\n  collection: PropTypes.string,\n  video: PropTypes.string,\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  playsInline: PropTypes.bool,\n  autoplay: PropTypes.bool,\n  muted: PropTypes.bool,\n  allowFullscreen: PropTypes.bool,\n  time: PropTypes.string,\n  hideControls: PropTypes.bool,\n  onEnded: PropTypes.func,\n  onPause: PropTypes.func,\n  onPlay: PropTypes.func,\n  onPlaybackBlocked: PropTypes.func,\n  onPlaying: PropTypes.func,\n  onOffline: PropTypes.func,\n  onOnline: PropTypes.func,\n  onReady: PropTypes.func,\n  parent: PropTypes.arrayOf(PropTypes.string)\n};\n\nconst defaultProps = {\n  id: 'twitch-player-embed',\n  channel: null,\n  collection: null,\n  video: null,\n  height: MEDIA_DEFAULT_HEIGHT,\n  width: MEDIA_DEFAULT_WIDTH,\n  playsInline: true,\n  autoplay: true,\n  muted: false,\n  allowFullscreen: true,\n  time: '0h0m0s',\n  hideControls: false,\n  onEnded: () => null,\n  onPause: () => null,\n  onPlay: () => null,\n  onPlaybackBlocked: () => null,\n  onPlaying: () => null,\n  onOffline: () => null,\n  onOnline: () => null,\n  onReady: () => null,\n  parent: []\n};\n\nclass TwitchPlayer extends Component {\n  componentDidMount() {\n    this._validateProps();\n\n    if (window.Twitch && window.Twitch.Player) {\n      return this._createPlayer();\n    }\n\n    if (!scriptElement) {\n      loadScript();\n    }\n\n    scriptElement.addEventListener('load', () => {\n      this._createPlayer();\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this._validateProps();\n\n    const updatedPropsExceptMedia = Object.keys(prevProps).reduce((updated, prop) => {\n      if (mediaProps.includes(prop)) {\n        return updated;\n      }\n\n      if (prevProps[prop] !== this.props[prop]) {\n        updated.push(prop);\n      }\n      return updated;\n    }, []);\n\n    if (updatedPropsExceptMedia.length > 0) {\n      this.player = null;\n      document.getElementById(prevProps.id).innerHTML = '';\n      return this._createPlayer();\n    }\n\n    if (prevProps.channel !== this.props.channel && this.props.channel) {\n      return this.player.setChannel(this.props.channel);\n    }\n\n    if (prevProps.collection !== this.props.collection && this.props.collection) {\n      this.player.setCollection(this.props.collection);\n    }\n\n    if (prevProps.video !== this.props.video && this.props.video) {\n      this.player.setVideo(`v${this.props.video}`);\n    }\n  }\n\n  _createPlayer() {\n    const options = {\n      height: '100%',\n      width: '100%',\n      playsinline: this.props.playsInline,\n      allowfullscreen: this.props.allowFullscreen,\n      autoplay: this.props.autoplay,\n      muted: this.props.muted,\n      time: this.props.time,\n      controls: !this.props.hideControls,\n      parent: this.props.parent\n    };\n\n    if (this.props.channel) {\n      options.channel = this.props.channel;\n    }\n\n    if (this.props.video) {\n      options.video = this.props.video;\n    }\n\n    if (this.props.collection) {\n      options.collection = this.props.collection;\n    }\n\n    this.player = new window.Twitch.Player(this.props.id, options);\n    this._addEventListeners();\n  }\n\n  _addEventListeners() {\n    this.player.addEventListener(window.Twitch.Player.ENDED, this.props.onEnded);\n    this.player.addEventListener(window.Twitch.Player.PAUSE, this.props.onPause);\n    this.player.addEventListener(window.Twitch.Player.PLAY, this.props.onPlay);\n    this.player.addEventListener(window.Twitch.Player.PLAYBACK_BLOCKED, this.props.onPlaybackBlocked);\n    this.player.addEventListener(window.Twitch.Player.PLAYING, this.props.onPlaying);\n    this.player.addEventListener(window.Twitch.Player.OFFLINE, this.props.onOffline);\n    this.player.addEventListener(window.Twitch.Player.ONLINE, this.props.onOnline);\n    this.player.addEventListener(window.Twitch.Player.READY, () => {\n      this.props.onReady(this.player);\n    });\n  }\n\n  _validateProps() {\n    const { channel, collection, video } = this.props;\n\n    if (!channel && !collection && !video) {\n      throw new Error('A channel, collection or video prop must be supplied to TwitchPlayer!');\n    }\n  }\n\n  render() {\n    const unknownProps = getUnknownProps(this.props, propTypes);\n\n    return (\n      <div id={this.props.id} style={{ width: this.props.width, height: this.props.height }} {...unknownProps} />\n    );\n  }\n}\n\nTwitchPlayer.propTypes = propTypes;\nTwitchPlayer.defaultProps = defaultProps;\n\nexport default TwitchPlayer;\n"]},"metadata":{},"sourceType":"module"}