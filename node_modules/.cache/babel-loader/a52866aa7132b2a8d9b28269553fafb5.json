{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.concat = void 0;\n\nconst xstream_1 = require(\"xstream\");\n/**\n * An implementation of concat that buffers all source stream events\n *\n * Marble diagram:\n *\n * ```text\n * --1--2---3---4-|\n * -a--b-c--d-|\n * --------X---------Y---------Z-\n *           concat\n * --1--2---3---4-abcdXY-------Z-\n * ```\n *\n * This is inspired by RxJS's concat as documented at http://rxmarbles.com/#concat and behaves\n * differently than xstream's concat as discussed in https://github.com/staltz/xstream/issues/170.\n *\n */\n\n\nfunction concat() {\n  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n    streams[_key] = arguments[_key];\n  }\n\n  const subscriptions = new Array();\n  const queues = new Array(); // one queue per stream\n\n  const completedStreams = new Set();\n  let activeStreamIndex = 0;\n\n  function reset() {\n    while (subscriptions.length > 0) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const subscription = subscriptions.shift();\n      subscription.unsubscribe();\n    }\n\n    queues.length = 0;\n    completedStreams.clear();\n    activeStreamIndex = 0;\n  }\n\n  const producer = {\n    start: listener => {\n      streams.forEach(_ => queues.push([]));\n\n      function emitAllQueuesEvents(streamIndex) {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n          const element = queues[streamIndex].shift();\n\n          if (element === undefined) {\n            return;\n          }\n\n          listener.next(element);\n        }\n      }\n\n      function isDone() {\n        return activeStreamIndex >= streams.length;\n      }\n\n      if (isDone()) {\n        listener.complete();\n        return;\n      }\n\n      streams.forEach((stream, index) => {\n        subscriptions.push(stream.subscribe({\n          next: value => {\n            if (index === activeStreamIndex) {\n              listener.next(value);\n            } else {\n              queues[index].push(value);\n            }\n          },\n          complete: () => {\n            completedStreams.add(index);\n\n            while (completedStreams.has(activeStreamIndex)) {\n              // this stream completed: emit all and move on\n              emitAllQueuesEvents(activeStreamIndex);\n              activeStreamIndex++;\n            }\n\n            if (isDone()) {\n              listener.complete();\n            } else {\n              // now active stream can have some events queued but did not yet complete\n              emitAllQueuesEvents(activeStreamIndex);\n            }\n          },\n          error: error => {\n            listener.error(error);\n            reset();\n          }\n        }));\n      });\n    },\n    stop: () => {\n      reset();\n    }\n  };\n  return xstream_1.Stream.create(producer);\n}\n\nexports.concat = concat;","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;;;;;;;;;;;;;;;;;;;AAiBA,SAAgBA,MAAhB,GAAsD;EAAA,kCAAzBC,OAAyB;IAAzBA,OAAyB;EAAA;;EACpD,MAAMC,aAAa,GAAG,IAAIC,KAAJ,EAAtB;EACA,MAAMC,MAAM,GAAG,IAAID,KAAJ,EAAf,CAFoD,CAEnB;;EACjC,MAAME,gBAAgB,GAAG,IAAIC,GAAJ,EAAzB;EACA,IAAIC,iBAAiB,GAAG,CAAxB;;EAEA,SAASC,KAAT,GAAc;IACZ,OAAON,aAAa,CAACO,MAAd,GAAuB,CAA9B,EAAiC;MAC/B;MACA,MAAMC,YAAY,GAAGR,aAAa,CAACS,KAAd,EAArB;MACAD,YAAY,CAACE,WAAb;IACD;;IAEDR,MAAM,CAACK,MAAP,GAAgB,CAAhB;IACAJ,gBAAgB,CAACQ,KAAjB;IACAN,iBAAiB,GAAG,CAApB;EACD;;EAED,MAAMO,QAAQ,GAAgB;IAC5BC,KAAK,EAAGC,QAAD,IAAa;MAClBf,OAAO,CAACgB,OAAR,CAAiBC,CAAD,IAAOd,MAAM,CAACe,IAAP,CAAY,EAAZ,CAAvB;;MAEA,SAASC,mBAAT,CAA6BC,WAA7B,EAAgD;QAC9C;QACA,OAAO,IAAP,EAAa;UACX,MAAMC,OAAO,GAAGlB,MAAM,CAACiB,WAAD,CAAN,CAAoBV,KAApB,EAAhB;;UACA,IAAIW,OAAO,KAAKC,SAAhB,EAA2B;YACzB;UACD;;UACDP,QAAQ,CAACQ,IAAT,CAAcF,OAAd;QACD;MACF;;MAED,SAASG,MAAT,GAAe;QACb,OAAOlB,iBAAiB,IAAIN,OAAO,CAACQ,MAApC;MACD;;MAED,IAAIgB,MAAM,EAAV,EAAc;QACZT,QAAQ,CAACU,QAAT;QACA;MACD;;MAEDzB,OAAO,CAACgB,OAAR,CAAgB,CAACU,MAAD,EAASC,KAAT,KAAkB;QAChC1B,aAAa,CAACiB,IAAd,CACEQ,MAAM,CAACE,SAAP,CAAiB;UACfL,IAAI,EAAGM,KAAD,IAAU;YACd,IAAIF,KAAK,KAAKrB,iBAAd,EAAiC;cAC/BS,QAAQ,CAACQ,IAAT,CAAcM,KAAd;YACD,CAFD,MAEO;cACL1B,MAAM,CAACwB,KAAD,CAAN,CAAcT,IAAd,CAAmBW,KAAnB;YACD;UACF,CAPc;UAQfJ,QAAQ,EAAE,MAAK;YACbrB,gBAAgB,CAAC0B,GAAjB,CAAqBH,KAArB;;YAEA,OAAOvB,gBAAgB,CAAC2B,GAAjB,CAAqBzB,iBAArB,CAAP,EAAgD;cAC9C;cACAa,mBAAmB,CAACb,iBAAD,CAAnB;cACAA,iBAAiB;YAClB;;YAED,IAAIkB,MAAM,EAAV,EAAc;cACZT,QAAQ,CAACU,QAAT;YACD,CAFD,MAEO;cACL;cACAN,mBAAmB,CAACb,iBAAD,CAAnB;YACD;UACF,CAvBc;UAwBf0B,KAAK,EAAGA,KAAD,IAAU;YACfjB,QAAQ,CAACiB,KAAT,CAAeA,KAAf;YACAzB,KAAK;UACN;QA3Bc,CAAjB,CADF;MA+BD,CAhCD;IAiCD,CAzD2B;IA0D5B0B,IAAI,EAAE,MAAK;MACT1B,KAAK;IACN;EA5D2B,CAA9B;EA+DA,OAAO2B,iBAAOC,MAAP,CAActB,QAAd,CAAP;AACD;;AAlFDuB","names":["concat","streams","subscriptions","Array","queues","completedStreams","Set","activeStreamIndex","reset","length","subscription","shift","unsubscribe","clear","producer","start","listener","forEach","_","push","emitAllQueuesEvents","streamIndex","element","undefined","next","isDone","complete","stream","index","subscribe","value","add","has","error","stop","xstream_1","create","exports"],"sourceRoot":"","sources":["../src/concat.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}