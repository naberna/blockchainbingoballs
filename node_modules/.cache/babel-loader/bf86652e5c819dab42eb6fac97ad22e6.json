{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupStakingExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst query_1 = require(\"cosmjs-types/cosmos/staking/v1beta1/query\");\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst queryclient_1 = require(\"../../queryclient\");\n\nfunction setupStakingExtension(base) {\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    staking: {\n      delegation: async (delegatorAddress, validatorAddress) => {\n        const response = await queryService.Delegation({\n          delegatorAddr: delegatorAddress,\n          validatorAddr: validatorAddress\n        });\n        return response;\n      },\n      delegatorDelegations: async (delegatorAddress, paginationKey) => {\n        const response = await queryService.DelegatorDelegations({\n          delegatorAddr: delegatorAddress,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      delegatorUnbondingDelegations: async (delegatorAddress, paginationKey) => {\n        const response = await queryService.DelegatorUnbondingDelegations({\n          delegatorAddr: delegatorAddress,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      delegatorValidator: async (delegatorAddress, validatorAddress) => {\n        const response = await queryService.DelegatorValidator({\n          delegatorAddr: delegatorAddress,\n          validatorAddr: validatorAddress\n        });\n        return response;\n      },\n      delegatorValidators: async (delegatorAddress, paginationKey) => {\n        const response = await queryService.DelegatorValidators({\n          delegatorAddr: delegatorAddress,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      historicalInfo: async height => {\n        const response = await queryService.HistoricalInfo({\n          height: long_1.default.fromNumber(height, true)\n        });\n        return response;\n      },\n      params: async () => {\n        const response = await queryService.Params({});\n        return response;\n      },\n      pool: async () => {\n        const response = await queryService.Pool({});\n        return response;\n      },\n      redelegations: async (delegatorAddress, sourceValidatorAddress, destinationValidatorAddress, paginationKey) => {\n        const response = await queryService.Redelegations({\n          delegatorAddr: delegatorAddress,\n          srcValidatorAddr: sourceValidatorAddress,\n          dstValidatorAddr: destinationValidatorAddress,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      unbondingDelegation: async (delegatorAddress, validatorAddress) => {\n        const response = await queryService.UnbondingDelegation({\n          delegatorAddr: delegatorAddress,\n          validatorAddr: validatorAddress\n        });\n        return response;\n      },\n      validator: async validatorAddress => {\n        const response = await queryService.Validator({\n          validatorAddr: validatorAddress\n        });\n        return response;\n      },\n      validatorDelegations: async (validatorAddress, paginationKey) => {\n        const response = await queryService.ValidatorDelegations({\n          validatorAddr: validatorAddress,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      validators: async (status, paginationKey) => {\n        const response = await queryService.Validators({\n          status: status,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      validatorUnbondingDelegations: async (validatorAddress, paginationKey) => {\n        const response = await queryService.ValidatorUnbondingDelegations({\n          validatorAddr: validatorAddress,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      }\n    }\n  };\n}\n\nexports.setupStakingExtension = setupStakingExtension;","map":{"version":3,"mappings":"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","names":["setupStakingExtension","base","rpc","queryService","query_1","staking","delegation","delegatorAddress","validatorAddress","response","Delegation","delegatorAddr","validatorAddr","delegatorDelegations","paginationKey","DelegatorDelegations","pagination","delegatorUnbondingDelegations","DelegatorUnbondingDelegations","delegatorValidator","DelegatorValidator","delegatorValidators","DelegatorValidators","historicalInfo","height","HistoricalInfo","long_1","fromNumber","params","Params","pool","Pool","redelegations","sourceValidatorAddress","destinationValidatorAddress","Redelegations","srcValidatorAddr","dstValidatorAddr","unbondingDelegation","UnbondingDelegation","validator","Validator","validatorDelegations","ValidatorDelegations","validators","status","Validators","validatorUnbondingDelegations","ValidatorUnbondingDelegations","exports"],"sourceRoot":"","sources":["../../../src/modules/staking/queries.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}