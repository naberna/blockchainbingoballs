{"ast":null,"code":"import Web3 from \"web3\";\nimport { DeFiWeb3Connector } from \"deficonnect\";\nimport defi from '../../defi.png';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Web3Modal from \"web3modal\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nlet web3Modal;\n\nif (typeof window !== \"undefined\") {\n  web3Modal = new Web3Modal({\n    network: \"cronos\",\n    // optional\n    cacheProvider: true,\n    providerOptions: {\n      'custom-defi': {\n        display: {\n          logo: defi,\n          name: 'Defi Wallet',\n          description: 'Connect to your Defi Wallet'\n        },\n        package: DeFiWeb3Connector,\n        options: {\n          supportedChainIds: [25],\n          rpc: {\n            25: \"https://evm.cronos.org/\"\n          },\n          pollingInterval: 15000\n        },\n        connector: async (ProviderPackage, options) => {\n          const connector = new ProviderPackage(options);\n          await connector.activate();\n          let provider = await connector.getProvider();\n          return provider;\n        }\n      },\n      walletconnect: {\n        package: WalletConnectProvider,\n        options: {\n          appName: 'cronos',\n          supportedChainIds: [25],\n          rpc: {\n            25: \"https://evm.cronos.org/\"\n          }\n        }\n      }\n    },\n    // required\n    theme: \"dark\"\n  });\n} // log\n\n\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectWalletRequest = () => {\n  return {\n    type: \"WALLET_CONNECTION_REQUEST\"\n  };\n};\n\nconst connectWalletSuccess = payload => {\n  return {\n    type: \"WALLET_CONNECTION_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst updateWalletAccountRequest = payload => {\n  return {\n    type: \"WALLET_UPDATE_ACCOUNT\",\n    payload: payload\n  };\n};\n\nconst disconnectWalletSuccess = payload => {\n  return {\n    type: \"WALLET_DISCONNECT_SUCCESS\",\n    payload: payload\n  };\n};\n\nexport const walletConnect = () => {\n  return async dispatch => {\n    dispatch(connectWalletRequest()); // const { ethereum } = window;\n    // const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n\n    var admin = '';\n    const provider = await web3Modal.connect();\n    const connectedProvider = new Web3Provider(provider);\n    const chainId = await connectedProvider.getNetwork().then(network => network.chainId);\n    const connectedAddress = await connectedProvider.getSigner().getAddress();\n    const web3 = new Web3(provider);\n    admin = connectedAddress;\n    console.log(\"connectedAddress = \", connectedAddress);\n    console.log(\"web3 = \", web3);\n    dispatch(connectWalletSuccess({\n      account: connectedAddress,\n      web3: web3,\n      admin: admin\n    }));\n  };\n};\nexport const walletDisconnect = () => {\n  return async dispatch => {\n    await web3Modal.clearCachedProvider();\n    dispatch(disconnectWalletSuccess(\"\"));\n  };\n};\nexport const walletUpdateAccount = account => {\n  return async dispatch => {\n    dispatch(updateWalletAccountRequest({\n      account: account\n    }));\n    dispatch(fetchData(account));\n  };\n};","map":{"version":3,"names":["Web3","DeFiWeb3Connector","defi","WalletConnectProvider","Web3Modal","Web3Provider","web3Modal","window","network","cacheProvider","providerOptions","display","logo","name","description","package","options","supportedChainIds","rpc","pollingInterval","connector","ProviderPackage","activate","provider","getProvider","walletconnect","appName","theme","fetchData","connectWalletRequest","type","connectWalletSuccess","payload","updateWalletAccountRequest","disconnectWalletSuccess","walletConnect","dispatch","admin","connect","connectedProvider","chainId","getNetwork","then","connectedAddress","getSigner","getAddress","web3","console","log","account","walletDisconnect","clearCachedProvider","walletUpdateAccount"],"sources":["/Users/bernapolat/blockchainbingoballs/src/redux/wallet/walletActions.js"],"sourcesContent":["import Web3 from \"web3\";\nimport { DeFiWeb3Connector } from \"deficonnect\";\nimport defi from '../../defi.png';\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Web3Modal from \"web3modal\";\nimport { Web3Provider } from \"@ethersproject/providers\";\n\nlet web3Modal;\nif (typeof window !== \"undefined\") {\n  web3Modal = new Web3Modal({\n    network: \"cronos\", // optional\n    cacheProvider: true,\n    providerOptions: {\n      'custom-defi': {\n        display: {\n          logo: defi,\n          name: 'Defi Wallet',\n          description: 'Connect to your Defi Wallet'\n        },\n        package: DeFiWeb3Connector,\n        options: {\n          supportedChainIds: [25],\n          rpc: {\n            25: \"https://evm.cronos.org/\",\n          },\n          pollingInterval: 15000,\n        },\n        connector: async (ProviderPackage, options) => {\n          const connector = new ProviderPackage(options);\n          await connector.activate();\n          let provider = await connector.getProvider()\n          return provider;\n        }\n      },\n      walletconnect: {\n        package: WalletConnectProvider,\n\t\t  options: {\n\t\t\tappName: 'cronos',\n\t\t\tsupportedChainIds: [25],\n\t\t\trpc: {\n\t\t\t\t25: \"https://evm.cronos.org/\",\n\t\t\t},\n\t\t},\n      },\n    }, // required\n    theme: \"dark\",\n  });\n}\n\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectWalletRequest = () => {\n  return {\n    type: \"WALLET_CONNECTION_REQUEST\",\n  };\n};\n\nconst connectWalletSuccess = (payload) => {\n  return {\n    type: \"WALLET_CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst updateWalletAccountRequest = (payload) => {\n  return {\n    type: \"WALLET_UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nconst disconnectWalletSuccess = (payload) => {\n  return {\n    type: \"WALLET_DISCONNECT_SUCCESS\",\n    payload: payload\n  };\n};\n\nexport const walletConnect = () => {\n  return async (dispatch) => {\n    dispatch(connectWalletRequest());\n    // const { ethereum } = window;\n    // const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    var admin = '';\n    const provider = await web3Modal.connect();\n    const connectedProvider = new Web3Provider(provider);\n    const chainId = await connectedProvider.getNetwork().then(network => network.chainId);\n    const connectedAddress = await connectedProvider.getSigner().getAddress();\n    const web3 = new Web3(provider);\n    admin = connectedAddress;\n    console.log(\"connectedAddress = \", connectedAddress);\n    console.log(\"web3 = \", web3);\n    dispatch(\n        connectWalletSuccess({\n        account: connectedAddress,\n        web3: web3,\n        admin: admin,\n      })\n    );\n  };\n};\n\nexport const walletDisconnect = () => {\n  return async (dispatch) => {\n    await web3Modal.clearCachedProvider();\n    dispatch(disconnectWalletSuccess(\"\"));\n  };\n}\n\nexport const walletUpdateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateWalletAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}