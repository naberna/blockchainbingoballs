{"ast":null,"code":"const fighterConnectRequest = () => {\n  return {\n    type: \"FIGHTER_CONNECTION_REQUEST\"\n  };\n};\n\nconst fighterConnectSuccess = payload => {\n  return {\n    type: \"FIGHTER_CONNECTION_SUCCESS\",\n    payload: payload\n  };\n};\n\nexport const fighterConnect = wallet => {\n  return async dispatch => {\n    dispatch(fighterConnectRequest());\n    const abiResponse = await fetch(\"/config/fighterAbi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const abi = await abiResponse.json();\n    const configResponse = await fetch(\"/config/fighterConfig.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    var tokenId = '';\n    var tokenMetadataURI = '';\n    var tokenMetadata = '';\n    var tokenMetadataArr = [{\n      name: '',\n      description: '',\n      image: ''\n    }];\n    var balance = '';\n    var isWhiteList = false;\n    var totalSupply = \"\";\n    const CONFIG = await configResponse.json();\n    const FighterSmartContractObj = new wallet.web3.eth.Contract(abi, CONFIG.CONTRACT_ADDRESS);\n    await FighterSmartContractObj.methods.balanceOf(wallet.account).call().then(function (result) {\n      balance = result;\n    });\n    await FighterSmartContractObj.methods.isWhiteList(wallet.account).call().then(function (result) {\n      isWhiteList = result;\n    });\n    await FighterSmartContractObj.methods.totalSupply().call().then(function (result) {\n      totalSupply = result;\n    });\n\n    for (var i = 0; i < balance; i++) {\n      await FighterSmartContractObj.methods.tokenOfOwnerByIndex(wallet.account, i).call().then(function (result) {\n        tokenId = result;\n      });\n      await FighterSmartContractObj.methods.tokenURI(tokenId).call().then(function (result) {\n        tokenMetadataURI = result;\n      });\n\n      if (tokenMetadataURI.startsWith(\"ipfs://\")) {\n        tokenMetadataURI = `https://ipfs.io/ipfs/${tokenMetadataURI.split(\"ipfs://\")[1]}`;\n        tokenMetadata = await fetch(tokenMetadataURI).then(response => response.json());\n        tokenMetadataArr[i] = tokenMetadata;\n      }\n    }\n\n    dispatch(fighterConnectSuccess({\n      loading: false,\n      smartContract: FighterSmartContractObj,\n      tokenId: tokenId,\n      tokenMetadataURI: tokenMetadataURI,\n      balance: balance,\n      tokenMetadata: tokenMetadata,\n      tokenMetadataArr: tokenMetadataArr,\n      totalSupply: totalSupply,\n      isWhiteList: isWhiteList\n    }));\n  };\n};","map":{"version":3,"names":["fighterConnectRequest","type","fighterConnectSuccess","payload","fighterConnect","wallet","dispatch","abiResponse","fetch","headers","Accept","abi","json","configResponse","tokenId","tokenMetadataURI","tokenMetadata","tokenMetadataArr","name","description","image","balance","isWhiteList","totalSupply","CONFIG","FighterSmartContractObj","web3","eth","Contract","CONTRACT_ADDRESS","methods","balanceOf","account","call","then","result","i","tokenOfOwnerByIndex","tokenURI","startsWith","split","response","loading","smartContract"],"sources":["/Users/bernapolat/blockchainbingoballs/src/redux/blockchainFighters/blockchainActions.js"],"sourcesContent":["const fighterConnectRequest = () => {\n  return {\n    type: \"FIGHTER_CONNECTION_REQUEST\",\n  };\n};\n\nconst fighterConnectSuccess = (payload) => {\n  return {\n    type: \"FIGHTER_CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nexport const fighterConnect = (wallet) => {\n  return async (dispatch) => {\n    dispatch(fighterConnectRequest());\n    const abiResponse = await fetch(\"/config/fighterAbi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const abi = await abiResponse.json();\n    const configResponse = await fetch(\"/config/fighterConfig.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    var tokenId = '';\n    var tokenMetadataURI = '';\n    var tokenMetadata = '';\n    var tokenMetadataArr = [{\n      name: '',\n      description: '',\n      image: '',\n  }];\n    var balance = '';\n    var isWhiteList = false;\n    var totalSupply = \"\";\n    const CONFIG = await configResponse.json();\n    const FighterSmartContractObj = new wallet.web3.eth.Contract(abi, CONFIG.CONTRACT_ADDRESS);\n    await FighterSmartContractObj.methods\n      .balanceOf(wallet.account)\n      .call()\n      .then(function (result) {\n        balance = result;\n      });\n      await FighterSmartContractObj.methods\n      .isWhiteList(wallet.account)\n      .call()\n      .then(function (result) {\n        isWhiteList = result;\n      });\n    await FighterSmartContractObj.methods\n      .totalSupply()\n      .call()\n      .then(function (result) {\n        totalSupply = result;\n      });\n    for(var i = 0; i < balance; i++) {\n      await FighterSmartContractObj.methods\n      .tokenOfOwnerByIndex(wallet.account, i)\n      .call()\n      .then(function (result) {\n        tokenId = result;\n      });\n      await FighterSmartContractObj.methods\n      .tokenURI(tokenId)\n      .call()\n      .then(function (result) {\n        tokenMetadataURI = result;\n      });\n      if(tokenMetadataURI.startsWith(\"ipfs://\")){\n        tokenMetadataURI = `https://ipfs.io/ipfs/${tokenMetadataURI.split(\"ipfs://\")[1]}`\n\n        tokenMetadata = await fetch(tokenMetadataURI).then((response) => response.json())\n\n        tokenMetadataArr[i] = tokenMetadata;\n      }\n    }\n    dispatch(\n      fighterConnectSuccess({\n        loading: false,\n        smartContract: FighterSmartContractObj,\n        tokenId: tokenId,\n        tokenMetadataURI: tokenMetadataURI,\n        balance: balance,\n        tokenMetadata: tokenMetadata,\n        tokenMetadataArr: tokenMetadataArr,\n        totalSupply: totalSupply,\n        isWhiteList: isWhiteList,\n      })\n    );\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}