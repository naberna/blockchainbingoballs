{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AminoTypes = void 0;\n\nfunction isAminoConverter(converter) {\n  return typeof converter[1] !== \"string\";\n}\n/**\n * A map from Stargate message types as used in the messages's `Any` type\n * to Amino types.\n */\n\n\nclass AminoTypes {\n  constructor(types) {\n    this.register = types;\n  }\n\n  toAmino(_ref) {\n    let {\n      typeUrl,\n      value\n    } = _ref;\n    const converter = this.register[typeUrl];\n\n    if (converter === \"not_supported_by_chain\") {\n      throw new Error(`The message type '${typeUrl}' cannot be signed using the Amino JSON sign mode because this is not supported by chain.`);\n    }\n\n    if (!converter) {\n      throw new Error(`Type URL '${typeUrl}' does not exist in the Amino message type register. ` + \"If you need support for this message type, you can pass in additional entries to the AminoTypes constructor. \" + \"If you think this message type should be included by default, please open an issue at https://github.com/cosmos/cosmjs/issues.\");\n    }\n\n    return {\n      type: converter.aminoType,\n      value: converter.toAmino(value)\n    };\n  }\n\n  fromAmino(_ref2) {\n    let {\n      type,\n      value\n    } = _ref2;\n    const matches = Object.entries(this.register).filter(isAminoConverter).filter(_ref3 => {\n      let [_typeUrl, {\n        aminoType\n      }] = _ref3;\n      return aminoType === type;\n    });\n\n    switch (matches.length) {\n      case 0:\n        {\n          throw new Error(`Amino type identifier '${type}' does not exist in the Amino message type register. ` + \"If you need support for this message type, you can pass in additional entries to the AminoTypes constructor. \" + \"If you think this message type should be included by default, please open an issue at https://github.com/cosmos/cosmjs/issues.\");\n        }\n\n      case 1:\n        {\n          const [typeUrl, converter] = matches[0];\n          return {\n            typeUrl: typeUrl,\n            value: converter.fromAmino(value)\n          };\n        }\n\n      default:\n        throw new Error(`Multiple types are registered with Amino type identifier '${type}': '` + matches.map(_ref4 => {\n          let [key, _value] = _ref4;\n          return key;\n        }).sort().join(\"', '\") + \"'. Thus fromAmino cannot be performed.\");\n    }\n  }\n\n}\n\nexports.AminoTypes = AminoTypes;","map":{"version":3,"mappings":";;;;;;;AAaA,SAASA,gBAAT,CACEC,SADF,EACgE;EAE9D,OAAO,OAAOA,SAAS,CAAC,CAAD,CAAhB,KAAwB,QAA/B;AACD;AAED;;;;;;AAIA,MAAaC,UAAb,CAAuB;EAOrBC,YAAmBC,KAAnB,EAAyC;IACvC,KAAKC,QAAL,GAAgBD,KAAhB;EACD;;EAEME,OAAO,OAAiC;IAAA,IAAhC;MAAEC,OAAF;MAAWC;IAAX,CAAgC;IAC7C,MAAMP,SAAS,GAAG,KAAKI,QAAL,CAAcE,OAAd,CAAlB;;IACA,IAAIN,SAAS,KAAK,wBAAlB,EAA4C;MAC1C,MAAM,IAAIQ,KAAJ,CACJ,qBAAqBF,OAAO,2FADxB,CAAN;IAGD;;IACD,IAAI,CAACN,SAAL,EAAgB;MACd,MAAM,IAAIQ,KAAJ,CACJ,aAAaF,OAAO,uDAApB,GACE,+GADF,GAEE,gIAHE,CAAN;IAKD;;IACD,OAAO;MACLG,IAAI,EAAET,SAAS,CAACU,SADX;MAELH,KAAK,EAAEP,SAAS,CAACK,OAAV,CAAkBE,KAAlB;IAFF,CAAP;EAID;;EAEMI,SAAS,QAA0B;IAAA,IAAzB;MAAEF,IAAF;MAAQF;IAAR,CAAyB;IACxC,MAAMK,OAAO,GAAGC,MAAM,CAACC,OAAP,CAAe,KAAKV,QAApB,EACbW,MADa,CACNhB,gBADM,EAEbgB,MAFa,CAEN;MAAA,IAAC,CAACC,QAAD,EAAW;QAAEN;MAAF,CAAX,CAAD;MAAA,OAA+BA,SAAS,KAAKD,IAA7C;IAAA,CAFM,CAAhB;;IAIA,QAAQG,OAAO,CAACK,MAAhB;MACE,KAAK,CAAL;QAAQ;UACN,MAAM,IAAIT,KAAJ,CACJ,0BAA0BC,IAAI,uDAA9B,GACE,+GADF,GAEE,gIAHE,CAAN;QAKD;;MACD,KAAK,CAAL;QAAQ;UACN,MAAM,CAACH,OAAD,EAAUN,SAAV,IAAuBY,OAAO,CAAC,CAAD,CAApC;UACA,OAAO;YACLN,OAAO,EAAEA,OADJ;YAELC,KAAK,EAAEP,SAAS,CAACW,SAAV,CAAoBJ,KAApB;UAFF,CAAP;QAID;;MACD;QACE,MAAM,IAAIC,KAAJ,CACJ,6DAA6DC,IAAI,MAAjE,GACEG,OAAO,CACJM,GADH,CACO;UAAA,IAAC,CAACC,GAAD,EAAMC,MAAN,CAAD;UAAA,OAAmBD,GAAnB;QAAA,CADP,EAEGE,IAFH,GAGGC,IAHH,CAGQ,MAHR,CADF,GAKE,wCANE,CAAN;IAhBJ;EAyBD;;AA7DoB;;AAAvBC","names":["isAminoConverter","converter","AminoTypes","constructor","types","register","toAmino","typeUrl","value","Error","type","aminoType","fromAmino","matches","Object","entries","filter","_typeUrl","length","map","key","_value","sort","join","exports"],"sourceRoot":"","sources":["../src/aminotypes.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}