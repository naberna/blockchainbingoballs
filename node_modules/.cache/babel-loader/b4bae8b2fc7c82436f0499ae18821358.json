{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupGovExtension = void 0;\n\nconst query_1 = require(\"cosmjs-types/cosmos/gov/v1beta1/query\");\n\nconst queryclient_1 = require(\"../../queryclient\");\n\nfunction setupGovExtension(base) {\n  const rpc = (0, queryclient_1.createProtobufRpcClient)(base); // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    gov: {\n      params: async parametersType => {\n        const response = await queryService.Params({\n          paramsType: parametersType\n        });\n        return response;\n      },\n      proposals: async (proposalStatus, depositorAddress, voterAddress, paginationKey) => {\n        const response = await queryService.Proposals({\n          proposalStatus,\n          depositor: depositorAddress,\n          voter: voterAddress,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      proposal: async proposalId => {\n        const response = await queryService.Proposal({\n          proposalId: (0, queryclient_1.longify)(proposalId)\n        });\n        return response;\n      },\n      deposits: async (proposalId, paginationKey) => {\n        const response = await queryService.Deposits({\n          proposalId: (0, queryclient_1.longify)(proposalId),\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      deposit: async (proposalId, depositorAddress) => {\n        const response = await queryService.Deposit({\n          proposalId: (0, queryclient_1.longify)(proposalId),\n          depositor: depositorAddress\n        });\n        return response;\n      },\n      tally: async proposalId => {\n        const response = await queryService.TallyResult({\n          proposalId: (0, queryclient_1.longify)(proposalId)\n        });\n        return response;\n      },\n      votes: async (proposalId, paginationKey) => {\n        const response = await queryService.Votes({\n          proposalId: (0, queryclient_1.longify)(proposalId),\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        });\n        return response;\n      },\n      vote: async (proposalId, voterAddress) => {\n        const response = await queryService.Vote({\n          proposalId: (0, queryclient_1.longify)(proposalId),\n          voter: voterAddress\n        });\n        return response;\n      }\n    }\n  };\n}\n\nexports.setupGovExtension = setupGovExtension;","map":{"version":3,"mappings":";;;;;;;AAEA;;AAaA;;AA2BA,SAAgBA,iBAAhB,CAAkCC,IAAlC,EAAmD;EACjD,MAAMC,GAAG,GAAG,2CAAwBD,IAAxB,CAAZ,CADiD,CAGjD;EACA;;EACA,MAAME,YAAY,GAAG,IAAIC,uBAAJ,CAAoBF,GAApB,CAArB;EAEA,OAAO;IACLG,GAAG,EAAE;MACHC,MAAM,EAAE,MAAOC,cAAP,IAAwC;QAC9C,MAAMC,QAAQ,GAAG,MAAML,YAAY,CAACM,MAAb,CAAoB;UAAEC,UAAU,EAAEH;QAAd,CAApB,CAAvB;QACA,OAAOC,QAAP;MACD,CAJE;MAKHG,SAAS,EAAE,OACTC,cADS,EAETC,gBAFS,EAGTC,YAHS,EAITC,aAJS,KAKP;QACF,MAAMP,QAAQ,GAAG,MAAML,YAAY,CAACa,SAAb,CAAuB;UAC5CJ,cAD4C;UAE5CK,SAAS,EAAEJ,gBAFiC;UAG5CK,KAAK,EAAEJ,YAHqC;UAI5CK,UAAU,EAAE,oCAAiBJ,aAAjB;QAJgC,CAAvB,CAAvB;QAMA,OAAOP,QAAP;MACD,CAlBE;MAmBHY,QAAQ,EAAE,MAAOC,UAAP,IAAoC;QAC5C,MAAMb,QAAQ,GAAG,MAAML,YAAY,CAACmB,QAAb,CAAsB;UAAED,UAAU,EAAE,2BAAQA,UAAR;QAAd,CAAtB,CAAvB;QACA,OAAOb,QAAP;MACD,CAtBE;MAuBHe,QAAQ,EAAE,OAAOF,UAAP,EAAkCN,aAAlC,KAAgE;QACxE,MAAMP,QAAQ,GAAG,MAAML,YAAY,CAACqB,QAAb,CAAsB;UAC3CH,UAAU,EAAE,2BAAQA,UAAR,CAD+B;UAE3CF,UAAU,EAAE,oCAAiBJ,aAAjB;QAF+B,CAAtB,CAAvB;QAIA,OAAOP,QAAP;MACD,CA7BE;MA8BHiB,OAAO,EAAE,OAAOJ,UAAP,EAAkCR,gBAAlC,KAA8D;QACrE,MAAML,QAAQ,GAAG,MAAML,YAAY,CAACuB,OAAb,CAAqB;UAC1CL,UAAU,EAAE,2BAAQA,UAAR,CAD8B;UAE1CJ,SAAS,EAAEJ;QAF+B,CAArB,CAAvB;QAIA,OAAOL,QAAP;MACD,CApCE;MAqCHmB,KAAK,EAAE,MAAON,UAAP,IAAoC;QACzC,MAAMb,QAAQ,GAAG,MAAML,YAAY,CAACyB,WAAb,CAAyB;UAC9CP,UAAU,EAAE,2BAAQA,UAAR;QADkC,CAAzB,CAAvB;QAGA,OAAOb,QAAP;MACD,CA1CE;MA2CHqB,KAAK,EAAE,OAAOR,UAAP,EAAkCN,aAAlC,KAAgE;QACrE,MAAMP,QAAQ,GAAG,MAAML,YAAY,CAAC2B,KAAb,CAAmB;UACxCT,UAAU,EAAE,2BAAQA,UAAR,CAD4B;UAExCF,UAAU,EAAE,oCAAiBJ,aAAjB;QAF4B,CAAnB,CAAvB;QAIA,OAAOP,QAAP;MACD,CAjDE;MAkDHuB,IAAI,EAAE,OAAOV,UAAP,EAAkCP,YAAlC,KAA0D;QAC9D,MAAMN,QAAQ,GAAG,MAAML,YAAY,CAAC6B,IAAb,CAAkB;UACvCX,UAAU,EAAE,2BAAQA,UAAR,CAD2B;UAEvCH,KAAK,EAAEJ;QAFgC,CAAlB,CAAvB;QAIA,OAAON,QAAP;MACD;IAxDE;EADA,CAAP;AA4DD;;AAnEDyB","names":["setupGovExtension","base","rpc","queryService","query_1","gov","params","parametersType","response","Params","paramsType","proposals","proposalStatus","depositorAddress","voterAddress","paginationKey","Proposals","depositor","voter","pagination","proposal","proposalId","Proposal","deposits","Deposits","deposit","Deposit","tally","TallyResult","votes","Votes","vote","Vote","exports"],"sourceRoot":"","sources":["../../../src/modules/gov/queries.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}