{"ast":null,"code":"const connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\"\n  };\n};\n\nconst connectSuccess = payload => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload\n  };\n};\n\nexport const connect = wallet => {\n  console.log(\"wallet from connect\" + wallet.account);\n  console.log(\"web3 from connect\" + wallet.web);\n  return async dispatch => {\n    dispatch(connectRequest());\n    const abiResponse = await fetch(\"/config/abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const abi = await abiResponse.json();\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    var tokenId = \"\";\n    var tokenMetadataURI = \"\";\n    var tokenMetadata = \"\";\n    var tokenMetadataArr = [{\n      name: \"\",\n      description: \"\",\n      image: \"\"\n    }];\n    var balance = \"\";\n    var isWhiteList = false;\n    var totalSupply = \"\";\n    const CONFIG = await configResponse.json();\n    const SmartContractObj = new wallet.web3.eth.Contract(abi, CONFIG.CONTRACT_ADDRESS);\n    await SmartContractObj.methods.balanceOf(wallet.account).call().then(function (result) {\n      balance = result;\n    });\n    await SmartContractObj.methods.isWhiteList(wallet.account).call().then(function (result) {\n      isWhiteList = result;\n    });\n    await SmartContractObj.methods.totalSupply().call().then(function (result) {\n      totalSupply = result;\n    });\n\n    for (var i = 0; i < balance; i++) {\n      await SmartContractObj.methods.tokenOfOwnerByIndex(wallet.account, i).call().then(function (result) {\n        tokenId = result;\n      });\n      await SmartContractObj.methods.tokenURI(tokenId).call().then(function (result) {\n        tokenMetadataURI = result;\n      });\n\n      if (tokenMetadataURI.startsWith(\"ipfs://\")) {\n        tokenMetadataURI = `https://ipfs.io/ipfs/${tokenMetadataURI.split(\"ipfs://\")[1]}`;\n        tokenMetadata = await fetch(tokenMetadataURI).then(response => response.json());\n        tokenMetadataArr[i] = tokenMetadata;\n      }\n    }\n\n    dispatch(connectSuccess({\n      smartContract: SmartContractObj,\n      tokenId: tokenId,\n      tokenMetadataURI: tokenMetadataURI,\n      balance: balance,\n      tokenMetadata: tokenMetadata,\n      tokenMetadataArr: tokenMetadataArr,\n      totalSupply: totalSupply,\n      isWhiteList: isWhiteList\n    }));\n  };\n};","map":{"version":3,"names":["connectRequest","type","connectSuccess","payload","connect","wallet","console","log","account","web","dispatch","abiResponse","fetch","headers","Accept","abi","json","configResponse","tokenId","tokenMetadataURI","tokenMetadata","tokenMetadataArr","name","description","image","balance","isWhiteList","totalSupply","CONFIG","SmartContractObj","web3","eth","Contract","CONTRACT_ADDRESS","methods","balanceOf","call","then","result","i","tokenOfOwnerByIndex","tokenURI","startsWith","split","response","smartContract"],"sources":["/Users/bernapolat/blockchainbingoballs/src/redux/blockchain/blockchainActions.js"],"sourcesContent":["const connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nexport const connect = (wallet) => {\n  console.log(\"wallet from connect\" + wallet.account);\n  console.log(\"web3 from connect\" + wallet.web);\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    const abiResponse = await fetch(\"/config/abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const abi = await abiResponse.json();\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    var tokenId = \"\";\n    var tokenMetadataURI = \"\";\n    var tokenMetadata = \"\";\n    var tokenMetadataArr = [\n      {\n        name: \"\",\n        description: \"\",\n        image: \"\",\n      },\n    ];\n    var balance = \"\";\n    var isWhiteList = false;\n    var totalSupply = \"\";\n    const CONFIG = await configResponse.json();\n    const SmartContractObj = new wallet.web3.eth.Contract(\n      abi,\n      CONFIG.CONTRACT_ADDRESS\n    );\n    await SmartContractObj.methods\n      .balanceOf(wallet.account)\n      .call()\n      .then(function (result) {\n        balance = result;\n      });\n    await SmartContractObj.methods\n      .isWhiteList(wallet.account)\n      .call()\n      .then(function (result) {\n        isWhiteList = result;\n      });\n    await SmartContractObj.methods\n      .totalSupply()\n      .call()\n      .then(function (result) {\n        totalSupply = result;\n      });\n    for (var i = 0; i < balance; i++) {\n      await SmartContractObj.methods\n        .tokenOfOwnerByIndex(wallet.account, i)\n        .call()\n        .then(function (result) {\n          tokenId = result;\n        });\n      await SmartContractObj.methods\n        .tokenURI(tokenId)\n        .call()\n        .then(function (result) {\n          tokenMetadataURI = result;\n        });\n\n      if (tokenMetadataURI.startsWith(\"ipfs://\")) {\n        tokenMetadataURI = `https://ipfs.io/ipfs/${\n          tokenMetadataURI.split(\"ipfs://\")[1]\n        }`;\n\n        tokenMetadata = await fetch(tokenMetadataURI).then((response) =>\n          response.json()\n        );\n\n        tokenMetadataArr[i] = tokenMetadata;\n      }\n    }\n    dispatch(\n      connectSuccess({\n        smartContract: SmartContractObj,\n        tokenId: tokenId,\n        tokenMetadataURI: tokenMetadataURI,\n        balance: balance,\n        tokenMetadata: tokenMetadata,\n        tokenMetadataArr: tokenMetadataArr,\n        totalSupply: totalSupply,\n        isWhiteList: isWhiteList,\n      })\n    );\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}