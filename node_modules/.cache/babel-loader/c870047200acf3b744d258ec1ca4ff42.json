{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashBlock = exports.hashTx = void 0;\n\nconst crypto_1 = require(\"@cosmjs/crypto\");\n\nconst encodings_1 = require(\"./encodings\"); // hash is sha256\n// https://github.com/tendermint/tendermint/blob/master/UPGRADING.md#v0260\n\n\nfunction hashTx(tx) {\n  return (0, crypto_1.sha256)(tx);\n}\n\nexports.hashTx = hashTx;\n\nfunction getSplitPoint(n) {\n  if (n < 1) throw new Error(\"Cannot split an empty tree\");\n  const largestPowerOf2 = 2 ** Math.floor(Math.log2(n));\n  return largestPowerOf2 < n ? largestPowerOf2 : largestPowerOf2 / 2;\n}\n\nfunction hashLeaf(leaf) {\n  const hash = new crypto_1.Sha256(Uint8Array.from([0]));\n  hash.update(leaf);\n  return hash.digest();\n}\n\nfunction hashInner(left, right) {\n  const hash = new crypto_1.Sha256(Uint8Array.from([1]));\n  hash.update(left);\n  hash.update(right);\n  return hash.digest();\n} // See https://github.com/tendermint/tendermint/blob/v0.31.8/docs/spec/blockchain/encoding.md#merkleroot\n// Note: the hashes input may not actually be hashes, especially before a recursive call\n\n\nfunction hashTree(hashes) {\n  switch (hashes.length) {\n    case 0:\n      throw new Error(\"Cannot hash empty tree\");\n\n    case 1:\n      return hashLeaf(hashes[0]);\n\n    default:\n      {\n        const slicePoint = getSplitPoint(hashes.length);\n        const left = hashTree(hashes.slice(0, slicePoint));\n        const right = hashTree(hashes.slice(slicePoint));\n        return hashInner(left, right);\n      }\n  }\n}\n\nfunction hashBlock(header) {\n  if (!header.lastBlockId) {\n    throw new Error(\"Hashing a block header with no last block ID (i.e. header at height 1) is not supported. If you need this, contributions are welcome. Please add documentation and test vectors for this case.\");\n  }\n\n  const encodedFields = [(0, encodings_1.encodeVersion)(header.version), (0, encodings_1.encodeString)(header.chainId), (0, encodings_1.encodeInt)(header.height), (0, encodings_1.encodeTime)(header.time), (0, encodings_1.encodeBlockId)(header.lastBlockId), (0, encodings_1.encodeBytes)(header.lastCommitHash), (0, encodings_1.encodeBytes)(header.dataHash), (0, encodings_1.encodeBytes)(header.validatorsHash), (0, encodings_1.encodeBytes)(header.nextValidatorsHash), (0, encodings_1.encodeBytes)(header.consensusHash), (0, encodings_1.encodeBytes)(header.appHash), (0, encodings_1.encodeBytes)(header.lastResultsHash), (0, encodings_1.encodeBytes)(header.evidenceHash), (0, encodings_1.encodeBytes)(header.proposerAddress)];\n  return hashTree(encodedFields);\n}\n\nexports.hashBlock = hashBlock;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA,2C,CAGA;AACA;;;AACA,SAAgBA,MAAhB,CAAuBC,EAAvB,EAAqC;EACnC,OAAO,qBAAOA,EAAP,CAAP;AACD;;AAFDC;;AAIA,SAASC,aAAT,CAAuBC,CAAvB,EAAgC;EAC9B,IAAIA,CAAC,GAAG,CAAR,EAAW,MAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;EACX,MAAMC,eAAe,GAAG,KAAKC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,IAAL,CAAUL,CAAV,CAAX,CAA7B;EACA,OAAOE,eAAe,GAAGF,CAAlB,GAAsBE,eAAtB,GAAwCA,eAAe,GAAG,CAAjE;AACD;;AAED,SAASI,QAAT,CAAkBC,IAAlB,EAAkC;EAChC,MAAMC,IAAI,GAAG,IAAIC,eAAJ,CAAWC,UAAU,CAACC,IAAX,CAAgB,CAAC,CAAD,CAAhB,CAAX,CAAb;EACAH,IAAI,CAACI,MAAL,CAAYL,IAAZ;EACA,OAAOC,IAAI,CAACK,MAAL,EAAP;AACD;;AAED,SAASC,SAAT,CAAmBC,IAAnB,EAAqCC,KAArC,EAAsD;EACpD,MAAMR,IAAI,GAAG,IAAIC,eAAJ,CAAWC,UAAU,CAACC,IAAX,CAAgB,CAAC,CAAD,CAAhB,CAAX,CAAb;EACAH,IAAI,CAACI,MAAL,CAAYG,IAAZ;EACAP,IAAI,CAACI,MAAL,CAAYI,KAAZ;EACA,OAAOR,IAAI,CAACK,MAAL,EAAP;AACD,C,CAED;AACA;;;AACA,SAASI,QAAT,CAAkBC,MAAlB,EAA+C;EAC7C,QAAQA,MAAM,CAACC,MAAf;IACE,KAAK,CAAL;MACE,MAAM,IAAIlB,KAAJ,CAAU,wBAAV,CAAN;;IACF,KAAK,CAAL;MACE,OAAOK,QAAQ,CAACY,MAAM,CAAC,CAAD,CAAP,CAAf;;IACF;MAAS;QACP,MAAME,UAAU,GAAGrB,aAAa,CAACmB,MAAM,CAACC,MAAR,CAAhC;QACA,MAAMJ,IAAI,GAAGE,QAAQ,CAACC,MAAM,CAACG,KAAP,CAAa,CAAb,EAAgBD,UAAhB,CAAD,CAArB;QACA,MAAMJ,KAAK,GAAGC,QAAQ,CAACC,MAAM,CAACG,KAAP,CAAaD,UAAb,CAAD,CAAtB;QACA,OAAON,SAAS,CAACC,IAAD,EAAOC,KAAP,CAAhB;MACD;EAVH;AAYD;;AAED,SAAgBM,SAAhB,CAA0BC,MAA1B,EAAwC;EACtC,IAAI,CAACA,MAAM,CAACC,WAAZ,EAAyB;IACvB,MAAM,IAAIvB,KAAJ,CACJ,gMADI,CAAN;EAGD;;EAED,MAAMwB,aAAa,GAA0B,CAC3C,+BAAcF,MAAM,CAACG,OAArB,CAD2C,EAE3C,8BAAaH,MAAM,CAACI,OAApB,CAF2C,EAG3C,2BAAUJ,MAAM,CAACK,MAAjB,CAH2C,EAI3C,4BAAWL,MAAM,CAACM,IAAlB,CAJ2C,EAK3C,+BAAcN,MAAM,CAACC,WAArB,CAL2C,EAO3C,6BAAYD,MAAM,CAACO,cAAnB,CAP2C,EAQ3C,6BAAYP,MAAM,CAACQ,QAAnB,CAR2C,EAS3C,6BAAYR,MAAM,CAACS,cAAnB,CAT2C,EAU3C,6BAAYT,MAAM,CAACU,kBAAnB,CAV2C,EAW3C,6BAAYV,MAAM,CAACW,aAAnB,CAX2C,EAY3C,6BAAYX,MAAM,CAACY,OAAnB,CAZ2C,EAa3C,6BAAYZ,MAAM,CAACa,eAAnB,CAb2C,EAc3C,6BAAYb,MAAM,CAACc,YAAnB,CAd2C,EAe3C,6BAAYd,MAAM,CAACe,eAAnB,CAf2C,CAA7C;EAiBA,OAAOrB,QAAQ,CAACQ,aAAD,CAAf;AACD;;AAzBD3B","names":["hashTx","tx","exports","getSplitPoint","n","Error","largestPowerOf2","Math","floor","log2","hashLeaf","leaf","hash","crypto_1","Uint8Array","from","update","digest","hashInner","left","right","hashTree","hashes","length","slicePoint","slice","hashBlock","header","lastBlockId","encodedFields","version","chainId","height","time","lastCommitHash","dataHash","validatorsHash","nextValidatorsHash","consensusHash","appHash","lastResultsHash","evidenceHash","proposerAddress"],"sourceRoot":"","sources":["../../src/tendermint34/hasher.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}