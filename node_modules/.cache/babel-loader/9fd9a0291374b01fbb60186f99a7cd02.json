{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findAttribute = exports.parseRawLog = exports.parseLogs = exports.parseLog = exports.parseEvent = exports.parseAttribute = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nfunction parseAttribute(input) {\n  if (!(0, utils_1.isNonNullObject)(input)) throw new Error(\"Attribute must be a non-null object\");\n  const {\n    key,\n    value\n  } = input;\n  if (typeof key !== \"string\" || !key) throw new Error(\"Attribute's key must be a non-empty string\");\n\n  if (typeof value !== \"string\" && typeof value !== \"undefined\") {\n    throw new Error(\"Attribute's value must be a string or unset\");\n  }\n\n  return {\n    key: key,\n    value: value || \"\"\n  };\n}\n\nexports.parseAttribute = parseAttribute;\n\nfunction parseEvent(input) {\n  if (!(0, utils_1.isNonNullObject)(input)) throw new Error(\"Event must be a non-null object\");\n  const {\n    type,\n    attributes\n  } = input;\n\n  if (typeof type !== \"string\" || type === \"\") {\n    throw new Error(`Event type must be a non-empty string`);\n  }\n\n  if (!Array.isArray(attributes)) throw new Error(\"Event's attributes must be an array\");\n  return {\n    type: type,\n    attributes: attributes.map(parseAttribute)\n  };\n}\n\nexports.parseEvent = parseEvent;\n\nfunction parseLog(input) {\n  if (!(0, utils_1.isNonNullObject)(input)) throw new Error(\"Log must be a non-null object\");\n  const {\n    msg_index,\n    log,\n    events\n  } = input;\n  if (typeof msg_index !== \"number\") throw new Error(\"Log's msg_index must be a number\");\n  if (typeof log !== \"string\") throw new Error(\"Log's log must be a string\");\n  if (!Array.isArray(events)) throw new Error(\"Log's events must be an array\");\n  return {\n    msg_index: msg_index,\n    log: log,\n    events: events.map(parseEvent)\n  };\n}\n\nexports.parseLog = parseLog;\n\nfunction parseLogs(input) {\n  if (!Array.isArray(input)) throw new Error(\"Logs must be an array\");\n  return input.map(parseLog);\n}\n\nexports.parseLogs = parseLogs;\n\nfunction parseRawLog() {\n  let input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"[]\";\n  const logsToParse = JSON.parse(input).map((_ref, i) => {\n    let {\n      events\n    } = _ref;\n    return {\n      msg_index: i,\n      events,\n      log: \"\"\n    };\n  });\n  return parseLogs(logsToParse);\n}\n\nexports.parseRawLog = parseRawLog;\n/**\n * Searches in logs for the first event of the given event type and in that event\n * for the first first attribute with the given attribute key.\n *\n * Throws if the attribute was not found.\n */\n\nfunction findAttribute(logs, eventType, attrKey) {\n  var _a;\n\n  const firstLogs = logs.find(() => true);\n  const out = (_a = firstLogs === null || firstLogs === void 0 ? void 0 : firstLogs.events.find(event => event.type === eventType)) === null || _a === void 0 ? void 0 : _a.attributes.find(attr => attr.key === attrKey);\n\n  if (!out) {\n    throw new Error(`Could not find attribute '${attrKey}' in first event of type '${eventType}' in first log.`);\n  }\n\n  return out;\n}\n\nexports.findAttribute = findAttribute;","map":{"version":3,"mappings":"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","names":["parseAttribute","input","Error","key","value","exports","parseEvent","type","attributes","Array","isArray","map","parseLog","msg_index","log","events","parseLogs","parseRawLog","logsToParse","JSON","parse","i","findAttribute","logs","eventType","attrKey","firstLogs","find","out","event","_a","attr"],"sourceRoot":"","sources":["../src/logs.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}