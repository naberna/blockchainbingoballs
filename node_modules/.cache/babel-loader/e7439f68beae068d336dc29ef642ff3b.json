{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Secp256k1Wallet = void 0;\n\nconst crypto_1 = require(\"@cosmjs/crypto\");\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst addresses_1 = require(\"./addresses\");\n\nconst signature_1 = require(\"./signature\");\n\nconst signdoc_1 = require(\"./signdoc\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use Secp256k1HdWallet.\n */\n\n\nclass Secp256k1Wallet {\n  constructor(privkey, pubkey, prefix) {\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n    this.prefix = prefix;\n  }\n  /**\n   * Creates a Secp256k1Wallet from the given private key\n   *\n   * @param privkey The private key.\n   * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n   */\n\n\n  static async fromKey(privkey) {\n    let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"cosmos\";\n    const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n    return new Secp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n  }\n\n  get address() {\n    return (0, encoding_1.toBech32)(this.prefix, (0, addresses_1.rawSecp256k1PubkeyToRawAddress)(this.pubkey));\n  }\n\n  async getAccounts() {\n    return [{\n      algo: \"secp256k1\",\n      address: this.address,\n      pubkey: this.pubkey\n    }];\n  }\n\n  async signAmino(signerAddress, signDoc) {\n    if (signerAddress !== this.address) {\n      throw new Error(`Address ${signerAddress} not found in wallet`);\n    }\n\n    const message = new crypto_1.Sha256((0, signdoc_1.serializeSignDoc)(signDoc)).digest();\n    const signature = await crypto_1.Secp256k1.createSignature(message, this.privkey);\n    const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n    return {\n      signed: signDoc,\n      signature: (0, signature_1.encodeSecp256k1Signature)(this.pubkey, signatureBytes)\n    };\n  }\n\n}\n\nexports.Secp256k1Wallet = Secp256k1Wallet;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;AAGA;;;;;;;AAKA,MAAaA,eAAb,CAA4B;EAgB1BC,YAAoBC,OAApB,EAAyCC,MAAzC,EAA6DC,MAA7D,EAA2E;IACzE,KAAKF,OAAL,GAAeA,OAAf;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,MAAL,GAAcA,MAAd;EACD;EAnBD;;;;;;;;EAM2B,aAAPC,OAAO,CAACH,OAAD,EAAuC;IAAA,IAAjBE,MAAiB,uEAAR,QAAQ;IAChE,MAAME,YAAY,GAAG,CAAC,MAAMC,mBAAUC,WAAV,CAAsBN,OAAtB,CAAP,EAAuCC,MAA5D;IACA,OAAO,IAAIH,eAAJ,CAAoBE,OAApB,EAA6BK,mBAAUE,cAAV,CAAyBH,YAAzB,CAA7B,EAAqEF,MAArE,CAAP;EACD;;EAYkB,IAAPM,OAAO;IACjB,OAAO,yBAAS,KAAKN,MAAd,EAAsB,gDAA+B,KAAKD,MAApC,CAAtB,CAAP;EACD;;EAEuB,MAAXQ,WAAW;IACtB,OAAO,CACL;MACEC,IAAI,EAAE,WADR;MAEEF,OAAO,EAAE,KAAKA,OAFhB;MAGEP,MAAM,EAAE,KAAKA;IAHf,CADK,CAAP;EAOD;;EAEqB,MAATU,SAAS,CAACC,aAAD,EAAwBC,OAAxB,EAA2C;IAC/D,IAAID,aAAa,KAAK,KAAKJ,OAA3B,EAAoC;MAClC,MAAM,IAAIM,KAAJ,CAAU,WAAWF,aAAa,sBAAlC,CAAN;IACD;;IACD,MAAMG,OAAO,GAAG,IAAIV,eAAJ,CAAW,gCAAiBQ,OAAjB,CAAX,EAAsCG,MAAtC,EAAhB;IACA,MAAMC,SAAS,GAAG,MAAMZ,mBAAUa,eAAV,CAA0BH,OAA1B,EAAmC,KAAKf,OAAxC,CAAxB;IACA,MAAMmB,cAAc,GAAG,IAAIC,UAAJ,CAAe,CAAC,GAAGH,SAAS,CAACI,CAAV,CAAY,EAAZ,CAAJ,EAAqB,GAAGJ,SAAS,CAACK,CAAV,CAAY,EAAZ,CAAxB,CAAf,CAAvB;IACA,OAAO;MACLC,MAAM,EAAEV,OADH;MAELI,SAAS,EAAE,0CAAyB,KAAKhB,MAA9B,EAAsCkB,cAAtC;IAFN,CAAP;EAID;;AA/CyB;;AAA5BK","names":["Secp256k1Wallet","constructor","privkey","pubkey","prefix","fromKey","uncompressed","crypto_1","makeKeypair","compressPubkey","address","getAccounts","algo","signAmino","signerAddress","signDoc","Error","message","digest","signature","createSignature","signatureBytes","Uint8Array","r","s","signed","exports"],"sourceRoot":"","sources":["../src/secp256k1wallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}