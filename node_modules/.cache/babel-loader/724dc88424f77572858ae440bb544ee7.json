{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addCoins = exports.parseCoins = exports.coins = exports.coin = void 0;\n\nconst math_1 = require(\"@cosmjs/math\");\n/**\n * Creates a coin.\n *\n * If your values do not exceed the safe integer range of JS numbers (53 bit),\n * you can use the number type here. This is the case for all typical Cosmos SDK\n * chains that use the default 6 decimals.\n *\n * In case you need to supportr larger values, use unsigned integer strings instead.\n */\n\n\nfunction coin(amount, denom) {\n  let outAmount;\n\n  if (typeof amount === \"number\") {\n    try {\n      outAmount = new math_1.Uint53(amount).toString();\n    } catch (_err) {\n      throw new Error(\"Given amount is not a safe integer. Consider using a string instead to overcome the limitations of JS numbers.\");\n    }\n  } else {\n    if (!amount.match(/^[0-9]+$/)) {\n      throw new Error(\"Invalid unsigned integer string format\");\n    }\n\n    outAmount = amount.replace(/^0*/, \"\") || \"0\";\n  }\n\n  return {\n    amount: outAmount,\n    denom: denom\n  };\n}\n\nexports.coin = coin;\n/**\n * Creates a list of coins with one element.\n */\n\nfunction coins(amount, denom) {\n  return [coin(amount, denom)];\n}\n\nexports.coins = coins;\n/**\n * Takes a coins list like \"819966000ucosm,700000000ustake\" and parses it.\n *\n * A Stargate-ready variant of this function is available via:\n *\n * ```\n * import { parseCoins } from \"@cosmjs/proto-signing\";\n * // or\n * import { parseCoins } from \"@cosmjs/stargate\";\n * ```\n */\n\nfunction parseCoins(input) {\n  return input.replace(/\\s/g, \"\").split(\",\").filter(Boolean).map(part => {\n    const match = part.match(/^([0-9]+)([a-zA-Z]+)/);\n    if (!match) throw new Error(\"Got an invalid coin string\");\n    return {\n      amount: math_1.Uint64.fromString(match[1]).toString(),\n      denom: match[2]\n    };\n  });\n}\n\nexports.parseCoins = parseCoins;\n/**\n * Function to sum up coins with type Coin\n */\n\nfunction addCoins(lhs, rhs) {\n  if (lhs.denom !== rhs.denom) throw new Error(\"Trying to add two coins with different denoms\");\n  return {\n    amount: math_1.Decimal.fromAtomics(lhs.amount, 0).plus(math_1.Decimal.fromAtomics(rhs.amount, 0)).atomics,\n    denom: lhs.denom\n  };\n}\n\nexports.addCoins = addCoins;","map":{"version":3,"mappings":";;;;;;;AAAA;AAMA;;;;;;;;;;;AASA,SAAgBA,IAAhB,CAAqBC,MAArB,EAA8CC,KAA9C,EAA2D;EACzD,IAAIC,SAAJ;;EACA,IAAI,OAAOF,MAAP,KAAkB,QAAtB,EAAgC;IAC9B,IAAI;MACFE,SAAS,GAAG,IAAIC,aAAJ,CAAWH,MAAX,EAAmBI,QAAnB,EAAZ;IACD,CAFD,CAEE,OAAOC,IAAP,EAAa;MACb,MAAM,IAAIC,KAAJ,CACJ,gHADI,CAAN;IAGD;EACF,CARD,MAQO;IACL,IAAI,CAACN,MAAM,CAACO,KAAP,CAAa,UAAb,CAAL,EAA+B;MAC7B,MAAM,IAAID,KAAJ,CAAU,wCAAV,CAAN;IACD;;IACDJ,SAAS,GAAGF,MAAM,CAACQ,OAAP,CAAe,KAAf,EAAsB,EAAtB,KAA6B,GAAzC;EACD;;EACD,OAAO;IACLR,MAAM,EAAEE,SADH;IAELD,KAAK,EAAEA;EAFF,CAAP;AAID;;AApBDQ;AAsBA;;;;AAGA,SAAgBC,KAAhB,CAAsBV,MAAtB,EAA+CC,KAA/C,EAA4D;EAC1D,OAAO,CAACF,IAAI,CAACC,MAAD,EAASC,KAAT,CAAL,CAAP;AACD;;AAFDQ;AAIA;;;;;;;;;;;;AAWA,SAAgBE,UAAhB,CAA2BC,KAA3B,EAAwC;EACtC,OAAOA,KAAK,CACTJ,OADI,CACI,KADJ,EACW,EADX,EAEJK,KAFI,CAEE,GAFF,EAGJC,MAHI,CAGGC,OAHH,EAIJC,GAJI,CAICC,IAAD,IAAS;IACZ,MAAMV,KAAK,GAAGU,IAAI,CAACV,KAAL,CAAW,sBAAX,CAAd;IACA,IAAI,CAACA,KAAL,EAAY,MAAM,IAAID,KAAJ,CAAU,4BAAV,CAAN;IACZ,OAAO;MACLN,MAAM,EAAEG,cAAOe,UAAP,CAAkBX,KAAK,CAAC,CAAD,CAAvB,EAA4BH,QAA5B,EADH;MAELH,KAAK,EAAEM,KAAK,CAAC,CAAD;IAFP,CAAP;EAID,CAXI,CAAP;AAYD;;AAbDE;AAeA;;;;AAGA,SAAgBU,QAAhB,CAAyBC,GAAzB,EAAoCC,GAApC,EAA6C;EAC3C,IAAID,GAAG,CAACnB,KAAJ,KAAcoB,GAAG,CAACpB,KAAtB,EAA6B,MAAM,IAAIK,KAAJ,CAAU,+CAAV,CAAN;EAC7B,OAAO;IACLN,MAAM,EAAEG,eAAQmB,WAAR,CAAoBF,GAAG,CAACpB,MAAxB,EAAgC,CAAhC,EAAmCuB,IAAnC,CAAwCpB,eAAQmB,WAAR,CAAoBD,GAAG,CAACrB,MAAxB,EAAgC,CAAhC,CAAxC,EAA4EwB,OAD/E;IAELvB,KAAK,EAAEmB,GAAG,CAACnB;EAFN,CAAP;AAID;;AANDQ","names":["coin","amount","denom","outAmount","math_1","toString","_err","Error","match","replace","exports","coins","parseCoins","input","split","filter","Boolean","map","part","fromString","addCoins","lhs","rhs","fromAtomics","plus","atomics"],"sourceRoot":"","sources":["../src/coins.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}