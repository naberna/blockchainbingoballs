{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeSignBytes = exports.makeSignDoc = exports.makeAuthInfoBytes = void 0;\n\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\n\nconst tx_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\n\nconst long_1 = __importDefault(require(\"long\"));\n/**\n * Create signer infos from the provided signers.\n *\n * This implementation does not support different signing modes for the different signers.\n */\n\n\nfunction makeSignerInfos(signers, signMode) {\n  return signers.map(_ref => {\n    let {\n      pubkey,\n      sequence\n    } = _ref;\n    return {\n      publicKey: pubkey,\n      modeInfo: {\n        single: {\n          mode: signMode\n        }\n      },\n      sequence: long_1.default.fromNumber(sequence)\n    };\n  });\n}\n/**\n * Creates and serializes an AuthInfo document.\n *\n * This implementation does not support different signing modes for the different signers.\n */\n\n\nfunction makeAuthInfoBytes(signers, feeAmount, gasLimit) {\n  let signMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : signing_1.SignMode.SIGN_MODE_DIRECT;\n  const authInfo = {\n    signerInfos: makeSignerInfos(signers, signMode),\n    fee: {\n      amount: [...feeAmount],\n      gasLimit: long_1.default.fromNumber(gasLimit)\n    }\n  };\n  return tx_1.AuthInfo.encode(tx_1.AuthInfo.fromPartial(authInfo)).finish();\n}\n\nexports.makeAuthInfoBytes = makeAuthInfoBytes;\n\nfunction makeSignDoc(bodyBytes, authInfoBytes, chainId, accountNumber) {\n  return {\n    bodyBytes: bodyBytes,\n    authInfoBytes: authInfoBytes,\n    chainId: chainId,\n    accountNumber: long_1.default.fromNumber(accountNumber)\n  };\n}\n\nexports.makeSignDoc = makeSignDoc;\n\nfunction makeSignBytes(_ref2) {\n  let {\n    accountNumber,\n    authInfoBytes,\n    bodyBytes,\n    chainId\n  } = _ref2;\n  const signDoc = tx_1.SignDoc.fromPartial({\n    accountNumber: accountNumber,\n    authInfoBytes: authInfoBytes,\n    bodyBytes: bodyBytes,\n    chainId: chainId\n  });\n  return tx_1.SignDoc.encode(signDoc).finish();\n}\n\nexports.makeSignBytes = makeSignBytes;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAEA;;AACA;;AAEA;AAEA;;;;;;;AAKA,SAASA,eAAT,CACEC,OADF,EAEEC,QAFF,EAEoB;EAElB,OAAOD,OAAO,CAACE,GAAR,CACL;IAAA,IAAC;MAAEC,MAAF;MAAUC;IAAV,CAAD;IAAA,OAAuC;MACrCC,SAAS,EAAEF,MAD0B;MAErCG,QAAQ,EAAE;QACRC,MAAM,EAAE;UAAEC,IAAI,EAAEP;QAAR;MADA,CAF2B;MAKrCG,QAAQ,EAAEK,eAAKC,UAAL,CAAgBN,QAAhB;IAL2B,CAAvC;EAAA,CADK,CAAP;AASD;AAED;;;;;;;AAKA,SAAgBO,iBAAhB,CACEX,OADF,EAEEY,SAFF,EAGEC,QAHF,EAIsC;EAAA,IAApCZ,QAAoC,uEAAzBa,mBAASC,gBAAgB;EAEpC,MAAMC,QAAQ,GAAG;IACfC,WAAW,EAAElB,eAAe,CAACC,OAAD,EAAUC,QAAV,CADb;IAEfiB,GAAG,EAAE;MACHC,MAAM,EAAE,CAAC,GAAGP,SAAJ,CADL;MAEHC,QAAQ,EAAEJ,eAAKC,UAAL,CAAgBG,QAAhB;IAFP;EAFU,CAAjB;EAOA,OAAOO,cAASC,MAAT,CAAgBD,cAASE,WAAT,CAAqBN,QAArB,CAAhB,EAAgDO,MAAhD,EAAP;AACD;;AAdDC;;AAgBA,SAAgBC,WAAhB,CACEC,SADF,EAEEC,aAFF,EAGEC,OAHF,EAIEC,aAJF,EAIuB;EAErB,OAAO;IACLH,SAAS,EAAEA,SADN;IAELC,aAAa,EAAEA,aAFV;IAGLC,OAAO,EAAEA,OAHJ;IAILC,aAAa,EAAEpB,eAAKC,UAAL,CAAgBmB,aAAhB;EAJV,CAAP;AAMD;;AAZDL;;AAcA,SAAgBM,aAAhB,QAA2F;EAAA,IAA7D;IAAED,aAAF;IAAiBF,aAAjB;IAAgCD,SAAhC;IAA2CE;EAA3C,CAA6D;EACzF,MAAMG,OAAO,GAAGX,aAAQE,WAAR,CAAoB;IAClCO,aAAa,EAAEA,aADmB;IAElCF,aAAa,EAAEA,aAFmB;IAGlCD,SAAS,EAAEA,SAHuB;IAIlCE,OAAO,EAAEA;EAJyB,CAApB,CAAhB;EAMA,OAAOR,aAAQC,MAAR,CAAeU,OAAf,EAAwBR,MAAxB,EAAP;AACD;;AARDC","names":["makeSignerInfos","signers","signMode","map","pubkey","sequence","publicKey","modeInfo","single","mode","long_1","fromNumber","makeAuthInfoBytes","feeAmount","gasLimit","signing_1","SIGN_MODE_DIRECT","authInfo","signerInfos","fee","amount","tx_1","encode","fromPartial","finish","exports","makeSignDoc","bodyBytes","authInfoBytes","chainId","accountNumber","makeSignBytes","signDoc"],"sourceRoot":"","sources":["../src/signing.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}