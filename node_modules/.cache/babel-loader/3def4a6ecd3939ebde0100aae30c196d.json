{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpClient = exports.http = void 0;\n\nconst json_rpc_1 = require(\"@cosmjs/json-rpc\");\n\nconst axios_1 = __importDefault(require(\"axios\"));\n\nconst rpcclient_1 = require(\"./rpcclient\");\n\nfunction filterBadStatus(res) {\n  if (res.status >= 400) {\n    throw new Error(`Bad status on response: ${res.status}`);\n  }\n\n  return res;\n}\n/**\n * Helper to work around missing CORS support in Tendermint (https://github.com/tendermint/tendermint/pull/2800)\n *\n * For some reason, fetch does not complain about missing server-side CORS support.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n\nasync function http(method, url, headers, request) {\n  if (typeof fetch !== \"undefined\") {\n    const settings = {\n      method: method,\n      body: request ? JSON.stringify(request) : undefined,\n      headers: {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        \"Content-Type\": \"application/json\",\n        ...headers\n      }\n    };\n    return fetch(url, settings).then(filterBadStatus).then(res => res.json());\n  } else {\n    return axios_1.default.request({\n      url: url,\n      method: method,\n      data: request,\n      headers: headers\n    }).then(res => res.data);\n  }\n}\n\nexports.http = http;\n\nclass HttpClient {\n  constructor(endpoint) {\n    if (typeof endpoint === \"string\") {\n      // accept host.name:port and assume http protocol\n      this.url = (0, rpcclient_1.hasProtocol)(endpoint) ? endpoint : \"http://\" + endpoint;\n    } else {\n      this.url = endpoint.url;\n      this.headers = endpoint.headers;\n    }\n  }\n\n  disconnect() {// nothing to be done\n  }\n\n  async execute(request) {\n    const response = (0, json_rpc_1.parseJsonRpcResponse)(await http(\"POST\", this.url, this.headers, request));\n\n    if ((0, json_rpc_1.isJsonRpcErrorResponse)(response)) {\n      throw new Error(JSON.stringify(response.error));\n    }\n\n    return response;\n  }\n\n}\n\nexports.HttpClient = HttpClient;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AAMA;;AAEA;;AAMA,SAASA,eAAT,CAAyBC,GAAzB,EAAiC;EAC/B,IAAIA,GAAG,CAACC,MAAJ,IAAc,GAAlB,EAAuB;IACrB,MAAM,IAAIC,KAAJ,CAAU,2BAA2BF,GAAG,CAACC,MAAM,EAA/C,CAAN;EACD;;EACD,OAAOD,GAAP;AACD;AAED;;;;;AAKA;;;AACO,eAAeG,IAAf,CACLC,MADK,EAELC,GAFK,EAGLC,OAHK,EAILC,OAJK,EAIQ;EAEb,IAAI,OAAOC,KAAP,KAAiB,WAArB,EAAkC;IAChC,MAAMC,QAAQ,GAAG;MACfL,MAAM,EAAEA,MADO;MAEfM,IAAI,EAAEH,OAAO,GAAGI,IAAI,CAACC,SAAL,CAAeL,OAAf,CAAH,GAA6BM,SAF3B;MAGfP,OAAO,EAAE;QACP;QACA,gBAAgB,kBAFT;QAGP,GAAGA;MAHI;IAHM,CAAjB;IASA,OAAOE,KAAK,CAACH,GAAD,EAAMI,QAAN,CAAL,CACJK,IADI,CACCf,eADD,EAEJe,IAFI,CAEEd,GAAD,IAAcA,GAAG,CAACe,IAAJ,EAFf,CAAP;EAGD,CAbD,MAaO;IACL,OAAOC,gBACJT,OADI,CACI;MAAEF,GAAG,EAAEA,GAAP;MAAYD,MAAM,EAAEA,MAApB;MAA4Ba,IAAI,EAAEV,OAAlC;MAA2CD,OAAO,EAAEA;IAApD,CADJ,EAEJQ,IAFI,CAEEd,GAAD,IAASA,GAAG,CAACiB,IAFd,CAAP;EAGD;AACF;;AAxBDC;;AAwCA,MAAaC,UAAb,CAAuB;EAIrBC,YAAmBC,QAAnB,EAAkD;IAChD,IAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;MAChC;MACA,KAAKhB,GAAL,GAAW,6BAAYgB,QAAZ,IAAwBA,QAAxB,GAAmC,YAAYA,QAA1D;IACD,CAHD,MAGO;MACL,KAAKhB,GAAL,GAAWgB,QAAQ,CAAChB,GAApB;MACA,KAAKC,OAAL,GAAee,QAAQ,CAACf,OAAxB;IACD;EACF;;EAEMgB,UAAU,IACf;EACD;;EAEmB,MAAPC,OAAO,CAAChB,OAAD,EAAwB;IAC1C,MAAMiB,QAAQ,GAAG,qCAAqB,MAAMrB,IAAI,CAAC,MAAD,EAAS,KAAKE,GAAd,EAAmB,KAAKC,OAAxB,EAAiCC,OAAjC,CAA/B,CAAjB;;IACA,IAAI,uCAAuBiB,QAAvB,CAAJ,EAAsC;MACpC,MAAM,IAAItB,KAAJ,CAAUS,IAAI,CAACC,SAAL,CAAeY,QAAQ,CAACC,KAAxB,CAAV,CAAN;IACD;;IACD,OAAOD,QAAP;EACD;;AAxBoB;;AAAvBN","names":["filterBadStatus","res","status","Error","http","method","url","headers","request","fetch","settings","body","JSON","stringify","undefined","then","json","axios_1","data","exports","HttpClient","constructor","endpoint","disconnect","execute","response","error"],"sourceRoot":"","sources":["../../src/rpcclients/httpclient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}