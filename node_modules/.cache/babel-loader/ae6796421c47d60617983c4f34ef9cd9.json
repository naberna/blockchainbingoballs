{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DateTime = exports.toSeconds = exports.fromSeconds = exports.toRfc3339WithNanoseconds = exports.fromRfc3339WithNanoseconds = void 0;\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n\nfunction fromRfc3339WithNanoseconds(dateTimeString) {\n  const out = (0, encoding_1.fromRfc3339)(dateTimeString);\n  const nanosecondsMatch = dateTimeString.match(/\\.(\\d+)Z$/);\n  const nanoseconds = nanosecondsMatch ? nanosecondsMatch[1].slice(3) : \"\";\n  out.nanoseconds = parseInt(nanoseconds.padEnd(6, \"0\"), 10);\n  return out;\n}\n\nexports.fromRfc3339WithNanoseconds = fromRfc3339WithNanoseconds;\n\nfunction toRfc3339WithNanoseconds(dateTime) {\n  var _a, _b;\n\n  const millisecondIso = dateTime.toISOString();\n  const nanoseconds = (_b = (_a = dateTime.nanoseconds) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : \"\";\n  return `${millisecondIso.slice(0, -1)}${nanoseconds.padStart(6, \"0\")}Z`;\n}\n\nexports.toRfc3339WithNanoseconds = toRfc3339WithNanoseconds;\n\nfunction fromSeconds(seconds) {\n  let nanos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const checkedNanos = new math_1.Uint32(nanos).toNumber();\n\n  if (checkedNanos > 999999999) {\n    throw new Error(\"Nano seconds must not exceed 999999999\");\n  }\n\n  const out = new Date(seconds * 1000 + Math.floor(checkedNanos / 1000000));\n  out.nanoseconds = checkedNanos % 1000000;\n  return out;\n}\n\nexports.fromSeconds = fromSeconds;\n/**\n * Calculates the UNIX timestamp in seconds as well as the nanoseconds after the given second.\n *\n * This is useful when dealing with external systems like the protobuf type\n * [.google.protobuf.Timestamp](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp)\n * or any other system that does not use millisecond precision.\n */\n\nfunction toSeconds(date) {\n  var _a;\n\n  return {\n    seconds: Math.floor(date.getTime() / 1000),\n    nanos: date.getTime() % 1000 * 1000000 + ((_a = date.nanoseconds) !== null && _a !== void 0 ? _a : 0)\n  };\n}\n\nexports.toSeconds = toSeconds;\n/** @deprecated Use fromRfc3339WithNanoseconds/toRfc3339WithNanoseconds instead */\n\nclass DateTime {\n  /** @deprecated Use fromRfc3339WithNanoseconds instead */\n  static decode(dateTimeString) {\n    return fromRfc3339WithNanoseconds(dateTimeString);\n  }\n  /** @deprecated Use toRfc3339WithNanoseconds instead */\n\n\n  static encode(dateTime) {\n    return toRfc3339WithNanoseconds(dateTime);\n  }\n\n}\n\nexports.DateTime = DateTime;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAaA,SAAgBA,0BAAhB,CAA2CC,cAA3C,EAAiE;EAC/D,MAAMC,GAAG,GAAwB,4BAAYD,cAAZ,CAAjC;EACA,MAAME,gBAAgB,GAAGF,cAAc,CAACG,KAAf,CAAqB,WAArB,CAAzB;EACA,MAAMC,WAAW,GAAGF,gBAAgB,GAAGA,gBAAgB,CAAC,CAAD,CAAhB,CAAoBG,KAApB,CAA0B,CAA1B,CAAH,GAAkC,EAAtE;EACAJ,GAAG,CAACG,WAAJ,GAAkBE,QAAQ,CAACF,WAAW,CAACG,MAAZ,CAAmB,CAAnB,EAAsB,GAAtB,CAAD,EAA6B,EAA7B,CAA1B;EACA,OAAON,GAAP;AACD;;AANDO;;AAQA,SAAgBC,wBAAhB,CAAyCC,QAAzC,EAA8E;;;EAC5E,MAAMC,cAAc,GAAGD,QAAQ,CAACE,WAAT,EAAvB;EACA,MAAMR,WAAW,GAAG,oBAAQ,CAACA,WAAT,MAAoB,IAApB,IAAoBS,aAApB,GAAoB,MAApB,GAAoBA,GAAEC,QAAF,EAApB,MAAgC,IAAhC,IAAgCC,aAAhC,GAAgCA,EAAhC,GAAoC,EAAxD;EACA,OAAO,GAAGJ,cAAc,CAACN,KAAf,CAAqB,CAArB,EAAwB,CAAC,CAAzB,CAA2B,GAAGD,WAAW,CAACY,QAAZ,CAAqB,CAArB,EAAwB,GAAxB,CAA4B,GAApE;AACD;;AAJDR;;AAMA,SAAgBS,WAAhB,CAA4BC,OAA5B,EAAsD;EAAA,IAATC,KAAS,uEAAD,CAAC;EACpD,MAAMC,YAAY,GAAG,IAAIC,aAAJ,CAAWF,KAAX,EAAkBG,QAAlB,EAArB;;EACA,IAAIF,YAAY,GAAG,SAAnB,EAAgC;IAC9B,MAAM,IAAIG,KAAJ,CAAU,wCAAV,CAAN;EACD;;EACD,MAAMtB,GAAG,GAAwB,IAAIuB,IAAJ,CAASN,OAAO,GAAG,IAAV,GAAiBO,IAAI,CAACC,KAAL,CAAWN,YAAY,GAAG,OAA1B,CAA1B,CAAjC;EACAnB,GAAG,CAACG,WAAJ,GAAkBgB,YAAY,GAAG,OAAjC;EACA,OAAOnB,GAAP;AACD;;AARDO;AAUA;;;;;;;;AAOA,SAAgBmB,SAAhB,CAA0BC,IAA1B,EAA2D;;;EACzD,OAAO;IACLV,OAAO,EAAEO,IAAI,CAACC,KAAL,CAAWE,IAAI,CAACC,OAAL,KAAiB,IAA5B,CADJ;IAELV,KAAK,EAAGS,IAAI,CAACC,OAAL,KAAiB,IAAlB,GAA0B,OAA1B,IAAqC,UAAI,CAACzB,WAAL,MAAgB,IAAhB,IAAgBS,aAAhB,GAAgBA,EAAhB,GAAoB,CAAzD;EAFF,CAAP;AAID;;AALDL;AAOA;;AACA,MAAasB,QAAb,CAAqB;EACnB;EACoB,OAANC,MAAM,CAAC/B,cAAD,EAAuB;IACzC,OAAOD,0BAA0B,CAACC,cAAD,CAAjC;EACD;EAED;;;EACoB,OAANgC,MAAM,CAACtB,QAAD,EAAsC;IACxD,OAAOD,wBAAwB,CAACC,QAAD,CAA/B;EACD;;AATkB;;AAArBF","names":["fromRfc3339WithNanoseconds","dateTimeString","out","nanosecondsMatch","match","nanoseconds","slice","parseInt","padEnd","exports","toRfc3339WithNanoseconds","dateTime","millisecondIso","toISOString","_a","toString","_b","padStart","fromSeconds","seconds","nanos","checkedNanos","math_1","toNumber","Error","Date","Math","floor","toSeconds","date","getTime","DateTime","decode","encode"],"sourceRoot":"","sources":["../src/dates.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}