{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StargateClient = exports.assertIsDeliverTxFailure = exports.assertIsDeliverTxSuccess = exports.isDeliverTxSuccess = exports.isDeliverTxFailure = exports.TimeoutError = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst amino_1 = require(\"@cosmjs/amino\");\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nconst accounts_1 = require(\"./accounts\");\n\nconst modules_1 = require(\"./modules\");\n\nconst queryclient_1 = require(\"./queryclient\");\n\nconst search_1 = require(\"./search\");\n\nclass TimeoutError extends Error {\n  constructor(message, txId) {\n    super(message);\n    this.txId = txId;\n  }\n\n}\n\nexports.TimeoutError = TimeoutError;\n\nfunction isDeliverTxFailure(result) {\n  return !!result.code;\n}\n\nexports.isDeliverTxFailure = isDeliverTxFailure;\n\nfunction isDeliverTxSuccess(result) {\n  return !isDeliverTxFailure(result);\n}\n\nexports.isDeliverTxSuccess = isDeliverTxSuccess;\n/**\n * Ensures the given result is a success. Throws a detailed error message otherwise.\n */\n\nfunction assertIsDeliverTxSuccess(result) {\n  if (isDeliverTxFailure(result)) {\n    throw new Error(`Error when broadcasting tx ${result.transactionHash} at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`);\n  }\n}\n\nexports.assertIsDeliverTxSuccess = assertIsDeliverTxSuccess;\n/**\n * Ensures the given result is a failure. Throws a detailed error message otherwise.\n */\n\nfunction assertIsDeliverTxFailure(result) {\n  if (isDeliverTxSuccess(result)) {\n    throw new Error(`Transaction ${result.transactionHash} did not fail at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`);\n  }\n}\n\nexports.assertIsDeliverTxFailure = assertIsDeliverTxFailure;\n\nclass StargateClient {\n  constructor(tmClient, options) {\n    if (tmClient) {\n      this.tmClient = tmClient;\n      this.queryClient = queryclient_1.QueryClient.withExtensions(tmClient, modules_1.setupAuthExtension, modules_1.setupBankExtension, modules_1.setupStakingExtension, modules_1.setupTxExtension);\n    }\n\n    const {\n      accountParser = accounts_1.accountFromAny\n    } = options;\n    this.accountParser = accountParser;\n  }\n\n  static async connect(endpoint) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n    return new StargateClient(tmClient, options);\n  }\n\n  getTmClient() {\n    return this.tmClient;\n  }\n\n  forceGetTmClient() {\n    if (!this.tmClient) {\n      throw new Error(\"Tendermint client not available. You cannot use online functionality in offline mode.\");\n    }\n\n    return this.tmClient;\n  }\n\n  getQueryClient() {\n    return this.queryClient;\n  }\n\n  forceGetQueryClient() {\n    if (!this.queryClient) {\n      throw new Error(\"Query client not available. You cannot use online functionality in offline mode.\");\n    }\n\n    return this.queryClient;\n  }\n\n  async getChainId() {\n    if (!this.chainId) {\n      const response = await this.forceGetTmClient().status();\n      const chainId = response.nodeInfo.network;\n      if (!chainId) throw new Error(\"Chain ID must not be empty\");\n      this.chainId = chainId;\n    }\n\n    return this.chainId;\n  }\n\n  async getHeight() {\n    const status = await this.forceGetTmClient().status();\n    return status.syncInfo.latestBlockHeight;\n  }\n\n  async getAccount(searchAddress) {\n    try {\n      const account = await this.forceGetQueryClient().auth.account(searchAddress);\n      return account ? this.accountParser(account) : null;\n    } catch (error) {\n      if (/rpc error: code = NotFound/i.test(error.toString())) {\n        return null;\n      }\n\n      throw error;\n    }\n  }\n\n  async getSequence(address) {\n    const account = await this.getAccount(address);\n\n    if (!account) {\n      throw new Error(\"Account does not exist on chain. Send some tokens there before trying to query sequence.\");\n    }\n\n    return {\n      accountNumber: account.accountNumber,\n      sequence: account.sequence\n    };\n  }\n\n  async getBlock(height) {\n    const response = await this.forceGetTmClient().block(height);\n    return {\n      id: (0, encoding_1.toHex)(response.blockId.hash).toUpperCase(),\n      header: {\n        version: {\n          block: new math_1.Uint53(response.block.header.version.block).toString(),\n          app: new math_1.Uint53(response.block.header.version.app).toString()\n        },\n        height: response.block.header.height,\n        chainId: response.block.header.chainId,\n        time: (0, tendermint_rpc_1.toRfc3339WithNanoseconds)(response.block.header.time)\n      },\n      txs: response.block.txs\n    };\n  }\n\n  async getBalance(address, searchDenom) {\n    return this.forceGetQueryClient().bank.balance(address, searchDenom);\n  }\n  /**\n   * Queries all balances for all denoms that belong to this address.\n   *\n   * Uses the grpc queries (which iterates over the store internally), and we cannot get\n   * proofs from such a method.\n   */\n\n\n  async getAllBalances(address) {\n    return this.forceGetQueryClient().bank.allBalances(address);\n  }\n\n  async getBalanceStaked(address) {\n    const allDelegations = [];\n    let startAtKey = undefined;\n\n    do {\n      const {\n        delegationResponses,\n        pagination\n      } = await this.forceGetQueryClient().staking.delegatorDelegations(address, startAtKey);\n      const loadedDelegations = delegationResponses || [];\n      allDelegations.push(...loadedDelegations);\n      startAtKey = pagination === null || pagination === void 0 ? void 0 : pagination.nextKey;\n    } while (startAtKey !== undefined && startAtKey.length !== 0);\n\n    const sumValues = allDelegations.reduce((previousValue, currentValue) => {\n      // Safe because field is set to non-nullable (https://github.com/cosmos/cosmos-sdk/blob/v0.45.3/proto/cosmos/staking/v1beta1/staking.proto#L295)\n      (0, utils_1.assert)(currentValue.balance);\n      return previousValue !== null ? (0, amino_1.addCoins)(previousValue, currentValue.balance) : currentValue.balance;\n    }, null);\n    return sumValues;\n  }\n\n  async getDelegation(delegatorAddress, validatorAddress) {\n    var _a;\n\n    let delegatedAmount;\n\n    try {\n      delegatedAmount = (_a = (await this.forceGetQueryClient().staking.delegation(delegatorAddress, validatorAddress)).delegationResponse) === null || _a === void 0 ? void 0 : _a.balance;\n    } catch (e) {\n      if (e.toString().includes(\"key not found\")) {// ignore, `delegatedAmount` remains undefined\n      } else {\n        throw e;\n      }\n    }\n\n    return delegatedAmount || null;\n  }\n\n  async getTx(id) {\n    var _a;\n\n    const results = await this.txsQuery(`tx.hash='${id}'`);\n    return (_a = results[0]) !== null && _a !== void 0 ? _a : null;\n  }\n\n  async searchTx(query) {\n    let filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const minHeight = filter.minHeight || 0;\n    const maxHeight = filter.maxHeight || Number.MAX_SAFE_INTEGER;\n    if (maxHeight < minHeight) return []; // optional optimization\n\n    function withFilters(originalQuery) {\n      return `${originalQuery} AND tx.height>=${minHeight} AND tx.height<=${maxHeight}`;\n    }\n\n    let txs;\n\n    if ((0, search_1.isSearchByHeightQuery)(query)) {\n      txs = query.height >= minHeight && query.height <= maxHeight ? await this.txsQuery(`tx.height=${query.height}`) : [];\n    } else if ((0, search_1.isSearchBySentFromOrToQuery)(query)) {\n      const sentQuery = withFilters(`message.module='bank' AND transfer.sender='${query.sentFromOrTo}'`);\n      const receivedQuery = withFilters(`message.module='bank' AND transfer.recipient='${query.sentFromOrTo}'`);\n      const [sent, received] = await Promise.all([sentQuery, receivedQuery].map(rawQuery => this.txsQuery(rawQuery)));\n      const sentHashes = sent.map(t => t.hash);\n      txs = [...sent, ...received.filter(t => !sentHashes.includes(t.hash))];\n    } else if ((0, search_1.isSearchByTagsQuery)(query)) {\n      const rawQuery = withFilters(query.tags.map(t => `${t.key}='${t.value}'`).join(\" AND \"));\n      txs = await this.txsQuery(rawQuery);\n    } else {\n      throw new Error(\"Unknown query type\");\n    }\n\n    const filtered = txs.filter(tx => tx.height >= minHeight && tx.height <= maxHeight);\n    return filtered;\n  }\n\n  disconnect() {\n    if (this.tmClient) this.tmClient.disconnect();\n  }\n  /**\n   * Broadcasts a signed transaction to the network and monitors its inclusion in a block.\n   *\n   * If broadcasting is rejected by the node for some reason (e.g. because of a CheckTx failure),\n   * an error is thrown.\n   *\n   * If the transaction is not included in a block before the provided timeout, this errors with a `TimeoutError`.\n   *\n   * If the transaction is included in a block, a `DeliverTxResponse` is returned. The caller then\n   * usually needs to check for execution success or failure.\n   */\n\n\n  async broadcastTx(tx) {\n    let timeoutMs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60000;\n    let pollIntervalMs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3000;\n    let timedOut = false;\n    const txPollTimeout = setTimeout(() => {\n      timedOut = true;\n    }, timeoutMs);\n\n    const pollForTx = async txId => {\n      if (timedOut) {\n        throw new TimeoutError(`Transaction with ID ${txId} was submitted but was not yet found on the chain. You might want to check later. There was a wait of ${timeoutMs / 1000} seconds.`, txId);\n      }\n\n      await (0, utils_1.sleep)(pollIntervalMs);\n      const result = await this.getTx(txId);\n      return result ? {\n        code: result.code,\n        height: result.height,\n        rawLog: result.rawLog,\n        transactionHash: txId,\n        gasUsed: result.gasUsed,\n        gasWanted: result.gasWanted\n      } : pollForTx(txId);\n    };\n\n    const broadcasted = await this.forceGetTmClient().broadcastTxSync({\n      tx\n    });\n\n    if (broadcasted.code) {\n      return Promise.reject(new Error(`Broadcasting transaction failed with code ${broadcasted.code} (codespace: ${broadcasted.codeSpace}). Log: ${broadcasted.log}`));\n    }\n\n    const transactionId = (0, encoding_1.toHex)(broadcasted.hash).toUpperCase();\n    return new Promise((resolve, reject) => pollForTx(transactionId).then(value => {\n      clearTimeout(txPollTimeout);\n      resolve(value);\n    }, error => {\n      clearTimeout(txPollTimeout);\n      reject(error);\n    }));\n  }\n\n  async txsQuery(query) {\n    const results = await this.forceGetTmClient().txSearchAll({\n      query: query\n    });\n    return results.txs.map(tx => {\n      return {\n        height: tx.height,\n        hash: (0, encoding_1.toHex)(tx.hash).toUpperCase(),\n        code: tx.result.code,\n        rawLog: tx.result.log || \"\",\n        tx: tx.tx,\n        gasUsed: tx.result.gasUsed,\n        gasWanted: tx.result.gasWanted\n      };\n    });\n  }\n\n}\n\nexports.StargateClient = StargateClient;","map":{"version":3,"mappings":"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","names":["TimeoutError","Error","constructor","message","txId","exports","isDeliverTxFailure","result","code","isDeliverTxSuccess","assertIsDeliverTxSuccess","transactionHash","height","rawLog","assertIsDeliverTxFailure","StargateClient","tmClient","options","queryClient","queryclient_1","withExtensions","modules_1","accountParser","accounts_1","connect","endpoint","tendermint_rpc_1","getTmClient","forceGetTmClient","getQueryClient","forceGetQueryClient","getChainId","chainId","response","status","nodeInfo","network","getHeight","syncInfo","latestBlockHeight","getAccount","searchAddress","account","auth","error","test","toString","getSequence","address","accountNumber","sequence","getBlock","block","id","blockId","hash","toUpperCase","header","version","math_1","app","time","txs","getBalance","searchDenom","bank","balance","getAllBalances","allBalances","getBalanceStaked","allDelegations","startAtKey","undefined","delegationResponses","pagination","staking","delegatorDelegations","loadedDelegations","push","nextKey","length","sumValues","reduce","previousValue","currentValue","getDelegation","delegatorAddress","validatorAddress","delegatedAmount","delegation","delegationResponse","_a","e","includes","getTx","results","txsQuery","searchTx","query","filter","minHeight","maxHeight","Number","MAX_SAFE_INTEGER","withFilters","originalQuery","sentQuery","sentFromOrTo","receivedQuery","sent","received","Promise","all","map","rawQuery","sentHashes","t","tags","key","value","join","filtered","tx","disconnect","broadcastTx","timeoutMs","pollIntervalMs","timedOut","txPollTimeout","setTimeout","pollForTx","gasUsed","gasWanted","broadcasted","broadcastTxSync","reject","codeSpace","log","transactionId","resolve","then","clearTimeout","txSearchAll"],"sourceRoot":"","sources":["../src/stargateclient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}