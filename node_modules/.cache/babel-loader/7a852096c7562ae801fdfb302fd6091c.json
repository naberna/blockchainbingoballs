{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupIbcExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst query_1 = require(\"cosmjs-types/ibc/applications/transfer/v1/query\");\n\nconst channel_1 = require(\"cosmjs-types/ibc/core/channel/v1/channel\");\n\nconst query_2 = require(\"cosmjs-types/ibc/core/channel/v1/query\");\n\nconst query_3 = require(\"cosmjs-types/ibc/core/client/v1/query\");\n\nconst query_4 = require(\"cosmjs-types/ibc/core/connection/v1/query\");\n\nconst tendermint_1 = require(\"cosmjs-types/ibc/lightclients/tendermint/v1/tendermint\");\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst queryclient_1 = require(\"../../queryclient\");\n\nfunction decodeTendermintClientStateAny(clientState) {\n  if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== \"/ibc.lightclients.tendermint.v1.ClientState\") {\n    throw new Error(`Unexpected client state type: ${clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl}`);\n  }\n\n  return tendermint_1.ClientState.decode(clientState.value);\n}\n\nfunction decodeTendermintConsensusStateAny(clientState) {\n  if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== \"/ibc.lightclients.tendermint.v1.ConsensusState\") {\n    throw new Error(`Unexpected client state type: ${clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl}`);\n  }\n\n  return tendermint_1.ConsensusState.decode(clientState.value);\n}\n\nfunction setupIbcExtension(base) {\n  const rpc = (0, queryclient_1.createProtobufRpcClient)(base); // Use these services to get easy typed access to query methods\n  // These cannot be used for proof verification\n\n  const channelQueryService = new query_2.QueryClientImpl(rpc);\n  const clientQueryService = new query_3.QueryClientImpl(rpc);\n  const connectionQueryService = new query_4.QueryClientImpl(rpc);\n  const transferQueryService = new query_1.QueryClientImpl(rpc);\n  return {\n    ibc: {\n      channel: {\n        channel: async (portId, channelId) => channelQueryService.Channel({\n          portId: portId,\n          channelId: channelId\n        }),\n        channels: async paginationKey => channelQueryService.Channels({\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allChannels: async () => {\n          var _a;\n\n          const channels = [];\n          let response;\n          let key;\n\n          do {\n            response = await channelQueryService.Channels({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            channels.push(...response.channels);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n\n          return {\n            channels: channels,\n            height: response.height\n          };\n        },\n        connectionChannels: async (connection, paginationKey) => channelQueryService.ConnectionChannels({\n          connection: connection,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allConnectionChannels: async connection => {\n          var _a;\n\n          const channels = [];\n          let response;\n          let key;\n\n          do {\n            response = await channelQueryService.ConnectionChannels({\n              connection: connection,\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            channels.push(...response.channels);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n\n          return {\n            channels: channels,\n            height: response.height\n          };\n        },\n        clientState: async (portId, channelId) => channelQueryService.ChannelClientState({\n          portId: portId,\n          channelId: channelId\n        }),\n        consensusState: async (portId, channelId, revisionNumber, revisionHeight) => channelQueryService.ChannelConsensusState({\n          portId: portId,\n          channelId: channelId,\n          revisionNumber: long_1.default.fromNumber(revisionNumber, true),\n          revisionHeight: long_1.default.fromNumber(revisionHeight, true)\n        }),\n        packetCommitment: async (portId, channelId, sequence) => channelQueryService.PacketCommitment({\n          portId: portId,\n          channelId: channelId,\n          sequence: sequence\n        }),\n        packetCommitments: async (portId, channelId, paginationKey) => channelQueryService.PacketCommitments({\n          channelId: channelId,\n          portId: portId,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allPacketCommitments: async (portId, channelId) => {\n          var _a;\n\n          const commitments = [];\n          let response;\n          let key;\n\n          do {\n            response = await channelQueryService.PacketCommitments({\n              channelId: channelId,\n              portId: portId,\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            commitments.push(...response.commitments);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n\n          return {\n            commitments: commitments,\n            height: response.height\n          };\n        },\n        packetReceipt: async (portId, channelId, sequence) => channelQueryService.PacketReceipt({\n          portId: portId,\n          channelId: channelId,\n          sequence: long_1.default.fromNumber(sequence, true)\n        }),\n        packetAcknowledgement: async (portId, channelId, sequence) => channelQueryService.PacketAcknowledgement({\n          portId: portId,\n          channelId: channelId,\n          sequence: long_1.default.fromNumber(sequence, true)\n        }),\n        packetAcknowledgements: async (portId, channelId, paginationKey) => channelQueryService.PacketAcknowledgements({\n          portId: portId,\n          channelId: channelId,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allPacketAcknowledgements: async (portId, channelId) => {\n          var _a;\n\n          const acknowledgements = [];\n          let response;\n          let key;\n\n          do {\n            response = await channelQueryService.PacketAcknowledgements({\n              channelId: channelId,\n              portId: portId,\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            acknowledgements.push(...response.acknowledgements);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n\n          return {\n            acknowledgements: acknowledgements,\n            height: response.height\n          };\n        },\n        unreceivedPackets: async (portId, channelId, packetCommitmentSequences) => channelQueryService.UnreceivedPackets({\n          portId: portId,\n          channelId: channelId,\n          packetCommitmentSequences: packetCommitmentSequences.map(s => long_1.default.fromNumber(s, true))\n        }),\n        unreceivedAcks: async (portId, channelId, packetAckSequences) => channelQueryService.UnreceivedAcks({\n          portId: portId,\n          channelId: channelId,\n          packetAckSequences: packetAckSequences.map(s => long_1.default.fromNumber(s, true))\n        }),\n        nextSequenceReceive: async (portId, channelId) => channelQueryService.NextSequenceReceive({\n          portId: portId,\n          channelId: channelId\n        })\n      },\n      client: {\n        state: async clientId => clientQueryService.ClientState({\n          clientId\n        }),\n        states: async paginationKey => clientQueryService.ClientStates({\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allStates: async () => {\n          var _a;\n\n          const clientStates = [];\n          let response;\n          let key;\n\n          do {\n            response = await clientQueryService.ClientStates({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            clientStates.push(...response.clientStates);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n\n          return {\n            clientStates: clientStates\n          };\n        },\n        consensusState: async (clientId, consensusHeight) => clientQueryService.ConsensusState(query_3.QueryConsensusStateRequest.fromPartial({\n          clientId: clientId,\n          revisionHeight: consensusHeight !== undefined ? long_1.default.fromNumber(consensusHeight, true) : undefined,\n          latestHeight: consensusHeight === undefined\n        })),\n        consensusStates: async (clientId, paginationKey) => clientQueryService.ConsensusStates({\n          clientId: clientId,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allConsensusStates: async clientId => {\n          var _a;\n\n          const consensusStates = [];\n          let response;\n          let key;\n\n          do {\n            response = await clientQueryService.ConsensusStates({\n              clientId: clientId,\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            consensusStates.push(...response.consensusStates);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n\n          return {\n            consensusStates: consensusStates\n          };\n        },\n        params: async () => clientQueryService.ClientParams({}),\n        stateTm: async clientId => {\n          const response = await clientQueryService.ClientState({\n            clientId\n          });\n          return decodeTendermintClientStateAny(response.clientState);\n        },\n        statesTm: async paginationKey => {\n          const {\n            clientStates\n          } = await clientQueryService.ClientStates({\n            pagination: (0, queryclient_1.createPagination)(paginationKey)\n          });\n          return clientStates.map(_ref => {\n            let {\n              clientState\n            } = _ref;\n            return decodeTendermintClientStateAny(clientState);\n          });\n        },\n        allStatesTm: async () => {\n          var _a;\n\n          const clientStates = [];\n          let response;\n          let key;\n\n          do {\n            response = await clientQueryService.ClientStates({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            clientStates.push(...response.clientStates);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n\n          return clientStates.map(_ref2 => {\n            let {\n              clientState\n            } = _ref2;\n            return decodeTendermintClientStateAny(clientState);\n          });\n        },\n        consensusStateTm: async (clientId, consensusHeight) => {\n          const response = await clientQueryService.ConsensusState(query_3.QueryConsensusStateRequest.fromPartial({\n            clientId: clientId,\n            revisionHeight: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionHeight,\n            revisionNumber: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionNumber,\n            latestHeight: consensusHeight === undefined\n          }));\n          return decodeTendermintConsensusStateAny(response.consensusState);\n        }\n      },\n      connection: {\n        connection: async connectionId => connectionQueryService.Connection({\n          connectionId: connectionId\n        }),\n        connections: async paginationKey => connectionQueryService.Connections({\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allConnections: async () => {\n          var _a;\n\n          const connections = [];\n          let response;\n          let key;\n\n          do {\n            response = await connectionQueryService.Connections({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            connections.push(...response.connections);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n\n          return {\n            connections: connections,\n            height: response.height\n          };\n        },\n        clientConnections: async clientId => connectionQueryService.ClientConnections({\n          clientId: clientId\n        }),\n        clientState: async connectionId => connectionQueryService.ConnectionClientState({\n          connectionId: connectionId\n        }),\n        consensusState: async (connectionId, revisionHeight) => connectionQueryService.ConnectionConsensusState(query_4.QueryConnectionConsensusStateRequest.fromPartial({\n          connectionId: connectionId,\n          revisionHeight: long_1.default.fromNumber(revisionHeight, true)\n        }))\n      },\n      transfer: {\n        denomTrace: async hash => transferQueryService.DenomTrace({\n          hash: hash\n        }),\n        denomTraces: async paginationKey => transferQueryService.DenomTraces({\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allDenomTraces: async () => {\n          var _a;\n\n          const denomTraces = [];\n          let response;\n          let key;\n\n          do {\n            response = await transferQueryService.DenomTraces({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            denomTraces.push(...response.denomTraces);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n\n          return {\n            denomTraces: denomTraces\n          };\n        },\n        params: async () => transferQueryService.Params({})\n      },\n      verified: {\n        channel: {\n          channel: async (portId, channelId) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L55-L65\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L117-L120\n            const key = (0, encoding_1.toAscii)(`channelEnds/ports/${portId}/channels/${channelId}`);\n            const responseData = await base.queryVerified(\"ibc\", key);\n            return responseData.length ? channel_1.Channel.decode(responseData) : null;\n          },\n          packetCommitment: async (portId, channelId, sequence) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L128-L133\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L183-L185\n            const key = (0, encoding_1.toAscii)(`commitments/ports/${portId}/channels/${channelId}/packets/${sequence}`);\n            const responseData = await base.queryVerified(\"ibc\", key); // keeper code doesn't parse, but returns raw\n\n            return responseData;\n          },\n          packetAcknowledgement: async (portId, channelId, sequence) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L159-L166\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L153-L156\n            const key = (0, encoding_1.toAscii)(`acks/ports/${portId}/channels/${channelId}/acknowledgements/${sequence}`);\n            const responseData = await base.queryVerified(\"ibc\", key); // keeper code doesn't parse, but returns raw\n\n            return responseData;\n          },\n          nextSequenceReceive: async (portId, channelId) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L92-L101\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L133-L136\n            const key = (0, encoding_1.toAscii)(`seqAcks/ports/${portId}/channels/${channelId}/nextSequenceAck`);\n            const responseData = await base.queryVerified(\"ibc\", key);\n            return responseData.length ? math_1.Uint64.fromBytes(responseData).toNumber() : null;\n          }\n        }\n      }\n    }\n  };\n}\n\nexports.setupIbcExtension = setupIbcExtension;","map":{"version":3,"mappings":"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","names":["decodeTendermintClientStateAny","clientState","typeUrl","Error","tendermint_1","decode","value","decodeTendermintConsensusStateAny","setupIbcExtension","base","rpc","channelQueryService","query_2","clientQueryService","query_3","connectionQueryService","query_4","transferQueryService","query_1","ibc","channel","portId","channelId","Channel","channels","paginationKey","Channels","pagination","allChannels","response","key","push","_a","nextKey","length","height","connectionChannels","connection","ConnectionChannels","allConnectionChannels","ChannelClientState","consensusState","revisionNumber","revisionHeight","ChannelConsensusState","long_1","fromNumber","packetCommitment","sequence","PacketCommitment","packetCommitments","PacketCommitments","allPacketCommitments","commitments","packetReceipt","PacketReceipt","packetAcknowledgement","PacketAcknowledgement","packetAcknowledgements","PacketAcknowledgements","allPacketAcknowledgements","acknowledgements","unreceivedPackets","packetCommitmentSequences","UnreceivedPackets","map","s","unreceivedAcks","packetAckSequences","UnreceivedAcks","nextSequenceReceive","NextSequenceReceive","client","state","clientId","ClientState","states","ClientStates","allStates","clientStates","consensusHeight","ConsensusState","fromPartial","undefined","latestHeight","consensusStates","ConsensusStates","allConsensusStates","params","ClientParams","stateTm","statesTm","allStatesTm","consensusStateTm","connectionId","Connection","connections","Connections","allConnections","clientConnections","ClientConnections","ConnectionClientState","ConnectionConsensusState","transfer","denomTrace","hash","DenomTrace","denomTraces","DenomTraces","allDenomTraces","Params","verified","responseData","queryVerified","channel_1","math_1","fromBytes","toNumber","exports"],"sourceRoot":"","sources":["../../../src/modules/ibc/queries.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}