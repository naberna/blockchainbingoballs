{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.lastValue = exports.asArray = exports.countStream = exports.Reducer = void 0; // Reducer takes a stream of events T and a ReducerFunc, that\n// materializes a state of type U.\n\nclass Reducer {\n  constructor(stream, reducer, initState) {\n    this.stream = stream;\n    this.reducer = reducer;\n    this.state = initState;\n    this.completed = new Promise((resolve, reject) => {\n      const subscription = this.stream.subscribe({\n        next: evt => {\n          this.state = this.reducer(this.state, evt);\n        },\n        complete: () => {\n          resolve(); // this must happen after resolve, to ensure stream.subscribe() has finished\n\n          subscription.unsubscribe();\n        },\n        error: err => {\n          reject(err); // the stream already closed on error, but unsubscribe to be safe\n\n          subscription.unsubscribe();\n        }\n      });\n    });\n  } // value returns current materialized state\n\n\n  value() {\n    return this.state;\n  } // finished resolves on completed stream, rejects on stream error\n\n\n  async finished() {\n    return this.completed;\n  }\n\n}\n\nexports.Reducer = Reducer;\n\nfunction increment(sum, _) {\n  return sum + 1;\n} // countStream returns a reducer that contains current count\n// of events on the stream\n\n\nfunction countStream(stream) {\n  return new Reducer(stream, increment, 0);\n}\n\nexports.countStream = countStream;\n\nfunction append(list, evt) {\n  return [...list, evt];\n} // asArray maintains an array containing all events that have\n// occurred on the stream\n\n\nfunction asArray(stream) {\n  return new Reducer(stream, append, []);\n}\n\nexports.asArray = asArray;\n\nfunction last(_, event) {\n  return event;\n} // lastValue returns the last value read from the stream, or undefined if no values sent\n\n\nfunction lastValue(stream) {\n  return new Reducer(stream, last, undefined);\n}\n\nexports.lastValue = lastValue;","map":{"version":3,"mappings":";;;;;sFAIA;AACA;;AACA,MAAaA,OAAb,CAAoB;EAQlBC,YAAmBC,MAAnB,EAAsCC,OAAtC,EAAkEC,SAAlE,EAA8E;IAC5E,KAAKF,MAAL,GAAcA,MAAd;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKE,KAAL,GAAaD,SAAb;IACA,KAAKE,SAAL,GAAiB,IAAIC,OAAJ,CAAkB,CAACC,OAAD,EAAUC,MAAV,KAAoB;MACrD,MAAMC,YAAY,GAAG,KAAKR,MAAL,CAAYS,SAAZ,CAAsB;QACzCC,IAAI,EAAGC,GAAD,IAAW;UACf,KAAKR,KAAL,GAAa,KAAKF,OAAL,CAAa,KAAKE,KAAlB,EAAyBQ,GAAzB,CAAb;QACD,CAHwC;QAIzCC,QAAQ,EAAE,MAAK;UACbN,OAAO,GADM,CAEb;;UACAE,YAAY,CAACK,WAAb;QACD,CARwC;QASzCC,KAAK,EAAGC,GAAD,IAAa;UAClBR,MAAM,CAACQ,GAAD,CAAN,CADkB,CAElB;;UACAP,YAAY,CAACK,WAAb;QACD;MAbwC,CAAtB,CAArB;IAeD,CAhBgB,CAAjB;EAiBD,CA7BiB,CA+BlB;;;EACOG,KAAK;IACV,OAAO,KAAKb,KAAZ;EACD,CAlCiB,CAoClB;;;EACqB,MAARc,QAAQ;IACnB,OAAO,KAAKb,SAAZ;EACD;;AAvCiB;;AAApBc;;AA0CA,SAASC,SAAT,CAAsBC,GAAtB,EAAmCC,CAAnC,EAAuC;EACrC,OAAOD,GAAG,GAAG,CAAb;AACD,C,CAED;AACA;;;AACA,SAAgBE,WAAhB,CAA+BtB,MAA/B,EAAgD;EAC9C,OAAO,IAAIF,OAAJ,CAAYE,MAAZ,EAAoBmB,SAApB,EAA+B,CAA/B,CAAP;AACD;;AAFDD;;AAIA,SAASK,MAAT,CAAmBC,IAAnB,EAAuCb,GAAvC,EAA6C;EAC3C,OAAO,CAAC,GAAGa,IAAJ,EAAUb,GAAV,CAAP;AACD,C,CAED;AACA;;;AACA,SAAgBc,OAAhB,CAA2BzB,MAA3B,EAA4C;EAC1C,OAAO,IAAIF,OAAJ,CAA6BE,MAA7B,EAAqCuB,MAArC,EAA6C,EAA7C,CAAP;AACD;;AAFDL;;AAIA,SAASQ,IAAT,CAAiBL,CAAjB,EAAyBM,KAAzB,EAAiC;EAC/B,OAAOA,KAAP;AACD,C,CAED;;;AACA,SAAgBC,SAAhB,CAA6B5B,MAA7B,EAA8C;EAC5C,OAAO,IAAIF,OAAJ,CAA8BE,MAA9B,EAAsC0B,IAAtC,EAA4CG,SAA5C,CAAP;AACD;;AAFDX","names":["Reducer","constructor","stream","reducer","initState","state","completed","Promise","resolve","reject","subscription","subscribe","next","evt","complete","unsubscribe","error","err","value","finished","exports","increment","sum","_","countStream","append","list","asArray","last","event","lastValue","undefined"],"sourceRoot":"","sources":["../src/reducer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}