{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NO_IL = exports.NO = exports.MemoryStream = exports.Stream = void 0;\n\nvar ponyfill_1 = require(\"symbol-observable/ponyfill\");\n\nvar globalthis_1 = require(\"globalthis\");\n\nvar $$observable = ponyfill_1.default(globalthis_1.getPolyfill());\nvar NO = {};\nexports.NO = NO;\n\nfunction noop() {}\n\nfunction cp(a) {\n  var l = a.length;\n  var b = Array(l);\n\n  for (var i = 0; i < l; ++i) b[i] = a[i];\n\n  return b;\n}\n\nfunction and(f1, f2) {\n  return function andFn(t) {\n    return f1(t) && f2(t);\n  };\n}\n\nfunction _try(c, t, u) {\n  try {\n    return c.f(t);\n  } catch (e) {\n    u._e(e);\n\n    return NO;\n  }\n}\n\nvar NO_IL = {\n  _n: noop,\n  _e: noop,\n  _c: noop\n};\nexports.NO_IL = NO_IL; // mutates the input\n\nfunction internalizeProducer(producer) {\n  producer._start = function _start(il) {\n    il.next = il._n;\n    il.error = il._e;\n    il.complete = il._c;\n    this.start(il);\n  };\n\n  producer._stop = producer.stop;\n}\n\nvar StreamSub =\n/** @class */\nfunction () {\n  function StreamSub(_stream, _listener) {\n    this._stream = _stream;\n    this._listener = _listener;\n  }\n\n  StreamSub.prototype.unsubscribe = function () {\n    this._stream._remove(this._listener);\n  };\n\n  return StreamSub;\n}();\n\nvar Observer =\n/** @class */\nfunction () {\n  function Observer(_listener) {\n    this._listener = _listener;\n  }\n\n  Observer.prototype.next = function (value) {\n    this._listener._n(value);\n  };\n\n  Observer.prototype.error = function (err) {\n    this._listener._e(err);\n  };\n\n  Observer.prototype.complete = function () {\n    this._listener._c();\n  };\n\n  return Observer;\n}();\n\nvar FromObservable =\n/** @class */\nfunction () {\n  function FromObservable(observable) {\n    this.type = 'fromObservable';\n    this.ins = observable;\n    this.active = false;\n  }\n\n  FromObservable.prototype._start = function (out) {\n    this.out = out;\n    this.active = true;\n    this._sub = this.ins.subscribe(new Observer(out));\n    if (!this.active) this._sub.unsubscribe();\n  };\n\n  FromObservable.prototype._stop = function () {\n    if (this._sub) this._sub.unsubscribe();\n    this.active = false;\n  };\n\n  return FromObservable;\n}();\n\nvar Merge =\n/** @class */\nfunction () {\n  function Merge(insArr) {\n    this.type = 'merge';\n    this.insArr = insArr;\n    this.out = NO;\n    this.ac = 0;\n  }\n\n  Merge.prototype._start = function (out) {\n    this.out = out;\n    var s = this.insArr;\n    var L = s.length;\n    this.ac = L;\n\n    for (var i = 0; i < L; i++) s[i]._add(this);\n  };\n\n  Merge.prototype._stop = function () {\n    var s = this.insArr;\n    var L = s.length;\n\n    for (var i = 0; i < L; i++) s[i]._remove(this);\n\n    this.out = NO;\n  };\n\n  Merge.prototype._n = function (t) {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._n(t);\n  };\n\n  Merge.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._e(err);\n  };\n\n  Merge.prototype._c = function () {\n    if (--this.ac <= 0) {\n      var u = this.out;\n      if (u === NO) return;\n\n      u._c();\n    }\n  };\n\n  return Merge;\n}();\n\nvar CombineListener =\n/** @class */\nfunction () {\n  function CombineListener(i, out, p) {\n    this.i = i;\n    this.out = out;\n    this.p = p;\n    p.ils.push(this);\n  }\n\n  CombineListener.prototype._n = function (t) {\n    var p = this.p,\n        out = this.out;\n    if (out === NO) return;\n\n    if (p.up(t, this.i)) {\n      var b = cp(p.vals);\n\n      out._n(b);\n    }\n  };\n\n  CombineListener.prototype._e = function (err) {\n    var out = this.out;\n    if (out === NO) return;\n\n    out._e(err);\n  };\n\n  CombineListener.prototype._c = function () {\n    var p = this.p;\n    if (p.out === NO) return;\n    if (--p.Nc === 0) p.out._c();\n  };\n\n  return CombineListener;\n}();\n\nvar Combine =\n/** @class */\nfunction () {\n  function Combine(insArr) {\n    this.type = 'combine';\n    this.insArr = insArr;\n    this.out = NO;\n    this.ils = [];\n    this.Nc = this.Nn = 0;\n    this.vals = [];\n  }\n\n  Combine.prototype.up = function (t, i) {\n    var v = this.vals[i];\n    var Nn = !this.Nn ? 0 : v === NO ? --this.Nn : this.Nn;\n    this.vals[i] = t;\n    return Nn === 0;\n  };\n\n  Combine.prototype._start = function (out) {\n    this.out = out;\n    var s = this.insArr;\n    var n = this.Nc = this.Nn = s.length;\n    var vals = this.vals = new Array(n);\n\n    if (n === 0) {\n      out._n([]);\n\n      out._c();\n    } else {\n      for (var i = 0; i < n; i++) {\n        vals[i] = NO;\n\n        s[i]._add(new CombineListener(i, out, this));\n      }\n    }\n  };\n\n  Combine.prototype._stop = function () {\n    var s = this.insArr;\n    var n = s.length;\n    var ils = this.ils;\n\n    for (var i = 0; i < n; i++) s[i]._remove(ils[i]);\n\n    this.out = NO;\n    this.ils = [];\n    this.vals = [];\n  };\n\n  return Combine;\n}();\n\nvar FromArray =\n/** @class */\nfunction () {\n  function FromArray(a) {\n    this.type = 'fromArray';\n    this.a = a;\n  }\n\n  FromArray.prototype._start = function (out) {\n    var a = this.a;\n\n    for (var i = 0, n = a.length; i < n; i++) out._n(a[i]);\n\n    out._c();\n  };\n\n  FromArray.prototype._stop = function () {};\n\n  return FromArray;\n}();\n\nvar FromPromise =\n/** @class */\nfunction () {\n  function FromPromise(p) {\n    this.type = 'fromPromise';\n    this.on = false;\n    this.p = p;\n  }\n\n  FromPromise.prototype._start = function (out) {\n    var prod = this;\n    this.on = true;\n    this.p.then(function (v) {\n      if (prod.on) {\n        out._n(v);\n\n        out._c();\n      }\n    }, function (e) {\n      out._e(e);\n    }).then(noop, function (err) {\n      setTimeout(function () {\n        throw err;\n      });\n    });\n  };\n\n  FromPromise.prototype._stop = function () {\n    this.on = false;\n  };\n\n  return FromPromise;\n}();\n\nvar Periodic =\n/** @class */\nfunction () {\n  function Periodic(period) {\n    this.type = 'periodic';\n    this.period = period;\n    this.intervalID = -1;\n    this.i = 0;\n  }\n\n  Periodic.prototype._start = function (out) {\n    var self = this;\n\n    function intervalHandler() {\n      out._n(self.i++);\n    }\n\n    this.intervalID = setInterval(intervalHandler, this.period);\n  };\n\n  Periodic.prototype._stop = function () {\n    if (this.intervalID !== -1) clearInterval(this.intervalID);\n    this.intervalID = -1;\n    this.i = 0;\n  };\n\n  return Periodic;\n}();\n\nvar Debug =\n/** @class */\nfunction () {\n  function Debug(ins, arg) {\n    this.type = 'debug';\n    this.ins = ins;\n    this.out = NO;\n    this.s = noop;\n    this.l = '';\n    if (typeof arg === 'string') this.l = arg;else if (typeof arg === 'function') this.s = arg;\n  }\n\n  Debug.prototype._start = function (out) {\n    this.out = out;\n\n    this.ins._add(this);\n  };\n\n  Debug.prototype._stop = function () {\n    this.ins._remove(this);\n\n    this.out = NO;\n  };\n\n  Debug.prototype._n = function (t) {\n    var u = this.out;\n    if (u === NO) return;\n    var s = this.s,\n        l = this.l;\n\n    if (s !== noop) {\n      try {\n        s(t);\n      } catch (e) {\n        u._e(e);\n      }\n    } else if (l) console.log(l + ':', t);else console.log(t);\n\n    u._n(t);\n  };\n\n  Debug.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._e(err);\n  };\n\n  Debug.prototype._c = function () {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._c();\n  };\n\n  return Debug;\n}();\n\nvar Drop =\n/** @class */\nfunction () {\n  function Drop(max, ins) {\n    this.type = 'drop';\n    this.ins = ins;\n    this.out = NO;\n    this.max = max;\n    this.dropped = 0;\n  }\n\n  Drop.prototype._start = function (out) {\n    this.out = out;\n    this.dropped = 0;\n\n    this.ins._add(this);\n  };\n\n  Drop.prototype._stop = function () {\n    this.ins._remove(this);\n\n    this.out = NO;\n  };\n\n  Drop.prototype._n = function (t) {\n    var u = this.out;\n    if (u === NO) return;\n    if (this.dropped++ >= this.max) u._n(t);\n  };\n\n  Drop.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._e(err);\n  };\n\n  Drop.prototype._c = function () {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._c();\n  };\n\n  return Drop;\n}();\n\nvar EndWhenListener =\n/** @class */\nfunction () {\n  function EndWhenListener(out, op) {\n    this.out = out;\n    this.op = op;\n  }\n\n  EndWhenListener.prototype._n = function () {\n    this.op.end();\n  };\n\n  EndWhenListener.prototype._e = function (err) {\n    this.out._e(err);\n  };\n\n  EndWhenListener.prototype._c = function () {\n    this.op.end();\n  };\n\n  return EndWhenListener;\n}();\n\nvar EndWhen =\n/** @class */\nfunction () {\n  function EndWhen(o, ins) {\n    this.type = 'endWhen';\n    this.ins = ins;\n    this.out = NO;\n    this.o = o;\n    this.oil = NO_IL;\n  }\n\n  EndWhen.prototype._start = function (out) {\n    this.out = out;\n\n    this.o._add(this.oil = new EndWhenListener(out, this));\n\n    this.ins._add(this);\n  };\n\n  EndWhen.prototype._stop = function () {\n    this.ins._remove(this);\n\n    this.o._remove(this.oil);\n\n    this.out = NO;\n    this.oil = NO_IL;\n  };\n\n  EndWhen.prototype.end = function () {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._c();\n  };\n\n  EndWhen.prototype._n = function (t) {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._n(t);\n  };\n\n  EndWhen.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._e(err);\n  };\n\n  EndWhen.prototype._c = function () {\n    this.end();\n  };\n\n  return EndWhen;\n}();\n\nvar Filter =\n/** @class */\nfunction () {\n  function Filter(passes, ins) {\n    this.type = 'filter';\n    this.ins = ins;\n    this.out = NO;\n    this.f = passes;\n  }\n\n  Filter.prototype._start = function (out) {\n    this.out = out;\n\n    this.ins._add(this);\n  };\n\n  Filter.prototype._stop = function () {\n    this.ins._remove(this);\n\n    this.out = NO;\n  };\n\n  Filter.prototype._n = function (t) {\n    var u = this.out;\n    if (u === NO) return;\n\n    var r = _try(this, t, u);\n\n    if (r === NO || !r) return;\n\n    u._n(t);\n  };\n\n  Filter.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._e(err);\n  };\n\n  Filter.prototype._c = function () {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._c();\n  };\n\n  return Filter;\n}();\n\nvar FlattenListener =\n/** @class */\nfunction () {\n  function FlattenListener(out, op) {\n    this.out = out;\n    this.op = op;\n  }\n\n  FlattenListener.prototype._n = function (t) {\n    this.out._n(t);\n  };\n\n  FlattenListener.prototype._e = function (err) {\n    this.out._e(err);\n  };\n\n  FlattenListener.prototype._c = function () {\n    this.op.inner = NO;\n    this.op.less();\n  };\n\n  return FlattenListener;\n}();\n\nvar Flatten =\n/** @class */\nfunction () {\n  function Flatten(ins) {\n    this.type = 'flatten';\n    this.ins = ins;\n    this.out = NO;\n    this.open = true;\n    this.inner = NO;\n    this.il = NO_IL;\n  }\n\n  Flatten.prototype._start = function (out) {\n    this.out = out;\n    this.open = true;\n    this.inner = NO;\n    this.il = NO_IL;\n\n    this.ins._add(this);\n  };\n\n  Flatten.prototype._stop = function () {\n    this.ins._remove(this);\n\n    if (this.inner !== NO) this.inner._remove(this.il);\n    this.out = NO;\n    this.open = true;\n    this.inner = NO;\n    this.il = NO_IL;\n  };\n\n  Flatten.prototype.less = function () {\n    var u = this.out;\n    if (u === NO) return;\n    if (!this.open && this.inner === NO) u._c();\n  };\n\n  Flatten.prototype._n = function (s) {\n    var u = this.out;\n    if (u === NO) return;\n\n    var _a = this,\n        inner = _a.inner,\n        il = _a.il;\n\n    if (inner !== NO && il !== NO_IL) inner._remove(il);\n\n    (this.inner = s)._add(this.il = new FlattenListener(u, this));\n  };\n\n  Flatten.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._e(err);\n  };\n\n  Flatten.prototype._c = function () {\n    this.open = false;\n    this.less();\n  };\n\n  return Flatten;\n}();\n\nvar Fold =\n/** @class */\nfunction () {\n  function Fold(f, seed, ins) {\n    var _this = this;\n\n    this.type = 'fold';\n    this.ins = ins;\n    this.out = NO;\n\n    this.f = function (t) {\n      return f(_this.acc, t);\n    };\n\n    this.acc = this.seed = seed;\n  }\n\n  Fold.prototype._start = function (out) {\n    this.out = out;\n    this.acc = this.seed;\n\n    out._n(this.acc);\n\n    this.ins._add(this);\n  };\n\n  Fold.prototype._stop = function () {\n    this.ins._remove(this);\n\n    this.out = NO;\n    this.acc = this.seed;\n  };\n\n  Fold.prototype._n = function (t) {\n    var u = this.out;\n    if (u === NO) return;\n\n    var r = _try(this, t, u);\n\n    if (r === NO) return;\n\n    u._n(this.acc = r);\n  };\n\n  Fold.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._e(err);\n  };\n\n  Fold.prototype._c = function () {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._c();\n  };\n\n  return Fold;\n}();\n\nvar Last =\n/** @class */\nfunction () {\n  function Last(ins) {\n    this.type = 'last';\n    this.ins = ins;\n    this.out = NO;\n    this.has = false;\n    this.val = NO;\n  }\n\n  Last.prototype._start = function (out) {\n    this.out = out;\n    this.has = false;\n\n    this.ins._add(this);\n  };\n\n  Last.prototype._stop = function () {\n    this.ins._remove(this);\n\n    this.out = NO;\n    this.val = NO;\n  };\n\n  Last.prototype._n = function (t) {\n    this.has = true;\n    this.val = t;\n  };\n\n  Last.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._e(err);\n  };\n\n  Last.prototype._c = function () {\n    var u = this.out;\n    if (u === NO) return;\n\n    if (this.has) {\n      u._n(this.val);\n\n      u._c();\n    } else u._e(new Error('last() failed because input stream completed'));\n  };\n\n  return Last;\n}();\n\nvar MapOp =\n/** @class */\nfunction () {\n  function MapOp(project, ins) {\n    this.type = 'map';\n    this.ins = ins;\n    this.out = NO;\n    this.f = project;\n  }\n\n  MapOp.prototype._start = function (out) {\n    this.out = out;\n\n    this.ins._add(this);\n  };\n\n  MapOp.prototype._stop = function () {\n    this.ins._remove(this);\n\n    this.out = NO;\n  };\n\n  MapOp.prototype._n = function (t) {\n    var u = this.out;\n    if (u === NO) return;\n\n    var r = _try(this, t, u);\n\n    if (r === NO) return;\n\n    u._n(r);\n  };\n\n  MapOp.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._e(err);\n  };\n\n  MapOp.prototype._c = function () {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._c();\n  };\n\n  return MapOp;\n}();\n\nvar Remember =\n/** @class */\nfunction () {\n  function Remember(ins) {\n    this.type = 'remember';\n    this.ins = ins;\n    this.out = NO;\n  }\n\n  Remember.prototype._start = function (out) {\n    this.out = out;\n\n    this.ins._add(out);\n  };\n\n  Remember.prototype._stop = function () {\n    this.ins._remove(this.out);\n\n    this.out = NO;\n  };\n\n  return Remember;\n}();\n\nvar ReplaceError =\n/** @class */\nfunction () {\n  function ReplaceError(replacer, ins) {\n    this.type = 'replaceError';\n    this.ins = ins;\n    this.out = NO;\n    this.f = replacer;\n  }\n\n  ReplaceError.prototype._start = function (out) {\n    this.out = out;\n\n    this.ins._add(this);\n  };\n\n  ReplaceError.prototype._stop = function () {\n    this.ins._remove(this);\n\n    this.out = NO;\n  };\n\n  ReplaceError.prototype._n = function (t) {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._n(t);\n  };\n\n  ReplaceError.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n\n    try {\n      this.ins._remove(this);\n\n      (this.ins = this.f(err))._add(this);\n    } catch (e) {\n      u._e(e);\n    }\n  };\n\n  ReplaceError.prototype._c = function () {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._c();\n  };\n\n  return ReplaceError;\n}();\n\nvar StartWith =\n/** @class */\nfunction () {\n  function StartWith(ins, val) {\n    this.type = 'startWith';\n    this.ins = ins;\n    this.out = NO;\n    this.val = val;\n  }\n\n  StartWith.prototype._start = function (out) {\n    this.out = out;\n\n    this.out._n(this.val);\n\n    this.ins._add(out);\n  };\n\n  StartWith.prototype._stop = function () {\n    this.ins._remove(this.out);\n\n    this.out = NO;\n  };\n\n  return StartWith;\n}();\n\nvar Take =\n/** @class */\nfunction () {\n  function Take(max, ins) {\n    this.type = 'take';\n    this.ins = ins;\n    this.out = NO;\n    this.max = max;\n    this.taken = 0;\n  }\n\n  Take.prototype._start = function (out) {\n    this.out = out;\n    this.taken = 0;\n    if (this.max <= 0) out._c();else this.ins._add(this);\n  };\n\n  Take.prototype._stop = function () {\n    this.ins._remove(this);\n\n    this.out = NO;\n  };\n\n  Take.prototype._n = function (t) {\n    var u = this.out;\n    if (u === NO) return;\n    var m = ++this.taken;\n    if (m < this.max) u._n(t);else if (m === this.max) {\n      u._n(t);\n\n      u._c();\n    }\n  };\n\n  Take.prototype._e = function (err) {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._e(err);\n  };\n\n  Take.prototype._c = function () {\n    var u = this.out;\n    if (u === NO) return;\n\n    u._c();\n  };\n\n  return Take;\n}();\n\nvar Stream =\n/** @class */\nfunction () {\n  function Stream(producer) {\n    this._prod = producer || NO;\n    this._ils = [];\n    this._stopID = NO;\n    this._dl = NO;\n    this._d = false;\n    this._target = null;\n    this._err = NO;\n  }\n\n  Stream.prototype._n = function (t) {\n    var a = this._ils;\n    var L = a.length;\n    if (this._d) this._dl._n(t);\n    if (L == 1) a[0]._n(t);else if (L == 0) return;else {\n      var b = cp(a);\n\n      for (var i = 0; i < L; i++) b[i]._n(t);\n    }\n  };\n\n  Stream.prototype._e = function (err) {\n    if (this._err !== NO) return;\n    this._err = err;\n    var a = this._ils;\n    var L = a.length;\n\n    this._x();\n\n    if (this._d) this._dl._e(err);\n    if (L == 1) a[0]._e(err);else if (L == 0) return;else {\n      var b = cp(a);\n\n      for (var i = 0; i < L; i++) b[i]._e(err);\n    }\n    if (!this._d && L == 0) throw this._err;\n  };\n\n  Stream.prototype._c = function () {\n    var a = this._ils;\n    var L = a.length;\n\n    this._x();\n\n    if (this._d) this._dl._c();\n    if (L == 1) a[0]._c();else if (L == 0) return;else {\n      var b = cp(a);\n\n      for (var i = 0; i < L; i++) b[i]._c();\n    }\n  };\n\n  Stream.prototype._x = function () {\n    if (this._ils.length === 0) return;\n    if (this._prod !== NO) this._prod._stop();\n    this._err = NO;\n    this._ils = [];\n  };\n\n  Stream.prototype._stopNow = function () {\n    // WARNING: code that calls this method should\n    // first check if this._prod is valid (not `NO`)\n    this._prod._stop();\n\n    this._err = NO;\n    this._stopID = NO;\n  };\n\n  Stream.prototype._add = function (il) {\n    var ta = this._target;\n    if (ta) return ta._add(il);\n    var a = this._ils;\n    a.push(il);\n    if (a.length > 1) return;\n\n    if (this._stopID !== NO) {\n      clearTimeout(this._stopID);\n      this._stopID = NO;\n    } else {\n      var p = this._prod;\n      if (p !== NO) p._start(this);\n    }\n  };\n\n  Stream.prototype._remove = function (il) {\n    var _this = this;\n\n    var ta = this._target;\n    if (ta) return ta._remove(il);\n    var a = this._ils;\n    var i = a.indexOf(il);\n\n    if (i > -1) {\n      a.splice(i, 1);\n\n      if (this._prod !== NO && a.length <= 0) {\n        this._err = NO;\n        this._stopID = setTimeout(function () {\n          return _this._stopNow();\n        });\n      } else if (a.length === 1) {\n        this._pruneCycles();\n      }\n    }\n  }; // If all paths stemming from `this` stream eventually end at `this`\n  // stream, then we remove the single listener of `this` stream, to\n  // force it to end its execution and dispose resources. This method\n  // assumes as a precondition that this._ils has just one listener.\n\n\n  Stream.prototype._pruneCycles = function () {\n    if (this._hasNoSinks(this, [])) this._remove(this._ils[0]);\n  }; // Checks whether *there is no* path starting from `x` that leads to an end\n  // listener (sink) in the stream graph, following edges A->B where B is a\n  // listener of A. This means these paths constitute a cycle somehow. Is given\n  // a trace of all visited nodes so far.\n\n\n  Stream.prototype._hasNoSinks = function (x, trace) {\n    if (trace.indexOf(x) !== -1) return true;else if (x.out === this) return true;else if (x.out && x.out !== NO) return this._hasNoSinks(x.out, trace.concat(x));else if (x._ils) {\n      for (var i = 0, N = x._ils.length; i < N; i++) if (!this._hasNoSinks(x._ils[i], trace.concat(x))) return false;\n\n      return true;\n    } else return false;\n  };\n\n  Stream.prototype.ctor = function () {\n    return this instanceof MemoryStream ? MemoryStream : Stream;\n  };\n  /**\n   * Adds a Listener to the Stream.\n   *\n   * @param {Listener} listener\n   */\n\n\n  Stream.prototype.addListener = function (listener) {\n    listener._n = listener.next || noop;\n    listener._e = listener.error || noop;\n    listener._c = listener.complete || noop;\n\n    this._add(listener);\n  };\n  /**\n   * Removes a Listener from the Stream, assuming the Listener was added to it.\n   *\n   * @param {Listener<T>} listener\n   */\n\n\n  Stream.prototype.removeListener = function (listener) {\n    this._remove(listener);\n  };\n  /**\n   * Adds a Listener to the Stream returning a Subscription to remove that\n   * listener.\n   *\n   * @param {Listener} listener\n   * @returns {Subscription}\n   */\n\n\n  Stream.prototype.subscribe = function (listener) {\n    this.addListener(listener);\n    return new StreamSub(this, listener);\n  };\n  /**\n   * Add interop between most.js and RxJS 5\n   *\n   * @returns {Stream}\n   */\n\n\n  Stream.prototype[$$observable] = function () {\n    return this;\n  };\n  /**\n   * Creates a new Stream given a Producer.\n   *\n   * @factory true\n   * @param {Producer} producer An optional Producer that dictates how to\n   * start, generate events, and stop the Stream.\n   * @return {Stream}\n   */\n\n\n  Stream.create = function (producer) {\n    if (producer) {\n      if (typeof producer.start !== 'function' || typeof producer.stop !== 'function') throw new Error('producer requires both start and stop functions');\n      internalizeProducer(producer); // mutates the input\n    }\n\n    return new Stream(producer);\n  };\n  /**\n   * Creates a new MemoryStream given a Producer.\n   *\n   * @factory true\n   * @param {Producer} producer An optional Producer that dictates how to\n   * start, generate events, and stop the Stream.\n   * @return {MemoryStream}\n   */\n\n\n  Stream.createWithMemory = function (producer) {\n    if (producer) internalizeProducer(producer); // mutates the input\n\n    return new MemoryStream(producer);\n  };\n  /**\n   * Creates a Stream that does nothing when started. It never emits any event.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   *          never\n   * -----------------------\n   * ```\n   *\n   * @factory true\n   * @return {Stream}\n   */\n\n\n  Stream.never = function () {\n    return new Stream({\n      _start: noop,\n      _stop: noop\n    });\n  };\n  /**\n   * Creates a Stream that immediately emits the \"complete\" notification when\n   * started, and that's it.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * empty\n   * -|\n   * ```\n   *\n   * @factory true\n   * @return {Stream}\n   */\n\n\n  Stream.empty = function () {\n    return new Stream({\n      _start: function (il) {\n        il._c();\n      },\n      _stop: noop\n    });\n  };\n  /**\n   * Creates a Stream that immediately emits an \"error\" notification with the\n   * value you passed as the `error` argument when the stream starts, and that's\n   * it.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * throw(X)\n   * -X\n   * ```\n   *\n   * @factory true\n   * @param error The error event to emit on the created stream.\n   * @return {Stream}\n   */\n\n\n  Stream.throw = function (error) {\n    return new Stream({\n      _start: function (il) {\n        il._e(error);\n      },\n      _stop: noop\n    });\n  };\n  /**\n   * Creates a stream from an Array, Promise, or an Observable.\n   *\n   * @factory true\n   * @param {Array|PromiseLike|Observable} input The input to make a stream from.\n   * @return {Stream}\n   */\n\n\n  Stream.from = function (input) {\n    if (typeof input[$$observable] === 'function') return Stream.fromObservable(input);else if (typeof input.then === 'function') return Stream.fromPromise(input);else if (Array.isArray(input)) return Stream.fromArray(input);\n    throw new TypeError(\"Type of input to from() must be an Array, Promise, or Observable\");\n  };\n  /**\n   * Creates a Stream that immediately emits the arguments that you give to\n   * *of*, then completes.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * of(1,2,3)\n   * 123|\n   * ```\n   *\n   * @factory true\n   * @param a The first value you want to emit as an event on the stream.\n   * @param b The second value you want to emit as an event on the stream. One\n   * or more of these values may be given as arguments.\n   * @return {Stream}\n   */\n\n\n  Stream.of = function () {\n    var items = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      items[_i] = arguments[_i];\n    }\n\n    return Stream.fromArray(items);\n  };\n  /**\n   * Converts an array to a stream. The returned stream will emit synchronously\n   * all the items in the array, and then complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * fromArray([1,2,3])\n   * 123|\n   * ```\n   *\n   * @factory true\n   * @param {Array} array The array to be converted as a stream.\n   * @return {Stream}\n   */\n\n\n  Stream.fromArray = function (array) {\n    return new Stream(new FromArray(array));\n  };\n  /**\n   * Converts a promise to a stream. The returned stream will emit the resolved\n   * value of the promise, and then complete. However, if the promise is\n   * rejected, the stream will emit the corresponding error.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * fromPromise( ----42 )\n   * -----------------42|\n   * ```\n   *\n   * @factory true\n   * @param {PromiseLike} promise The promise to be converted as a stream.\n   * @return {Stream}\n   */\n\n\n  Stream.fromPromise = function (promise) {\n    return new Stream(new FromPromise(promise));\n  };\n  /**\n   * Converts an Observable into a Stream.\n   *\n   * @factory true\n   * @param {any} observable The observable to be converted as a stream.\n   * @return {Stream}\n   */\n\n\n  Stream.fromObservable = function (obs) {\n    if (obs.endWhen !== undefined) return obs;\n    var o = typeof obs[$$observable] === 'function' ? obs[$$observable]() : obs;\n    return new Stream(new FromObservable(o));\n  };\n  /**\n   * Creates a stream that periodically emits incremental numbers, every\n   * `period` milliseconds.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   *     periodic(1000)\n   * ---0---1---2---3---4---...\n   * ```\n   *\n   * @factory true\n   * @param {number} period The interval in milliseconds to use as a rate of\n   * emission.\n   * @return {Stream}\n   */\n\n\n  Stream.periodic = function (period) {\n    return new Stream(new Periodic(period));\n  };\n\n  Stream.prototype._map = function (project) {\n    return new (this.ctor())(new MapOp(project, this));\n  };\n  /**\n   * Transforms each event from the input Stream through a `project` function,\n   * to get a Stream that emits those transformed events.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---3--5-----7------\n   *    map(i => i * 10)\n   * --10--30-50----70-----\n   * ```\n   *\n   * @param {Function} project A function of type `(t: T) => U` that takes event\n   * `t` of type `T` from the input Stream and produces an event of type `U`, to\n   * be emitted on the output Stream.\n   * @return {Stream}\n   */\n\n\n  Stream.prototype.map = function (project) {\n    return this._map(project);\n  };\n  /**\n   * It's like `map`, but transforms each input event to always the same\n   * constant value on the output Stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---3--5-----7-----\n   *       mapTo(10)\n   * --10--10-10----10----\n   * ```\n   *\n   * @param projectedValue A value to emit on the output Stream whenever the\n   * input Stream emits any value.\n   * @return {Stream}\n   */\n\n\n  Stream.prototype.mapTo = function (projectedValue) {\n    var s = this.map(function () {\n      return projectedValue;\n    });\n    var op = s._prod;\n    op.type = 'mapTo';\n    return s;\n  };\n  /**\n   * Only allows events that pass the test given by the `passes` argument.\n   *\n   * Each event from the input stream is given to the `passes` function. If the\n   * function returns `true`, the event is forwarded to the output stream,\n   * otherwise it is ignored and not forwarded.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---2--3-----4-----5---6--7-8--\n   *     filter(i => i % 2 === 0)\n   * ------2--------4---------6----8--\n   * ```\n   *\n   * @param {Function} passes A function of type `(t: T) => boolean` that takes\n   * an event from the input stream and checks if it passes, by returning a\n   * boolean.\n   * @return {Stream}\n   */\n\n\n  Stream.prototype.filter = function (passes) {\n    var p = this._prod;\n    if (p instanceof Filter) return new Stream(new Filter(and(p.f, passes), p.ins));\n    return new Stream(new Filter(passes, this));\n  };\n  /**\n   * Lets the first `amount` many events from the input stream pass to the\n   * output stream, then makes the output stream complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c----d---e--\n   *    take(3)\n   * --a---b--c|\n   * ```\n   *\n   * @param {number} amount How many events to allow from the input stream\n   * before completing the output stream.\n   * @return {Stream}\n   */\n\n\n  Stream.prototype.take = function (amount) {\n    return new (this.ctor())(new Take(amount, this));\n  };\n  /**\n   * Ignores the first `amount` many events from the input stream, and then\n   * after that starts forwarding events from the input stream to the output\n   * stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c----d---e--\n   *       drop(3)\n   * --------------d---e--\n   * ```\n   *\n   * @param {number} amount How many events to ignore from the input stream\n   * before forwarding all events from the input stream to the output stream.\n   * @return {Stream}\n   */\n\n\n  Stream.prototype.drop = function (amount) {\n    return new Stream(new Drop(amount, this));\n  };\n  /**\n   * When the input stream completes, the output stream will emit the last event\n   * emitted by the input stream, and then will also complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c--d----|\n   *       last()\n   * -----------------d|\n   * ```\n   *\n   * @return {Stream}\n   */\n\n\n  Stream.prototype.last = function () {\n    return new Stream(new Last(this));\n  };\n  /**\n   * Prepends the given `initial` value to the sequence of events emitted by the\n   * input stream. The returned stream is a MemoryStream, which means it is\n   * already `remember()`'d.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ---1---2-----3---\n   *   startWith(0)\n   * 0--1---2-----3---\n   * ```\n   *\n   * @param initial The value or event to prepend.\n   * @return {MemoryStream}\n   */\n\n\n  Stream.prototype.startWith = function (initial) {\n    return new MemoryStream(new StartWith(this, initial));\n  };\n  /**\n   * Uses another stream to determine when to complete the current stream.\n   *\n   * When the given `other` stream emits an event or completes, the output\n   * stream will complete. Before that happens, the output stream will behaves\n   * like the input stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ---1---2-----3--4----5----6---\n   *   endWhen( --------a--b--| )\n   * ---1---2-----3--4--|\n   * ```\n   *\n   * @param other Some other stream that is used to know when should the output\n   * stream of this operator complete.\n   * @return {Stream}\n   */\n\n\n  Stream.prototype.endWhen = function (other) {\n    return new (this.ctor())(new EndWhen(other, this));\n  };\n  /**\n   * \"Folds\" the stream onto itself.\n   *\n   * Combines events from the past throughout\n   * the entire execution of the input stream, allowing you to accumulate them\n   * together. It's essentially like `Array.prototype.reduce`. The returned\n   * stream is a MemoryStream, which means it is already `remember()`'d.\n   *\n   * The output stream starts by emitting the `seed` which you give as argument.\n   * Then, when an event happens on the input stream, it is combined with that\n   * seed value through the `accumulate` function, and the output value is\n   * emitted on the output stream. `fold` remembers that output value as `acc`\n   * (\"accumulator\"), and then when a new input event `t` happens, `acc` will be\n   * combined with that to produce the new `acc` and so forth.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ------1-----1--2----1----1------\n   *   fold((acc, x) => acc + x, 3)\n   * 3-----4-----5--7----8----9------\n   * ```\n   *\n   * @param {Function} accumulate A function of type `(acc: R, t: T) => R` that\n   * takes the previous accumulated value `acc` and the incoming event from the\n   * input stream and produces the new accumulated value.\n   * @param seed The initial accumulated value, of type `R`.\n   * @return {MemoryStream}\n   */\n\n\n  Stream.prototype.fold = function (accumulate, seed) {\n    return new MemoryStream(new Fold(accumulate, seed, this));\n  };\n  /**\n   * Replaces an error with another stream.\n   *\n   * When (and if) an error happens on the input stream, instead of forwarding\n   * that error to the output stream, *replaceError* will call the `replace`\n   * function which returns the stream that the output stream will replicate.\n   * And, in case that new stream also emits an error, `replace` will be called\n   * again to get another stream to start replicating.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---2-----3--4-----X\n   *   replaceError( () => --10--| )\n   * --1---2-----3--4--------10--|\n   * ```\n   *\n   * @param {Function} replace A function of type `(err) => Stream` that takes\n   * the error that occurred on the input stream or on the previous replacement\n   * stream and returns a new stream. The output stream will behave like the\n   * stream that this function returns.\n   * @return {Stream}\n   */\n\n\n  Stream.prototype.replaceError = function (replace) {\n    return new (this.ctor())(new ReplaceError(replace, this));\n  };\n  /**\n   * Flattens a \"stream of streams\", handling only one nested stream at a time\n   * (no concurrency).\n   *\n   * If the input stream is a stream that emits streams, then this operator will\n   * return an output stream which is a flat stream: emits regular events. The\n   * flattening happens without concurrency. It works like this: when the input\n   * stream emits a nested stream, *flatten* will start imitating that nested\n   * one. However, as soon as the next nested stream is emitted on the input\n   * stream, *flatten* will forget the previous nested one it was imitating, and\n   * will start imitating the new nested one.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --+--------+---------------\n   *   \\        \\\n   *    \\       ----1----2---3--\n   *    --a--b----c----d--------\n   *           flatten\n   * -----a--b------1----2---3--\n   * ```\n   *\n   * @return {Stream}\n   */\n\n\n  Stream.prototype.flatten = function () {\n    return new Stream(new Flatten(this));\n  };\n  /**\n   * Passes the input stream to a custom operator, to produce an output stream.\n   *\n   * *compose* is a handy way of using an existing function in a chained style.\n   * Instead of writing `outStream = f(inStream)` you can write\n   * `outStream = inStream.compose(f)`.\n   *\n   * @param {function} operator A function that takes a stream as input and\n   * returns a stream as well.\n   * @return {Stream}\n   */\n\n\n  Stream.prototype.compose = function (operator) {\n    return operator(this);\n  };\n  /**\n   * Returns an output stream that behaves like the input stream, but also\n   * remembers the most recent event that happens on the input stream, so that a\n   * newly added listener will immediately receive that memorised event.\n   *\n   * @return {MemoryStream}\n   */\n\n\n  Stream.prototype.remember = function () {\n    return new MemoryStream(new Remember(this));\n  };\n  /**\n   * Returns an output stream that identically behaves like the input stream,\n   * but also runs a `spy` function for each event, to help you debug your app.\n   *\n   * *debug* takes a `spy` function as argument, and runs that for each event\n   * happening on the input stream. If you don't provide the `spy` argument,\n   * then *debug* will just `console.log` each event. This helps you to\n   * understand the flow of events through some operator chain.\n   *\n   * Please note that if the output stream has no listeners, then it will not\n   * start, which means `spy` will never run because no actual event happens in\n   * that case.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3-----4--\n   *         debug\n   * --1----2-----3-----4--\n   * ```\n   *\n   * @param {function} labelOrSpy A string to use as the label when printing\n   * debug information on the console, or a 'spy' function that takes an event\n   * as argument, and does not need to return anything.\n   * @return {Stream}\n   */\n\n\n  Stream.prototype.debug = function (labelOrSpy) {\n    return new (this.ctor())(new Debug(this, labelOrSpy));\n  };\n  /**\n   * *imitate* changes this current Stream to emit the same events that the\n   * `other` given Stream does. This method returns nothing.\n   *\n   * This method exists to allow one thing: **circular dependency of streams**.\n   * For instance, let's imagine that for some reason you need to create a\n   * circular dependency where stream `first$` depends on stream `second$`\n   * which in turn depends on `first$`:\n   *\n   * <!-- skip-example -->\n   * ```js\n   * import delay from 'xstream/extra/delay'\n   *\n   * var first$ = second$.map(x => x * 10).take(3);\n   * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));\n   * ```\n   *\n   * However, that is invalid JavaScript, because `second$` is undefined\n   * on the first line. This is how *imitate* can help solve it:\n   *\n   * ```js\n   * import delay from 'xstream/extra/delay'\n   *\n   * var secondProxy$ = xs.create();\n   * var first$ = secondProxy$.map(x => x * 10).take(3);\n   * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));\n   * secondProxy$.imitate(second$);\n   * ```\n   *\n   * We create `secondProxy$` before the others, so it can be used in the\n   * declaration of `first$`. Then, after both `first$` and `second$` are\n   * defined, we hook `secondProxy$` with `second$` with `imitate()` to tell\n   * that they are \"the same\". `imitate` will not trigger the start of any\n   * stream, it just binds `secondProxy$` and `second$` together.\n   *\n   * The following is an example where `imitate()` is important in Cycle.js\n   * applications. A parent component contains some child components. A child\n   * has an action stream which is given to the parent to define its state:\n   *\n   * <!-- skip-example -->\n   * ```js\n   * const childActionProxy$ = xs.create();\n   * const parent = Parent({...sources, childAction$: childActionProxy$});\n   * const childAction$ = parent.state$.map(s => s.child.action$).flatten();\n   * childActionProxy$.imitate(childAction$);\n   * ```\n   *\n   * Note, though, that **`imitate()` does not support MemoryStreams**. If we\n   * would attempt to imitate a MemoryStream in a circular dependency, we would\n   * either get a race condition (where the symptom would be \"nothing happens\")\n   * or an infinite cyclic emission of values. It's useful to think about\n   * MemoryStreams as cells in a spreadsheet. It doesn't make any sense to\n   * define a spreadsheet cell `A1` with a formula that depends on `B1` and\n   * cell `B1` defined with a formula that depends on `A1`.\n   *\n   * If you find yourself wanting to use `imitate()` with a\n   * MemoryStream, you should rework your code around `imitate()` to use a\n   * Stream instead. Look for the stream in the circular dependency that\n   * represents an event stream, and that would be a candidate for creating a\n   * proxy Stream which then imitates the target Stream.\n   *\n   * @param {Stream} target The other stream to imitate on the current one. Must\n   * not be a MemoryStream.\n   */\n\n\n  Stream.prototype.imitate = function (target) {\n    if (target instanceof MemoryStream) throw new Error('A MemoryStream was given to imitate(), but it only ' + 'supports a Stream. Read more about this restriction here: ' + 'https://github.com/staltz/xstream#faq');\n    this._target = target;\n\n    for (var ils = this._ils, N = ils.length, i = 0; i < N; i++) target._add(ils[i]);\n\n    this._ils = [];\n  };\n  /**\n   * Forces the Stream to emit the given value to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   *\n   * @param value The \"next\" value you want to broadcast to all listeners of\n   * this Stream.\n   */\n\n\n  Stream.prototype.shamefullySendNext = function (value) {\n    this._n(value);\n  };\n  /**\n   * Forces the Stream to emit the given error to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   *\n   * @param {any} error The error you want to broadcast to all the listeners of\n   * this Stream.\n   */\n\n\n  Stream.prototype.shamefullySendError = function (error) {\n    this._e(error);\n  };\n  /**\n   * Forces the Stream to emit the \"completed\" event to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   */\n\n\n  Stream.prototype.shamefullySendComplete = function () {\n    this._c();\n  };\n  /**\n   * Adds a \"debug\" listener to the stream. There can only be one debug\n   * listener, that's why this is 'setDebugListener'. To remove the debug\n   * listener, just call setDebugListener(null).\n   *\n   * A debug listener is like any other listener. The only difference is that a\n   * debug listener is \"stealthy\": its presence/absence does not trigger the\n   * start/stop of the stream (or the producer inside the stream). This is\n   * useful so you can inspect what is going on without changing the behavior\n   * of the program. If you have an idle stream and you add a normal listener to\n   * it, the stream will start executing. But if you set a debug listener on an\n   * idle stream, it won't start executing (not until the first normal listener\n   * is added).\n   *\n   * As the name indicates, we don't recommend using this method to build app\n   * logic. In fact, in most cases the debug operator works just fine. Only use\n   * this one if you know what you're doing.\n   *\n   * @param {Listener<T>} listener\n   */\n\n\n  Stream.prototype.setDebugListener = function (listener) {\n    if (!listener) {\n      this._d = false;\n      this._dl = NO;\n    } else {\n      this._d = true;\n      listener._n = listener.next || noop;\n      listener._e = listener.error || noop;\n      listener._c = listener.complete || noop;\n      this._dl = listener;\n    }\n  };\n  /**\n   * Blends multiple streams together, emitting events from all of them\n   * concurrently.\n   *\n   * *merge* takes multiple streams as arguments, and creates a stream that\n   * behaves like each of the argument streams, in parallel.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3--------4---\n   * ----a-----b----c---d------\n   *            merge\n   * --1-a--2--b--3-c---d--4---\n   * ```\n   *\n   * @factory true\n   * @param {Stream} stream1 A stream to merge together with other streams.\n   * @param {Stream} stream2 A stream to merge together with other streams. Two\n   * or more streams may be given as arguments.\n   * @return {Stream}\n   */\n\n\n  Stream.merge = function merge() {\n    var streams = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      streams[_i] = arguments[_i];\n    }\n\n    return new Stream(new Merge(streams));\n  };\n  /**\n   * Combines multiple input streams together to return a stream whose events\n   * are arrays that collect the latest events from each input stream.\n   *\n   * *combine* internally remembers the most recent event from each of the input\n   * streams. When any of the input streams emits an event, that event together\n   * with all the other saved events are combined into an array. That array will\n   * be emitted on the output stream. It's essentially a way of joining together\n   * the events from multiple streams.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3--------4---\n   * ----a-----b-----c--d------\n   *          combine\n   * ----1a-2a-2b-3b-3c-3d-4d--\n   * ```\n   *\n   * @factory true\n   * @param {Stream} stream1 A stream to combine together with other streams.\n   * @param {Stream} stream2 A stream to combine together with other streams.\n   * Multiple streams, not just two, may be given as arguments.\n   * @return {Stream}\n   */\n\n\n  Stream.combine = function combine() {\n    var streams = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      streams[_i] = arguments[_i];\n    }\n\n    return new Stream(new Combine(streams));\n  };\n\n  return Stream;\n}();\n\nexports.Stream = Stream;\n\nvar MemoryStream =\n/** @class */\nfunction (_super) {\n  __extends(MemoryStream, _super);\n\n  function MemoryStream(producer) {\n    var _this = _super.call(this, producer) || this;\n\n    _this._has = false;\n    return _this;\n  }\n\n  MemoryStream.prototype._n = function (x) {\n    this._v = x;\n    this._has = true;\n\n    _super.prototype._n.call(this, x);\n  };\n\n  MemoryStream.prototype._add = function (il) {\n    var ta = this._target;\n    if (ta) return ta._add(il);\n    var a = this._ils;\n    a.push(il);\n\n    if (a.length > 1) {\n      if (this._has) il._n(this._v);\n      return;\n    }\n\n    if (this._stopID !== NO) {\n      if (this._has) il._n(this._v);\n      clearTimeout(this._stopID);\n      this._stopID = NO;\n    } else if (this._has) il._n(this._v);else {\n      var p = this._prod;\n      if (p !== NO) p._start(this);\n    }\n  };\n\n  MemoryStream.prototype._stopNow = function () {\n    this._has = false;\n\n    _super.prototype._stopNow.call(this);\n  };\n\n  MemoryStream.prototype._x = function () {\n    this._has = false;\n\n    _super.prototype._x.call(this);\n  };\n\n  MemoryStream.prototype.map = function (project) {\n    return this._map(project);\n  };\n\n  MemoryStream.prototype.mapTo = function (projectedValue) {\n    return _super.prototype.mapTo.call(this, projectedValue);\n  };\n\n  MemoryStream.prototype.take = function (amount) {\n    return _super.prototype.take.call(this, amount);\n  };\n\n  MemoryStream.prototype.endWhen = function (other) {\n    return _super.prototype.endWhen.call(this, other);\n  };\n\n  MemoryStream.prototype.replaceError = function (replace) {\n    return _super.prototype.replaceError.call(this, replace);\n  };\n\n  MemoryStream.prototype.remember = function () {\n    return this;\n  };\n\n  MemoryStream.prototype.debug = function (labelOrSpy) {\n    return _super.prototype.debug.call(this, labelOrSpy);\n  };\n\n  return MemoryStream;\n}(Stream);\n\nexports.MemoryStream = MemoryStream;\nvar xs = Stream;\nexports.default = xs;","map":{"version":3,"mappings":"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","names":["$$observable","ponyfill_1","globalthis_1","NO","exports","noop","cp","a","l","length","b","Array","i","and","f1","f2","andFn","t","_try","c","u","f","e","_e","NO_IL","_n","_c","internalizeProducer","producer","_start","il","next","error","complete","start","_stop","stop","_stream","_listener","StreamSub","_remove","Observer","value","err","observable","ins","active","FromObservable","out","_sub","subscribe","unsubscribe","insArr","ac","Merge","s","L","_add","p","ils","push","CombineListener","up","vals","Nc","Nn","Combine","v","n","FromArray","on","FromPromise","prod","then","setTimeout","period","intervalID","Periodic","self","intervalHandler","setInterval","clearInterval","arg","Debug","console","log","max","dropped","Drop","op","EndWhenListener","end","o","oil","EndWhen","passes","Filter","r","FlattenListener","inner","less","open","Flatten","seed","_this","acc","Fold","has","val","Last","Error","project","MapOp","Remember","replacer","ReplaceError","StartWith","taken","Take","m","_prod","_ils","_stopID","_dl","_d","_target","_err","Stream","_x","ta","clearTimeout","indexOf","splice","_stopNow","_pruneCycles","_hasNoSinks","x","trace","concat","N","MemoryStream","listener","addListener","input","fromObservable","fromPromise","isArray","fromArray","TypeError","items","array","promise","obs","endWhen","undefined","ctor","_map","projectedValue","map","type","amount","initial","other","accumulate","replace","operator","labelOrSpy","target","merge","streams","combine","__extends","_super","_v","_has","call","mapTo","take","replaceError","debug","xs"],"sourceRoot":"","sources":["src/index.ts"],"sourcesContent":["import ponyfillSymbolObservable from 'symbol-observable/ponyfill';\nimport { getPolyfill as getGlobalThis } from 'globalthis';\n\nconst $$observable = ponyfillSymbolObservable(getGlobalThis());\n\nconst NO = {};\nfunction noop() { }\n\nfunction cp<T>(a: Array<T>): Array<T> {\n  const l = a.length;\n  const b = Array(l);\n  for (let i = 0; i < l; ++i) b[i] = a[i];\n  return b;\n}\n\nfunction and<T>(f1: (t: T) => boolean, f2: (t: T) => boolean): (t: T) => boolean {\n  return function andFn(t: T): boolean {\n    return f1(t) && f2(t);\n  };\n}\n\ninterface FContainer<T, R> {\n  f(t: T): R;\n}\n\nfunction _try<T, R>(c: FContainer<T, R>, t: T, u: Stream<any>): R | {} {\n  try {\n    return c.f(t);\n  } catch (e) {\n    u._e(e);\n    return NO;\n  }\n}\n\nexport interface InternalListener<T> {\n  _n: (v: T) => void;\n  _e: (err: any) => void;\n  _c: () => void;\n}\n\nconst NO_IL: InternalListener<any> = {\n  _n: noop,\n  _e: noop,\n  _c: noop,\n};\n\nexport interface InternalProducer<T> {\n  _start(listener: InternalListener<T>): void;\n  _stop: () => void;\n}\n\nexport interface OutSender<T> {\n  out: Stream<T>;\n}\n\nexport interface Operator<T, R> extends InternalProducer<R>, InternalListener<T>, OutSender<R> {\n  type: string;\n  ins: Stream<T>;\n  _start(out: Stream<R>): void;\n}\n\nexport interface Aggregator<T, U> extends InternalProducer<U>, OutSender<U> {\n  type: string;\n  insArr: Array<Stream<T>>;\n  _start(out: Stream<U>): void;\n}\n\nexport interface Producer<T> {\n  start: (listener: Listener<T>) => void;\n  stop: () => void;\n}\n\nexport interface Listener<T> {\n  next: (x: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport interface Subscription {\n  unsubscribe(): void;\n}\n\nexport interface Observable<T> {\n  subscribe(listener: Listener<T>): Subscription;\n}\n\n// mutates the input\nfunction internalizeProducer<T>(producer: Producer<T> & Partial<InternalProducer<T>>) {\n  producer._start = function _start(il: InternalListener<T> & Partial<Listener<T>>) {\n    il.next = il._n;\n    il.error = il._e;\n    il.complete = il._c;\n    this.start(il as Listener<T>);\n  };\n  producer._stop = producer.stop;\n}\n\nclass StreamSub<T> implements Subscription {\n  constructor(private _stream: Stream<T>, private _listener: InternalListener<T>) { }\n\n  unsubscribe(): void {\n    this._stream._remove(this._listener);\n  }\n}\n\nclass Observer<T> implements Listener<T> {\n  constructor(private _listener: InternalListener<T>) { }\n\n  next(value: T) {\n    this._listener._n(value);\n  }\n\n  error(err: any) {\n    this._listener._e(err);\n  }\n\n  complete() {\n    this._listener._c();\n  }\n}\n\nclass FromObservable<T> implements InternalProducer<T> {\n  public type = 'fromObservable';\n  public ins: Observable<T>;\n  public out?: Stream<T>;\n  private active: boolean;\n  private _sub: Subscription | undefined;\n\n  constructor(observable: Observable<T>) {\n    this.ins = observable;\n    this.active = false;\n  }\n\n  _start(out: Stream<T>) {\n    this.out = out;\n    this.active = true;\n    this._sub = this.ins.subscribe(new Observer(out));\n    if (!this.active) this._sub.unsubscribe();\n  }\n\n  _stop() {\n    if (this._sub) this._sub.unsubscribe();\n    this.active = false;\n  }\n}\n\nexport interface MergeSignature {\n  (): Stream<any>;\n  <T1>(s1: Stream<T1>): Stream<T1>;\n  <T1, T2>(\n    s1: Stream<T1>,\n    s2: Stream<T2>): Stream<T1 | T2>;\n  <T1, T2, T3>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>): Stream<T1 | T2 | T3>;\n  <T1, T2, T3, T4>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>): Stream<T1 | T2 | T3 | T4>;\n  <T1, T2, T3, T4, T5>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>): Stream<T1 | T2 | T3 | T4 | T5>;\n  <T1, T2, T3, T4, T5, T6>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>): Stream<T1 | T2 | T3 | T4 | T5 | T6>;\n  <T1, T2, T3, T4, T5, T6, T7>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7>;\n  <T1, T2, T3, T4, T5, T6, T7, T8>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>,\n    s10: Stream<T10>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10>;\n  <T>(...stream: Array<Stream<T>>): Stream<T>;\n}\n\nclass Merge<T> implements Aggregator<T, T>, InternalListener<T> {\n  public type = 'merge';\n  public insArr: Array<Stream<T>>;\n  public out: Stream<T>;\n  private ac: number; // ac is activeCount\n\n  constructor(insArr: Array<Stream<T>>) {\n    this.insArr = insArr;\n    this.out = NO as Stream<T>;\n    this.ac = 0;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    const s = this.insArr;\n    const L = s.length;\n    this.ac = L;\n    for (let i = 0; i < L; i++) s[i]._add(this);\n  }\n\n  _stop(): void {\n    const s = this.insArr;\n    const L = s.length;\n    for (let i = 0; i < L; i++) s[i]._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    if (--this.ac <= 0) {\n      const u = this.out;\n      if (u === NO) return;\n      u._c();\n    }\n  }\n}\n\nexport interface CombineSignature {\n  (): Stream<Array<any>>;\n  <T1>(s1: Stream<T1>): Stream<[T1]>;\n  <T1, T2>(\n    s1: Stream<T1>,\n    s2: Stream<T2>): Stream<[T1, T2]>;\n  <T1, T2, T3>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>): Stream<[T1, T2, T3]>;\n  <T1, T2, T3, T4>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>): Stream<[T1, T2, T3, T4]>;\n  <T1, T2, T3, T4, T5>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>): Stream<[T1, T2, T3, T4, T5]>;\n  <T1, T2, T3, T4, T5, T6>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>): Stream<[T1, T2, T3, T4, T5, T6]>;\n  <T1, T2, T3, T4, T5, T6, T7>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>): Stream<[T1, T2, T3, T4, T5, T6, T7]>;\n  <T1, T2, T3, T4, T5, T6, T7, T8>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>): Stream<[T1, T2, T3, T4, T5, T6, T7, T8]>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>): Stream<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>,\n    s10: Stream<T10>): Stream<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;\n  <T>(...stream: Array<Stream<T>>): Stream<Array<T>>;\n  (...stream: Array<Stream<any>>): Stream<Array<any>>;\n}\n\nclass CombineListener<T> implements InternalListener<T>, OutSender<Array<T>> {\n  private i: number;\n  public out: Stream<Array<T>>;\n  private p: Combine<T>;\n\n  constructor(i: number, out: Stream<Array<T>>, p: Combine<T>) {\n    this.i = i;\n    this.out = out;\n    this.p = p;\n    p.ils.push(this);\n  }\n\n  _n(t: T): void {\n    const p = this.p, out = this.out;\n    if (out === NO) return;\n    if (p.up(t, this.i)) {\n      const b = cp(p.vals);\n      out._n(b);\n    }\n  }\n\n  _e(err: any): void {\n    const out = this.out;\n    if (out === NO) return;\n    out._e(err);\n  }\n\n  _c(): void {\n    const p = this.p;\n    if (p.out === NO) return;\n    if (--p.Nc === 0) p.out._c();\n  }\n}\n\nclass Combine<R> implements Aggregator<any, Array<R>> {\n  public type = 'combine';\n  public insArr: Array<Stream<any>>;\n  public out: Stream<Array<R>>;\n  public ils: Array<CombineListener<any>>;\n  public Nc: number; // *N*umber of streams still to send *c*omplete\n  public Nn: number; // *N*umber of streams still to send *n*ext\n  public vals: Array<R>;\n\n  constructor(insArr: Array<Stream<any>>) {\n    this.insArr = insArr;\n    this.out = NO as Stream<Array<R>>;\n    this.ils = [];\n    this.Nc = this.Nn = 0;\n    this.vals = [];\n  }\n\n  up(t: any, i: number): boolean {\n    const v = this.vals[i];\n    const Nn = !this.Nn ? 0 : v === NO ? --this.Nn : this.Nn;\n    this.vals[i] = t;\n    return Nn === 0;\n  }\n\n  _start(out: Stream<Array<R>>): void {\n    this.out = out;\n    const s = this.insArr;\n    const n = this.Nc = this.Nn = s.length;\n    const vals = this.vals = new Array(n);\n    if (n === 0) {\n      out._n([]);\n      out._c();\n    } else {\n      for (let i = 0; i < n; i++) {\n        vals[i] = NO;\n        s[i]._add(new CombineListener(i, out, this));\n      }\n    }\n  }\n\n  _stop(): void {\n    const s = this.insArr;\n    const n = s.length;\n    const ils = this.ils;\n    for (let i = 0; i < n; i++) s[i]._remove(ils[i]);\n    this.out = NO as Stream<Array<R>>;\n    this.ils = [];\n    this.vals = [];\n  }\n}\n\nclass FromArray<T> implements InternalProducer<T> {\n  public type = 'fromArray';\n  public a: Array<T>;\n\n  constructor(a: Array<T>) {\n    this.a = a;\n  }\n\n  _start(out: InternalListener<T>): void {\n    const a = this.a;\n    for (let i = 0, n = a.length; i < n; i++) out._n(a[i]);\n    out._c();\n  }\n\n  _stop(): void {\n  }\n}\n\nclass FromPromise<T> implements InternalProducer<T> {\n  public type = 'fromPromise';\n  public on: boolean;\n  public p: PromiseLike<T>;\n\n  constructor(p: PromiseLike<T>) {\n    this.on = false;\n    this.p = p;\n  }\n\n  _start(out: InternalListener<T>): void {\n    const prod = this;\n    this.on = true;\n    this.p.then(\n      (v: T) => {\n        if (prod.on) {\n          out._n(v);\n          out._c();\n        }\n      },\n      (e: any) => {\n        out._e(e);\n      },\n    ).then(noop, (err: any) => {\n      setTimeout(() => { throw err; });\n    });\n  }\n\n  _stop(): void {\n    this.on = false;\n  }\n}\n\nclass Periodic implements InternalProducer<number> {\n  public type = 'periodic';\n  public period: number;\n  private intervalID: any;\n  private i: number;\n\n  constructor(period: number) {\n    this.period = period;\n    this.intervalID = -1;\n    this.i = 0;\n  }\n\n  _start(out: InternalListener<number>): void {\n    const self = this;\n    function intervalHandler() { out._n(self.i++); }\n    this.intervalID = setInterval(intervalHandler, this.period);\n  }\n\n  _stop(): void {\n    if (this.intervalID !== -1) clearInterval(this.intervalID);\n    this.intervalID = -1;\n    this.i = 0;\n  }\n}\n\nclass Debug<T> implements Operator<T, T> {\n  public type = 'debug';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  private s: (t: T) => any; // spy\n  private l: string; // label\n\n  constructor(ins: Stream<T>);\n  constructor(ins: Stream<T>, arg?: string);\n  constructor(ins: Stream<T>, arg?: (t: T) => any);\n  constructor(ins: Stream<T>, arg?: string | ((t: T) => any));\n  constructor(ins: Stream<T>, arg?: string | ((t: T) => any) | undefined) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.s = noop;\n    this.l = '';\n    if (typeof arg === 'string') this.l = arg; else if (typeof arg === 'function') this.s = arg;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const s = this.s, l = this.l;\n    if (s !== noop) {\n      try {\n        s(t);\n      } catch (e) {\n        u._e(e);\n      }\n    } else if (l) console.log(l + ':', t); else console.log(t);\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass Drop<T> implements Operator<T, T> {\n  public type = 'drop';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public max: number;\n  private dropped: number;\n\n  constructor(max: number, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.max = max;\n    this.dropped = 0;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.dropped = 0;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    if (this.dropped++ >= this.max) u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass EndWhenListener<T> implements InternalListener<any> {\n  private out: Stream<T>;\n  private op: EndWhen<T>;\n\n  constructor(out: Stream<T>, op: EndWhen<T>) {\n    this.out = out;\n    this.op = op;\n  }\n\n  _n() {\n    this.op.end();\n  }\n\n  _e(err: any) {\n    this.out._e(err);\n  }\n\n  _c() {\n    this.op.end();\n  }\n}\n\nclass EndWhen<T> implements Operator<T, T> {\n  public type = 'endWhen';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public o: Stream<any>; // o = other\n  private oil: InternalListener<any>; // oil = other InternalListener\n\n  constructor(o: Stream<any>, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.o = o;\n    this.oil = NO_IL;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.o._add(this.oil = new EndWhenListener(out, this));\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.o._remove(this.oil);\n    this.out = NO as Stream<T>;\n    this.oil = NO_IL;\n  }\n\n  end(): void {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    this.end();\n  }\n}\n\nclass Filter<T> implements Operator<T, T> {\n  public type = 'filter';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public f: (t: T) => boolean;\n\n  constructor(passes: (t: T) => boolean, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.f = passes;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const r = _try(this, t, u);\n    if (r === NO || !r) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass FlattenListener<T> implements InternalListener<T> {\n  private out: Stream<T>;\n  private op: Flatten<T>;\n\n  constructor(out: Stream<T>, op: Flatten<T>) {\n    this.out = out;\n    this.op = op;\n  }\n\n  _n(t: T) {\n    this.out._n(t);\n  }\n\n  _e(err: any) {\n    this.out._e(err);\n  }\n\n  _c() {\n    this.op.inner = NO as Stream<T>;\n    this.op.less();\n  }\n}\n\nclass Flatten<T> implements Operator<Stream<T>, T> {\n  public type = 'flatten';\n  public ins: Stream<Stream<T>>;\n  public out: Stream<T>;\n  private open: boolean;\n  public inner: Stream<T>; // Current inner Stream\n  private il: InternalListener<T>; // Current inner InternalListener\n\n  constructor(ins: Stream<Stream<T>>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.open = true;\n    this.inner = NO as Stream<T>;\n    this.il = NO_IL;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.open = true;\n    this.inner = NO as Stream<T>;\n    this.il = NO_IL;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    if (this.inner !== NO) this.inner._remove(this.il);\n    this.out = NO as Stream<T>;\n    this.open = true;\n    this.inner = NO as Stream<T>;\n    this.il = NO_IL;\n  }\n\n  less(): void {\n    const u = this.out;\n    if (u === NO) return;\n    if (!this.open && this.inner === NO) u._c();\n  }\n\n  _n(s: Stream<T>) {\n    const u = this.out;\n    if (u === NO) return;\n    const { inner, il } = this;\n    if (inner !== NO && il !== NO_IL) inner._remove(il);\n    (this.inner = s)._add(this.il = new FlattenListener(u, this));\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    this.open = false;\n    this.less();\n  }\n}\n\nclass Fold<T, R> implements Operator<T, R> {\n  public type = 'fold';\n  public ins: Stream<T>;\n  public out: Stream<R>;\n  public f: (t: T) => R;\n  public seed: R;\n  private acc: R; // initialized as seed\n\n  constructor(f: (acc: R, t: T) => R, seed: R, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<R>;\n    this.f = (t: T) => f(this.acc, t);\n    this.acc = this.seed = seed;\n  }\n\n  _start(out: Stream<R>): void {\n    this.out = out;\n    this.acc = this.seed;\n    out._n(this.acc);\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<R>;\n    this.acc = this.seed;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const r = _try(this, t, u);\n    if (r === NO) return;\n    u._n(this.acc = r as R);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass Last<T> implements Operator<T, T> {\n  public type = 'last';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  private has: boolean;\n  private val: T;\n\n  constructor(ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.has = false;\n    this.val = NO as T;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.has = false;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n    this.val = NO as T;\n  }\n\n  _n(t: T) {\n    this.has = true;\n    this.val = t;\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    if (this.has) {\n      u._n(this.val);\n      u._c();\n    } else u._e(new Error('last() failed because input stream completed'));\n  }\n}\n\nclass MapOp<T, R> implements Operator<T, R> {\n  public type = 'map';\n  public ins: Stream<T>;\n  public out: Stream<R>;\n  public f: (t: T) => R;\n\n  constructor(project: (t: T) => R, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<R>;\n    this.f = project;\n  }\n\n  _start(out: Stream<R>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<R>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const r = _try(this, t, u);\n    if (r === NO) return;\n    u._n(r as R);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass Remember<T> implements InternalProducer<T> {\n  public type = 'remember';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n\n  constructor(ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(out);\n  }\n\n  _stop(): void {\n    this.ins._remove(this.out);\n    this.out = NO as Stream<T>;\n  }\n}\n\nclass ReplaceError<T> implements Operator<T, T> {\n  public type = 'replaceError';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public f: (err: any) => Stream<T>;\n\n  constructor(replacer: (err: any) => Stream<T>, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.f = replacer;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    try {\n      this.ins._remove(this);\n      (this.ins = this.f(err))._add(this);\n    } catch (e) {\n      u._e(e);\n    }\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass StartWith<T> implements InternalProducer<T> {\n  public type = 'startWith';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public val: T;\n\n  constructor(ins: Stream<T>, val: T) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.val = val;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.out._n(this.val);\n    this.ins._add(out);\n  }\n\n  _stop(): void {\n    this.ins._remove(this.out);\n    this.out = NO as Stream<T>;\n  }\n}\n\nclass Take<T> implements Operator<T, T> {\n  public type = 'take';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public max: number;\n  private taken: number;\n\n  constructor(max: number, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.max = max;\n    this.taken = 0;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.taken = 0;\n    if (this.max <= 0) out._c(); else this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const m = ++this.taken;\n    if (m < this.max) u._n(t); else if (m === this.max) {\n      u._n(t);\n      u._c();\n    }\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nexport class Stream<T> implements InternalListener<T> {\n  public _prod: InternalProducer<T>;\n  protected _ils: Array<InternalListener<T>>; // 'ils' = Internal listeners\n  protected _stopID: any;\n  protected _dl: InternalListener<T>; // the debug listener\n  protected _d: boolean; // flag indicating the existence of the debug listener\n  protected _target: Stream<T> | null; // imitation target if this Stream will imitate\n  protected _err: any;\n\n  constructor(producer?: InternalProducer<T>) {\n    this._prod = producer || NO as InternalProducer<T>;\n    this._ils = [];\n    this._stopID = NO;\n    this._dl = NO as InternalListener<T>;\n    this._d = false;\n    this._target = null;\n    this._err = NO;\n  }\n\n  _n(t: T): void {\n    const a = this._ils;\n    const L = a.length;\n    if (this._d) this._dl._n(t);\n    if (L == 1) a[0]._n(t); else if (L == 0) return; else {\n      const b = cp(a);\n      for (let i = 0; i < L; i++) b[i]._n(t);\n    }\n  }\n\n  _e(err: any): void {\n    if (this._err !== NO) return;\n    this._err = err;\n    const a = this._ils;\n    const L = a.length;\n    this._x();\n    if (this._d) this._dl._e(err);\n    if (L == 1) a[0]._e(err); else if (L == 0) return; else {\n      const b = cp(a);\n      for (let i = 0; i < L; i++) b[i]._e(err);\n    }\n    if (!this._d && L == 0) throw this._err;\n  }\n\n  _c(): void {\n    const a = this._ils;\n    const L = a.length;\n    this._x();\n    if (this._d) this._dl._c();\n    if (L == 1) a[0]._c(); else if (L == 0) return; else {\n      const b = cp(a);\n      for (let i = 0; i < L; i++) b[i]._c();\n    }\n  }\n\n  _x(): void { // tear down logic, after error or complete\n    if (this._ils.length === 0) return;\n    if (this._prod !== NO) this._prod._stop();\n    this._err = NO;\n    this._ils = [];\n  }\n\n  _stopNow() {\n    // WARNING: code that calls this method should\n    // first check if this._prod is valid (not `NO`)\n    this._prod._stop();\n    this._err = NO;\n    this._stopID = NO;\n  }\n\n  _add(il: InternalListener<T>): void {\n    const ta = this._target;\n    if (ta) return ta._add(il);\n    const a = this._ils;\n    a.push(il);\n    if (a.length > 1) return;\n    if (this._stopID !== NO) {\n      clearTimeout(this._stopID);\n      this._stopID = NO;\n    } else {\n      const p = this._prod;\n      if (p !== NO) p._start(this);\n    }\n  }\n\n  _remove(il: InternalListener<T>): void {\n    const ta = this._target;\n    if (ta) return ta._remove(il);\n    const a = this._ils;\n    const i = a.indexOf(il);\n    if (i > -1) {\n      a.splice(i, 1);\n      if (this._prod !== NO && a.length <= 0) {\n        this._err = NO;\n        this._stopID = setTimeout(() => this._stopNow());\n      } else if (a.length === 1) {\n        this._pruneCycles();\n      }\n    }\n  }\n\n  // If all paths stemming from `this` stream eventually end at `this`\n  // stream, then we remove the single listener of `this` stream, to\n  // force it to end its execution and dispose resources. This method\n  // assumes as a precondition that this._ils has just one listener.\n  _pruneCycles() {\n    if (this._hasNoSinks(this, [])) this._remove(this._ils[0]);\n  }\n\n  // Checks whether *there is no* path starting from `x` that leads to an end\n  // listener (sink) in the stream graph, following edges A->B where B is a\n  // listener of A. This means these paths constitute a cycle somehow. Is given\n  // a trace of all visited nodes so far.\n  _hasNoSinks(x: InternalListener<any>, trace: Array<any>): boolean {\n    if (trace.indexOf(x) !== -1)\n      return true; else\n      if ((x as any as OutSender<any>).out === this)\n        return true; else\n        if ((x as any as OutSender<any>).out && (x as any as OutSender<any>).out !== NO)\n          return this._hasNoSinks((x as any as OutSender<any>).out, trace.concat(x)); else\n          if ((x as Stream<any>)._ils) {\n            for (let i = 0, N = (x as Stream<any>)._ils.length; i < N; i++)\n              if (!this._hasNoSinks((x as Stream<any>)._ils[i], trace.concat(x)))\n                return false;\n            return true;\n          } else return false;\n  }\n\n  private ctor(): typeof Stream {\n    return this instanceof MemoryStream ? MemoryStream : Stream;\n  }\n\n  /**\n   * Adds a Listener to the Stream.\n   *\n   * @param {Listener} listener\n   */\n  addListener(listener: Partial<Listener<T>>): void {\n    (listener as InternalListener<T>)._n = listener.next || noop;\n    (listener as InternalListener<T>)._e = listener.error || noop;\n    (listener as InternalListener<T>)._c = listener.complete || noop;\n    this._add(listener as InternalListener<T>);\n  }\n\n  /**\n   * Removes a Listener from the Stream, assuming the Listener was added to it.\n   *\n   * @param {Listener<T>} listener\n   */\n  removeListener(listener: Partial<Listener<T>>): void {\n    this._remove(listener as InternalListener<T>);\n  }\n\n  /**\n   * Adds a Listener to the Stream returning a Subscription to remove that\n   * listener.\n   *\n   * @param {Listener} listener\n   * @returns {Subscription}\n   */\n  subscribe(listener: Partial<Listener<T>>): Subscription {\n    this.addListener(listener);\n    return new StreamSub<T>(this, listener as InternalListener<T>);\n  }\n\n  /**\n   * Add interop between most.js and RxJS 5\n   *\n   * @returns {Stream}\n   */\n  [$$observable](): Stream<T> {\n    return this;\n  }\n\n  /**\n   * Creates a new Stream given a Producer.\n   *\n   * @factory true\n   * @param {Producer} producer An optional Producer that dictates how to\n   * start, generate events, and stop the Stream.\n   * @return {Stream}\n   */\n  static create<T>(producer?: Producer<T>): Stream<T> {\n    if (producer) {\n      if (typeof producer.start !== 'function'\n        || typeof producer.stop !== 'function')\n        throw new Error('producer requires both start and stop functions');\n      internalizeProducer(producer); // mutates the input\n    }\n    return new Stream(producer as InternalProducer<T> & Producer<T>);\n  }\n\n  /**\n   * Creates a new MemoryStream given a Producer.\n   *\n   * @factory true\n   * @param {Producer} producer An optional Producer that dictates how to\n   * start, generate events, and stop the Stream.\n   * @return {MemoryStream}\n   */\n  static createWithMemory<T>(producer?: Producer<T>): MemoryStream<T> {\n    if (producer) internalizeProducer(producer); // mutates the input\n    return new MemoryStream<T>(producer as InternalProducer<T> & Producer<T>);\n  }\n\n  /**\n   * Creates a Stream that does nothing when started. It never emits any event.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   *          never\n   * -----------------------\n   * ```\n   *\n   * @factory true\n   * @return {Stream}\n   */\n  static never<T = any>(): Stream<T> {\n    return new Stream<T>({ _start: noop, _stop: noop });\n  }\n\n  /**\n   * Creates a Stream that immediately emits the \"complete\" notification when\n   * started, and that's it.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * empty\n   * -|\n   * ```\n   *\n   * @factory true\n   * @return {Stream}\n   */\n  static empty<T = any>(): Stream<T> {\n    return new Stream<T>({\n      _start(il: InternalListener<any>) { il._c(); },\n      _stop: noop,\n    });\n  }\n\n  /**\n   * Creates a Stream that immediately emits an \"error\" notification with the\n   * value you passed as the `error` argument when the stream starts, and that's\n   * it.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * throw(X)\n   * -X\n   * ```\n   *\n   * @factory true\n   * @param error The error event to emit on the created stream.\n   * @return {Stream}\n   */\n  static throw(error: any): Stream<any> {\n    return new Stream<any>({\n      _start(il: InternalListener<any>) { il._e(error); },\n      _stop: noop,\n    });\n  }\n\n  /**\n   * Creates a stream from an Array, Promise, or an Observable.\n   *\n   * @factory true\n   * @param {Array|PromiseLike|Observable} input The input to make a stream from.\n   * @return {Stream}\n   */\n  static from<T>(input: PromiseLike<T> | Stream<T> | Array<T> | Observable<T>): Stream<T> {\n    if (typeof input[$$observable] === 'function')\n      return Stream.fromObservable<T>(input as Observable<T>); else\n      if (typeof (input as PromiseLike<T>).then === 'function')\n        return Stream.fromPromise<T>(input as PromiseLike<T>); else\n        if (Array.isArray(input))\n          return Stream.fromArray<T>(input);\n\n    throw new TypeError(`Type of input to from() must be an Array, Promise, or Observable`);\n  }\n\n  /**\n   * Creates a Stream that immediately emits the arguments that you give to\n   * *of*, then completes.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * of(1,2,3)\n   * 123|\n   * ```\n   *\n   * @factory true\n   * @param a The first value you want to emit as an event on the stream.\n   * @param b The second value you want to emit as an event on the stream. One\n   * or more of these values may be given as arguments.\n   * @return {Stream}\n   */\n  static of<T>(...items: Array<T>): Stream<T> {\n    return Stream.fromArray<T>(items);\n  }\n\n  /**\n   * Converts an array to a stream. The returned stream will emit synchronously\n   * all the items in the array, and then complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * fromArray([1,2,3])\n   * 123|\n   * ```\n   *\n   * @factory true\n   * @param {Array} array The array to be converted as a stream.\n   * @return {Stream}\n   */\n  static fromArray<T>(array: Array<T>): Stream<T> {\n    return new Stream<T>(new FromArray<T>(array));\n  }\n\n  /**\n   * Converts a promise to a stream. The returned stream will emit the resolved\n   * value of the promise, and then complete. However, if the promise is\n   * rejected, the stream will emit the corresponding error.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * fromPromise( ----42 )\n   * -----------------42|\n   * ```\n   *\n   * @factory true\n   * @param {PromiseLike} promise The promise to be converted as a stream.\n   * @return {Stream}\n   */\n  static fromPromise<T>(promise: PromiseLike<T>): Stream<T> {\n    return new Stream<T>(new FromPromise<T>(promise));\n  }\n\n  /**\n   * Converts an Observable into a Stream.\n   *\n   * @factory true\n   * @param {any} observable The observable to be converted as a stream.\n   * @return {Stream}\n   */\n  static fromObservable<T>(obs: { subscribe: any }): Stream<T> {\n    if ((obs as Stream<T>).endWhen !== undefined) return obs as Stream<T>;\n    const o = typeof obs[$$observable] === 'function' ? obs[$$observable]() : obs;\n    return new Stream<T>(new FromObservable(o));\n  }\n\n  /**\n   * Creates a stream that periodically emits incremental numbers, every\n   * `period` milliseconds.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   *     periodic(1000)\n   * ---0---1---2---3---4---...\n   * ```\n   *\n   * @factory true\n   * @param {number} period The interval in milliseconds to use as a rate of\n   * emission.\n   * @return {Stream}\n   */\n  static periodic(period: number): Stream<number> {\n    return new Stream<number>(new Periodic(period));\n  }\n\n  /**\n   * Blends multiple streams together, emitting events from all of them\n   * concurrently.\n   *\n   * *merge* takes multiple streams as arguments, and creates a stream that\n   * behaves like each of the argument streams, in parallel.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3--------4---\n   * ----a-----b----c---d------\n   *            merge\n   * --1-a--2--b--3-c---d--4---\n   * ```\n   *\n   * @factory true\n   * @param {Stream} stream1 A stream to merge together with other streams.\n   * @param {Stream} stream2 A stream to merge together with other streams. Two\n   * or more streams may be given as arguments.\n   * @return {Stream}\n   */\n  static merge: MergeSignature = function merge(...streams: Array<Stream<any>>) {\n    return new Stream<any>(new Merge(streams));\n  } as MergeSignature;\n\n  /**\n   * Combines multiple input streams together to return a stream whose events\n   * are arrays that collect the latest events from each input stream.\n   *\n   * *combine* internally remembers the most recent event from each of the input\n   * streams. When any of the input streams emits an event, that event together\n   * with all the other saved events are combined into an array. That array will\n   * be emitted on the output stream. It's essentially a way of joining together\n   * the events from multiple streams.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3--------4---\n   * ----a-----b-----c--d------\n   *          combine\n   * ----1a-2a-2b-3b-3c-3d-4d--\n   * ```\n   *\n   * @factory true\n   * @param {Stream} stream1 A stream to combine together with other streams.\n   * @param {Stream} stream2 A stream to combine together with other streams.\n   * Multiple streams, not just two, may be given as arguments.\n   * @return {Stream}\n   */\n  static combine: CombineSignature = function combine(...streams: Array<Stream<any>>) {\n    return new Stream<Array<any>>(new Combine<any>(streams));\n  } as CombineSignature;\n\n  protected _map<U>(project: (t: T) => U): Stream<U> | MemoryStream<U> {\n    return new (this.ctor())<U>(new MapOp<T, U>(project, this));\n  }\n\n  /**\n   * Transforms each event from the input Stream through a `project` function,\n   * to get a Stream that emits those transformed events.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---3--5-----7------\n   *    map(i => i * 10)\n   * --10--30-50----70-----\n   * ```\n   *\n   * @param {Function} project A function of type `(t: T) => U` that takes event\n   * `t` of type `T` from the input Stream and produces an event of type `U`, to\n   * be emitted on the output Stream.\n   * @return {Stream}\n   */\n  map<U>(project: (t: T) => U): Stream<U> {\n    return this._map(project);\n  }\n\n  /**\n   * It's like `map`, but transforms each input event to always the same\n   * constant value on the output Stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---3--5-----7-----\n   *       mapTo(10)\n   * --10--10-10----10----\n   * ```\n   *\n   * @param projectedValue A value to emit on the output Stream whenever the\n   * input Stream emits any value.\n   * @return {Stream}\n   */\n  mapTo<U>(projectedValue: U): Stream<U> {\n    const s = this.map(() => projectedValue);\n    const op: Operator<T, U> = s._prod as Operator<T, U>;\n    op.type = 'mapTo';\n    return s;\n  }\n\n  filter<S extends T>(passes: (t: T) => t is S): Stream<S>;\n  filter(passes: (t: T) => boolean): Stream<T>;\n  /**\n   * Only allows events that pass the test given by the `passes` argument.\n   *\n   * Each event from the input stream is given to the `passes` function. If the\n   * function returns `true`, the event is forwarded to the output stream,\n   * otherwise it is ignored and not forwarded.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---2--3-----4-----5---6--7-8--\n   *     filter(i => i % 2 === 0)\n   * ------2--------4---------6----8--\n   * ```\n   *\n   * @param {Function} passes A function of type `(t: T) => boolean` that takes\n   * an event from the input stream and checks if it passes, by returning a\n   * boolean.\n   * @return {Stream}\n   */\n  filter(passes: (t: T) => boolean): Stream<T> {\n    const p = this._prod;\n    if (p instanceof Filter)\n      return new Stream<T>(new Filter<T>(\n        and((p as Filter<T>).f, passes),\n        (p as Filter<T>).ins\n      ));\n    return new Stream<T>(new Filter<T>(passes, this));\n  }\n\n  /**\n   * Lets the first `amount` many events from the input stream pass to the\n   * output stream, then makes the output stream complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c----d---e--\n   *    take(3)\n   * --a---b--c|\n   * ```\n   *\n   * @param {number} amount How many events to allow from the input stream\n   * before completing the output stream.\n   * @return {Stream}\n   */\n  take(amount: number): Stream<T> {\n    return new (this.ctor())<T>(new Take<T>(amount, this));\n  }\n\n  /**\n   * Ignores the first `amount` many events from the input stream, and then\n   * after that starts forwarding events from the input stream to the output\n   * stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c----d---e--\n   *       drop(3)\n   * --------------d---e--\n   * ```\n   *\n   * @param {number} amount How many events to ignore from the input stream\n   * before forwarding all events from the input stream to the output stream.\n   * @return {Stream}\n   */\n  drop(amount: number): Stream<T> {\n    return new Stream<T>(new Drop<T>(amount, this));\n  }\n\n  /**\n   * When the input stream completes, the output stream will emit the last event\n   * emitted by the input stream, and then will also complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c--d----|\n   *       last()\n   * -----------------d|\n   * ```\n   *\n   * @return {Stream}\n   */\n  last(): Stream<T> {\n    return new Stream<T>(new Last<T>(this));\n  }\n\n  /**\n   * Prepends the given `initial` value to the sequence of events emitted by the\n   * input stream. The returned stream is a MemoryStream, which means it is\n   * already `remember()`'d.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ---1---2-----3---\n   *   startWith(0)\n   * 0--1---2-----3---\n   * ```\n   *\n   * @param initial The value or event to prepend.\n   * @return {MemoryStream}\n   */\n  startWith(initial: T): MemoryStream<T> {\n    return new MemoryStream<T>(new StartWith<T>(this, initial));\n  }\n\n  /**\n   * Uses another stream to determine when to complete the current stream.\n   *\n   * When the given `other` stream emits an event or completes, the output\n   * stream will complete. Before that happens, the output stream will behaves\n   * like the input stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ---1---2-----3--4----5----6---\n   *   endWhen( --------a--b--| )\n   * ---1---2-----3--4--|\n   * ```\n   *\n   * @param other Some other stream that is used to know when should the output\n   * stream of this operator complete.\n   * @return {Stream}\n   */\n  endWhen(other: Stream<any>): Stream<T> {\n    return new (this.ctor())<T>(new EndWhen<T>(other, this));\n  }\n\n  /**\n   * \"Folds\" the stream onto itself.\n   *\n   * Combines events from the past throughout\n   * the entire execution of the input stream, allowing you to accumulate them\n   * together. It's essentially like `Array.prototype.reduce`. The returned\n   * stream is a MemoryStream, which means it is already `remember()`'d.\n   *\n   * The output stream starts by emitting the `seed` which you give as argument.\n   * Then, when an event happens on the input stream, it is combined with that\n   * seed value through the `accumulate` function, and the output value is\n   * emitted on the output stream. `fold` remembers that output value as `acc`\n   * (\"accumulator\"), and then when a new input event `t` happens, `acc` will be\n   * combined with that to produce the new `acc` and so forth.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ------1-----1--2----1----1------\n   *   fold((acc, x) => acc + x, 3)\n   * 3-----4-----5--7----8----9------\n   * ```\n   *\n   * @param {Function} accumulate A function of type `(acc: R, t: T) => R` that\n   * takes the previous accumulated value `acc` and the incoming event from the\n   * input stream and produces the new accumulated value.\n   * @param seed The initial accumulated value, of type `R`.\n   * @return {MemoryStream}\n   */\n  fold<R>(accumulate: (acc: R, t: T) => R, seed: R): MemoryStream<R> {\n    return new MemoryStream<R>(new Fold<T, R>(accumulate, seed, this));\n  }\n\n  /**\n   * Replaces an error with another stream.\n   *\n   * When (and if) an error happens on the input stream, instead of forwarding\n   * that error to the output stream, *replaceError* will call the `replace`\n   * function which returns the stream that the output stream will replicate.\n   * And, in case that new stream also emits an error, `replace` will be called\n   * again to get another stream to start replicating.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---2-----3--4-----X\n   *   replaceError( () => --10--| )\n   * --1---2-----3--4--------10--|\n   * ```\n   *\n   * @param {Function} replace A function of type `(err) => Stream` that takes\n   * the error that occurred on the input stream or on the previous replacement\n   * stream and returns a new stream. The output stream will behave like the\n   * stream that this function returns.\n   * @return {Stream}\n   */\n  replaceError(replace: (err: any) => Stream<T>): Stream<T> {\n    return new (this.ctor())<T>(new ReplaceError<T>(replace, this));\n  }\n\n  /**\n   * Flattens a \"stream of streams\", handling only one nested stream at a time\n   * (no concurrency).\n   *\n   * If the input stream is a stream that emits streams, then this operator will\n   * return an output stream which is a flat stream: emits regular events. The\n   * flattening happens without concurrency. It works like this: when the input\n   * stream emits a nested stream, *flatten* will start imitating that nested\n   * one. However, as soon as the next nested stream is emitted on the input\n   * stream, *flatten* will forget the previous nested one it was imitating, and\n   * will start imitating the new nested one.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --+--------+---------------\n   *   \\        \\\n   *    \\       ----1----2---3--\n   *    --a--b----c----d--------\n   *           flatten\n   * -----a--b------1----2---3--\n   * ```\n   *\n   * @return {Stream}\n   */\n  flatten<R>(this: Stream<Stream<R> | MemoryStream<R>>): Stream<R> {\n    return new Stream<R>(new Flatten(this));\n  }\n\n  /**\n   * Passes the input stream to a custom operator, to produce an output stream.\n   *\n   * *compose* is a handy way of using an existing function in a chained style.\n   * Instead of writing `outStream = f(inStream)` you can write\n   * `outStream = inStream.compose(f)`.\n   *\n   * @param {function} operator A function that takes a stream as input and\n   * returns a stream as well.\n   * @return {Stream}\n   */\n  compose<U>(operator: (stream: Stream<T>) => U): U {\n    return operator(this);\n  }\n\n  /**\n   * Returns an output stream that behaves like the input stream, but also\n   * remembers the most recent event that happens on the input stream, so that a\n   * newly added listener will immediately receive that memorised event.\n   *\n   * @return {MemoryStream}\n   */\n  remember(): MemoryStream<T> {\n    return new MemoryStream<T>(new Remember<T>(this));\n  }\n\n  debug(): Stream<T>;\n  debug(labelOrSpy: string): Stream<T>;\n  debug(labelOrSpy: (t: T) => any): Stream<T>;\n  /**\n   * Returns an output stream that identically behaves like the input stream,\n   * but also runs a `spy` function for each event, to help you debug your app.\n   *\n   * *debug* takes a `spy` function as argument, and runs that for each event\n   * happening on the input stream. If you don't provide the `spy` argument,\n   * then *debug* will just `console.log` each event. This helps you to\n   * understand the flow of events through some operator chain.\n   *\n   * Please note that if the output stream has no listeners, then it will not\n   * start, which means `spy` will never run because no actual event happens in\n   * that case.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3-----4--\n   *         debug\n   * --1----2-----3-----4--\n   * ```\n   *\n   * @param {function} labelOrSpy A string to use as the label when printing\n   * debug information on the console, or a 'spy' function that takes an event\n   * as argument, and does not need to return anything.\n   * @return {Stream}\n   */\n  debug(labelOrSpy?: string | ((t: T) => any)): Stream<T> {\n    return new (this.ctor())<T>(new Debug<T>(this, labelOrSpy));\n  }\n\n  /**\n   * *imitate* changes this current Stream to emit the same events that the\n   * `other` given Stream does. This method returns nothing.\n   *\n   * This method exists to allow one thing: **circular dependency of streams**.\n   * For instance, let's imagine that for some reason you need to create a\n   * circular dependency where stream `first$` depends on stream `second$`\n   * which in turn depends on `first$`:\n   *\n   * <!-- skip-example -->\n   * ```js\n   * import delay from 'xstream/extra/delay'\n   *\n   * var first$ = second$.map(x => x * 10).take(3);\n   * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));\n   * ```\n   *\n   * However, that is invalid JavaScript, because `second$` is undefined\n   * on the first line. This is how *imitate* can help solve it:\n   *\n   * ```js\n   * import delay from 'xstream/extra/delay'\n   *\n   * var secondProxy$ = xs.create();\n   * var first$ = secondProxy$.map(x => x * 10).take(3);\n   * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));\n   * secondProxy$.imitate(second$);\n   * ```\n   *\n   * We create `secondProxy$` before the others, so it can be used in the\n   * declaration of `first$`. Then, after both `first$` and `second$` are\n   * defined, we hook `secondProxy$` with `second$` with `imitate()` to tell\n   * that they are \"the same\". `imitate` will not trigger the start of any\n   * stream, it just binds `secondProxy$` and `second$` together.\n   *\n   * The following is an example where `imitate()` is important in Cycle.js\n   * applications. A parent component contains some child components. A child\n   * has an action stream which is given to the parent to define its state:\n   *\n   * <!-- skip-example -->\n   * ```js\n   * const childActionProxy$ = xs.create();\n   * const parent = Parent({...sources, childAction$: childActionProxy$});\n   * const childAction$ = parent.state$.map(s => s.child.action$).flatten();\n   * childActionProxy$.imitate(childAction$);\n   * ```\n   *\n   * Note, though, that **`imitate()` does not support MemoryStreams**. If we\n   * would attempt to imitate a MemoryStream in a circular dependency, we would\n   * either get a race condition (where the symptom would be \"nothing happens\")\n   * or an infinite cyclic emission of values. It's useful to think about\n   * MemoryStreams as cells in a spreadsheet. It doesn't make any sense to\n   * define a spreadsheet cell `A1` with a formula that depends on `B1` and\n   * cell `B1` defined with a formula that depends on `A1`.\n   *\n   * If you find yourself wanting to use `imitate()` with a\n   * MemoryStream, you should rework your code around `imitate()` to use a\n   * Stream instead. Look for the stream in the circular dependency that\n   * represents an event stream, and that would be a candidate for creating a\n   * proxy Stream which then imitates the target Stream.\n   *\n   * @param {Stream} target The other stream to imitate on the current one. Must\n   * not be a MemoryStream.\n   */\n  imitate(target: Stream<T>): void {\n    if (target instanceof MemoryStream)\n      throw new Error('A MemoryStream was given to imitate(), but it only ' +\n        'supports a Stream. Read more about this restriction here: ' +\n        'https://github.com/staltz/xstream#faq');\n    this._target = target;\n    for (let ils = this._ils, N = ils.length, i = 0; i < N; i++) target._add(ils[i]);\n    this._ils = [];\n  }\n\n  /**\n   * Forces the Stream to emit the given value to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   *\n   * @param value The \"next\" value you want to broadcast to all listeners of\n   * this Stream.\n   */\n  shamefullySendNext(value: T) {\n    this._n(value);\n  }\n\n  /**\n   * Forces the Stream to emit the given error to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   *\n   * @param {any} error The error you want to broadcast to all the listeners of\n   * this Stream.\n   */\n  shamefullySendError(error: any) {\n    this._e(error);\n  }\n\n  /**\n   * Forces the Stream to emit the \"completed\" event to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   */\n  shamefullySendComplete() {\n    this._c();\n  }\n\n  /**\n   * Adds a \"debug\" listener to the stream. There can only be one debug\n   * listener, that's why this is 'setDebugListener'. To remove the debug\n   * listener, just call setDebugListener(null).\n   *\n   * A debug listener is like any other listener. The only difference is that a\n   * debug listener is \"stealthy\": its presence/absence does not trigger the\n   * start/stop of the stream (or the producer inside the stream). This is\n   * useful so you can inspect what is going on without changing the behavior\n   * of the program. If you have an idle stream and you add a normal listener to\n   * it, the stream will start executing. But if you set a debug listener on an\n   * idle stream, it won't start executing (not until the first normal listener\n   * is added).\n   *\n   * As the name indicates, we don't recommend using this method to build app\n   * logic. In fact, in most cases the debug operator works just fine. Only use\n   * this one if you know what you're doing.\n   *\n   * @param {Listener<T>} listener\n   */\n  setDebugListener(listener: Partial<Listener<T>> | null | undefined) {\n    if (!listener) {\n      this._d = false;\n      this._dl = NO as InternalListener<T>;\n    } else {\n      this._d = true;\n      (listener as InternalListener<T>)._n = listener.next || noop;\n      (listener as InternalListener<T>)._e = listener.error || noop;\n      (listener as InternalListener<T>)._c = listener.complete || noop;\n      this._dl = listener as InternalListener<T>;\n    }\n  }\n}\n\nexport class MemoryStream<T> extends Stream<T> {\n  private _v?: T;\n  private _has?: boolean = false;\n  constructor(producer: InternalProducer<T>) {\n    super(producer);\n  }\n\n  _n(x: T) {\n    this._v = x;\n    this._has = true;\n    super._n(x);\n  }\n\n  _add(il: InternalListener<T>): void {\n    const ta = this._target;\n    if (ta) return ta._add(il);\n    const a = this._ils;\n    a.push(il);\n    if (a.length > 1) {\n      if (this._has) il._n(this._v!);\n      return;\n    }\n    if (this._stopID !== NO) {\n      if (this._has) il._n(this._v!);\n      clearTimeout(this._stopID);\n      this._stopID = NO;\n    } else if (this._has) il._n(this._v!); else {\n      const p = this._prod;\n      if (p !== NO) p._start(this);\n    }\n  }\n\n  _stopNow() {\n    this._has = false;\n    super._stopNow();\n  }\n\n  _x(): void {\n    this._has = false;\n    super._x();\n  }\n\n  map<U>(project: (t: T) => U): MemoryStream<U> {\n    return this._map(project) as MemoryStream<U>;\n  }\n\n  mapTo<U>(projectedValue: U): MemoryStream<U> {\n    return super.mapTo(projectedValue) as MemoryStream<U>;\n  }\n\n  take(amount: number): MemoryStream<T> {\n    return super.take(amount) as MemoryStream<T>;\n  }\n\n  endWhen(other: Stream<any>): MemoryStream<T> {\n    return super.endWhen(other) as MemoryStream<T>;\n  }\n\n  replaceError(replace: (err: any) => Stream<T>): MemoryStream<T> {\n    return super.replaceError(replace) as MemoryStream<T>;\n  }\n\n  remember(): MemoryStream<T> {\n    return this;\n  }\n\n  debug(): MemoryStream<T>;\n  debug(labelOrSpy: string): MemoryStream<T>;\n  debug(labelOrSpy: (t: T) => any): MemoryStream<T>;\n  debug(labelOrSpy?: string | ((t: T) => any) | undefined): MemoryStream<T> {\n    return super.debug(labelOrSpy as any) as MemoryStream<T>;\n  }\n}\n\nexport { NO, NO_IL };\nconst xs = Stream;\ntype xs<T> = Stream<T>;\nexport default xs;\n"]},"metadata":{},"sourceType":"script"}