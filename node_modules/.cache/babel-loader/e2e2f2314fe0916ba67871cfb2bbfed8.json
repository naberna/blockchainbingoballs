{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Decimal = void 0;\n\nconst bn_js_1 = __importDefault(require(\"bn.js\")); // Too large values lead to massive memory usage. Limit to something sensible.\n// The largest value we need is 18 (Ether).\n\n\nconst maxFractionalDigits = 100;\n/**\n * A type for arbitrary precision, non-negative decimals.\n *\n * Instances of this class are immutable.\n */\n\nclass Decimal {\n  constructor(atomics, fractionalDigits) {\n    this.data = {\n      atomics: new bn_js_1.default(atomics),\n      fractionalDigits: fractionalDigits\n    };\n  }\n\n  static fromUserInput(input, fractionalDigits) {\n    Decimal.verifyFractionalDigits(fractionalDigits);\n    const badCharacter = input.match(/[^0-9.]/);\n\n    if (badCharacter) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      throw new Error(`Invalid character at position ${badCharacter.index + 1}`);\n    }\n\n    let whole;\n    let fractional;\n\n    if (input.search(/\\./) === -1) {\n      // integer format, no separator\n      whole = input;\n      fractional = \"\";\n    } else {\n      const parts = input.split(\".\");\n\n      switch (parts.length) {\n        case 0:\n        case 1:\n          throw new Error(\"Fewer than two elements in split result. This must not happen here.\");\n\n        case 2:\n          if (!parts[1]) throw new Error(\"Fractional part missing\");\n          whole = parts[0];\n          fractional = parts[1].replace(/0+$/, \"\");\n          break;\n\n        default:\n          throw new Error(\"More than one separator found\");\n      }\n    }\n\n    if (fractional.length > fractionalDigits) {\n      throw new Error(\"Got more fractional digits than supported\");\n    }\n\n    const quantity = `${whole}${fractional.padEnd(fractionalDigits, \"0\")}`;\n    return new Decimal(quantity, fractionalDigits);\n  }\n\n  static fromAtomics(atomics, fractionalDigits) {\n    Decimal.verifyFractionalDigits(fractionalDigits);\n    return new Decimal(atomics, fractionalDigits);\n  }\n  /**\n   * Creates a Decimal with value 0.0 and the given number of fractial digits.\n   *\n   * Fractional digits are not relevant for the value but needed to be able\n   * to perform arithmetic operations with other decimals.\n   */\n\n\n  static zero(fractionalDigits) {\n    Decimal.verifyFractionalDigits(fractionalDigits);\n    return new Decimal(\"0\", fractionalDigits);\n  }\n  /**\n   * Creates a Decimal with value 1.0 and the given number of fractial digits.\n   *\n   * Fractional digits are not relevant for the value but needed to be able\n   * to perform arithmetic operations with other decimals.\n   */\n\n\n  static one(fractionalDigits) {\n    Decimal.verifyFractionalDigits(fractionalDigits);\n    return new Decimal(\"1\" + \"0\".repeat(fractionalDigits), fractionalDigits);\n  }\n\n  static verifyFractionalDigits(fractionalDigits) {\n    if (!Number.isInteger(fractionalDigits)) throw new Error(\"Fractional digits is not an integer\");\n    if (fractionalDigits < 0) throw new Error(\"Fractional digits must not be negative\");\n\n    if (fractionalDigits > maxFractionalDigits) {\n      throw new Error(`Fractional digits must not exceed ${maxFractionalDigits}`);\n    }\n  }\n\n  static compare(a, b) {\n    if (a.fractionalDigits !== b.fractionalDigits) throw new Error(\"Fractional digits do not match\");\n    return a.data.atomics.cmp(new bn_js_1.default(b.atomics));\n  }\n\n  get atomics() {\n    return this.data.atomics.toString();\n  }\n\n  get fractionalDigits() {\n    return this.data.fractionalDigits;\n  }\n  /** Creates a new instance with the same value */\n\n\n  clone() {\n    return new Decimal(this.atomics, this.fractionalDigits);\n  }\n  /** Returns the greatest decimal <= this which has no fractional part (rounding down) */\n\n\n  floor() {\n    const factor = new bn_js_1.default(10).pow(new bn_js_1.default(this.data.fractionalDigits));\n    const whole = this.data.atomics.div(factor);\n    const fractional = this.data.atomics.mod(factor);\n\n    if (fractional.isZero()) {\n      return this.clone();\n    } else {\n      return Decimal.fromAtomics(whole.mul(factor).toString(), this.fractionalDigits);\n    }\n  }\n  /** Returns the smallest decimal >= this which has no fractional part (rounding up) */\n\n\n  ceil() {\n    const factor = new bn_js_1.default(10).pow(new bn_js_1.default(this.data.fractionalDigits));\n    const whole = this.data.atomics.div(factor);\n    const fractional = this.data.atomics.mod(factor);\n\n    if (fractional.isZero()) {\n      return this.clone();\n    } else {\n      return Decimal.fromAtomics(whole.addn(1).mul(factor).toString(), this.fractionalDigits);\n    }\n  }\n\n  toString() {\n    const factor = new bn_js_1.default(10).pow(new bn_js_1.default(this.data.fractionalDigits));\n    const whole = this.data.atomics.div(factor);\n    const fractional = this.data.atomics.mod(factor);\n\n    if (fractional.isZero()) {\n      return whole.toString();\n    } else {\n      const fullFractionalPart = fractional.toString().padStart(this.data.fractionalDigits, \"0\");\n      const trimmedFractionalPart = fullFractionalPart.replace(/0+$/, \"\");\n      return `${whole.toString()}.${trimmedFractionalPart}`;\n    }\n  }\n  /**\n   * Returns an approximation as a float type. Only use this if no\n   * exact calculation is required.\n   */\n\n\n  toFloatApproximation() {\n    const out = Number(this.toString());\n    if (Number.isNaN(out)) throw new Error(\"Conversion to number failed\");\n    return out;\n  }\n  /**\n   * a.plus(b) returns a+b.\n   *\n   * Both values need to have the same fractional digits.\n   */\n\n\n  plus(b) {\n    if (this.fractionalDigits !== b.fractionalDigits) throw new Error(\"Fractional digits do not match\");\n    const sum = this.data.atomics.add(new bn_js_1.default(b.atomics));\n    return new Decimal(sum.toString(), this.fractionalDigits);\n  }\n  /**\n   * a.minus(b) returns a-b.\n   *\n   * Both values need to have the same fractional digits.\n   * The resulting difference needs to be non-negative.\n   */\n\n\n  minus(b) {\n    if (this.fractionalDigits !== b.fractionalDigits) throw new Error(\"Fractional digits do not match\");\n    const difference = this.data.atomics.sub(new bn_js_1.default(b.atomics));\n    if (difference.ltn(0)) throw new Error(\"Difference must not be negative\");\n    return new Decimal(difference.toString(), this.fractionalDigits);\n  }\n  /**\n   * a.multiply(b) returns a*b.\n   *\n   * We only allow multiplication by unsigned integers to avoid rounding errors.\n   */\n\n\n  multiply(b) {\n    const product = this.data.atomics.mul(new bn_js_1.default(b.toString()));\n    return new Decimal(product.toString(), this.fractionalDigits);\n  }\n\n  equals(b) {\n    return Decimal.compare(this, b) === 0;\n  }\n\n  isLessThan(b) {\n    return Decimal.compare(this, b) < 0;\n  }\n\n  isLessThanOrEqual(b) {\n    return Decimal.compare(this, b) <= 0;\n  }\n\n  isGreaterThan(b) {\n    return Decimal.compare(this, b) > 0;\n  }\n\n  isGreaterThanOrEqual(b) {\n    return Decimal.compare(this, b) >= 0;\n  }\n\n}\n\nexports.Decimal = Decimal;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA,kD,CAIA;AACA;;;AACA,MAAMA,mBAAmB,GAAG,GAA5B;AAEA;;;;;;AAKA,MAAaC,OAAb,CAAoB;EA+FlBC,YAAoBC,OAApB,EAAqCC,gBAArC,EAA6D;IAC3D,KAAKC,IAAL,GAAY;MACVF,OAAO,EAAE,IAAIG,eAAJ,CAAOH,OAAP,CADC;MAEVC,gBAAgB,EAAEA;IAFR,CAAZ;EAID;;EAnG0B,OAAbG,aAAa,CAACC,KAAD,EAAgBJ,gBAAhB,EAAwC;IACjEH,OAAO,CAACQ,sBAAR,CAA+BL,gBAA/B;IAEA,MAAMM,YAAY,GAAGF,KAAK,CAACG,KAAN,CAAY,SAAZ,CAArB;;IACA,IAAID,YAAJ,EAAkB;MAChB;MACA,MAAM,IAAIE,KAAJ,CAAU,iCAAiCF,YAAY,CAACG,KAAb,GAAsB,CAAC,EAAlE,CAAN;IACD;;IAED,IAAIC,KAAJ;IACA,IAAIC,UAAJ;;IAEA,IAAIP,KAAK,CAACQ,MAAN,CAAa,IAAb,MAAuB,CAAC,CAA5B,EAA+B;MAC7B;MACAF,KAAK,GAAGN,KAAR;MACAO,UAAU,GAAG,EAAb;IACD,CAJD,MAIO;MACL,MAAME,KAAK,GAAGT,KAAK,CAACU,KAAN,CAAY,GAAZ,CAAd;;MACA,QAAQD,KAAK,CAACE,MAAd;QACE,KAAK,CAAL;QACA,KAAK,CAAL;UACE,MAAM,IAAIP,KAAJ,CAAU,qEAAV,CAAN;;QACF,KAAK,CAAL;UACE,IAAI,CAACK,KAAK,CAAC,CAAD,CAAV,EAAe,MAAM,IAAIL,KAAJ,CAAU,yBAAV,CAAN;UACfE,KAAK,GAAGG,KAAK,CAAC,CAAD,CAAb;UACAF,UAAU,GAAGE,KAAK,CAAC,CAAD,CAAL,CAASG,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,CAAb;UACA;;QACF;UACE,MAAM,IAAIR,KAAJ,CAAU,+BAAV,CAAN;MAVJ;IAYD;;IAED,IAAIG,UAAU,CAACI,MAAX,GAAoBf,gBAAxB,EAA0C;MACxC,MAAM,IAAIQ,KAAJ,CAAU,2CAAV,CAAN;IACD;;IAED,MAAMS,QAAQ,GAAG,GAAGP,KAAK,GAAGC,UAAU,CAACO,MAAX,CAAkBlB,gBAAlB,EAAoC,GAApC,CAAwC,EAApE;IAEA,OAAO,IAAIH,OAAJ,CAAYoB,QAAZ,EAAsBjB,gBAAtB,CAAP;EACD;;EAEwB,OAAXmB,WAAW,CAACpB,OAAD,EAAkBC,gBAAlB,EAA0C;IACjEH,OAAO,CAACQ,sBAAR,CAA+BL,gBAA/B;IACA,OAAO,IAAIH,OAAJ,CAAYE,OAAZ,EAAqBC,gBAArB,CAAP;EACD;EAED;;;;;;;;EAMkB,OAAJoB,IAAI,CAACpB,gBAAD,EAAyB;IACzCH,OAAO,CAACQ,sBAAR,CAA+BL,gBAA/B;IACA,OAAO,IAAIH,OAAJ,CAAY,GAAZ,EAAiBG,gBAAjB,CAAP;EACD;EAED;;;;;;;;EAMiB,OAAHqB,GAAG,CAACrB,gBAAD,EAAyB;IACxCH,OAAO,CAACQ,sBAAR,CAA+BL,gBAA/B;IACA,OAAO,IAAIH,OAAJ,CAAY,MAAM,IAAIyB,MAAJ,CAAWtB,gBAAX,CAAlB,EAAgDA,gBAAhD,CAAP;EACD;;EAEoC,OAAtBK,sBAAsB,CAACL,gBAAD,EAAyB;IAC5D,IAAI,CAACuB,MAAM,CAACC,SAAP,CAAiBxB,gBAAjB,CAAL,EAAyC,MAAM,IAAIQ,KAAJ,CAAU,qCAAV,CAAN;IACzC,IAAIR,gBAAgB,GAAG,CAAvB,EAA0B,MAAM,IAAIQ,KAAJ,CAAU,wCAAV,CAAN;;IAC1B,IAAIR,gBAAgB,GAAGJ,mBAAvB,EAA4C;MAC1C,MAAM,IAAIY,KAAJ,CAAU,qCAAqCZ,mBAAmB,EAAlE,CAAN;IACD;EACF;;EAEoB,OAAP6B,OAAO,CAACC,CAAD,EAAaC,CAAb,EAAuB;IAC1C,IAAID,CAAC,CAAC1B,gBAAF,KAAuB2B,CAAC,CAAC3B,gBAA7B,EAA+C,MAAM,IAAIQ,KAAJ,CAAU,gCAAV,CAAN;IAC/C,OAAOkB,CAAC,CAACzB,IAAF,CAAOF,OAAP,CAAe6B,GAAf,CAAmB,IAAI1B,eAAJ,CAAOyB,CAAC,CAAC5B,OAAT,CAAnB,CAAP;EACD;;EAEiB,IAAPA,OAAO;IAChB,OAAO,KAAKE,IAAL,CAAUF,OAAV,CAAkB8B,QAAlB,EAAP;EACD;;EAE0B,IAAhB7B,gBAAgB;IACzB,OAAO,KAAKC,IAAL,CAAUD,gBAAjB;EACD;EAcD;;;EACQ8B,KAAK;IACX,OAAO,IAAIjC,OAAJ,CAAY,KAAKE,OAAjB,EAA0B,KAAKC,gBAA/B,CAAP;EACD;EAED;;;EACO+B,KAAK;IACV,MAAMC,MAAM,GAAG,IAAI9B,eAAJ,CAAO,EAAP,EAAW+B,GAAX,CAAe,IAAI/B,eAAJ,CAAO,KAAKD,IAAL,CAAUD,gBAAjB,CAAf,CAAf;IACA,MAAMU,KAAK,GAAG,KAAKT,IAAL,CAAUF,OAAV,CAAkBmC,GAAlB,CAAsBF,MAAtB,CAAd;IACA,MAAMrB,UAAU,GAAG,KAAKV,IAAL,CAAUF,OAAV,CAAkBoC,GAAlB,CAAsBH,MAAtB,CAAnB;;IAEA,IAAIrB,UAAU,CAACyB,MAAX,EAAJ,EAAyB;MACvB,OAAO,KAAKN,KAAL,EAAP;IACD,CAFD,MAEO;MACL,OAAOjC,OAAO,CAACsB,WAAR,CAAoBT,KAAK,CAAC2B,GAAN,CAAUL,MAAV,EAAkBH,QAAlB,EAApB,EAAkD,KAAK7B,gBAAvD,CAAP;IACD;EACF;EAED;;;EACOsC,IAAI;IACT,MAAMN,MAAM,GAAG,IAAI9B,eAAJ,CAAO,EAAP,EAAW+B,GAAX,CAAe,IAAI/B,eAAJ,CAAO,KAAKD,IAAL,CAAUD,gBAAjB,CAAf,CAAf;IACA,MAAMU,KAAK,GAAG,KAAKT,IAAL,CAAUF,OAAV,CAAkBmC,GAAlB,CAAsBF,MAAtB,CAAd;IACA,MAAMrB,UAAU,GAAG,KAAKV,IAAL,CAAUF,OAAV,CAAkBoC,GAAlB,CAAsBH,MAAtB,CAAnB;;IAEA,IAAIrB,UAAU,CAACyB,MAAX,EAAJ,EAAyB;MACvB,OAAO,KAAKN,KAAL,EAAP;IACD,CAFD,MAEO;MACL,OAAOjC,OAAO,CAACsB,WAAR,CAAoBT,KAAK,CAAC6B,IAAN,CAAW,CAAX,EAAcF,GAAd,CAAkBL,MAAlB,EAA0BH,QAA1B,EAApB,EAA0D,KAAK7B,gBAA/D,CAAP;IACD;EACF;;EAEM6B,QAAQ;IACb,MAAMG,MAAM,GAAG,IAAI9B,eAAJ,CAAO,EAAP,EAAW+B,GAAX,CAAe,IAAI/B,eAAJ,CAAO,KAAKD,IAAL,CAAUD,gBAAjB,CAAf,CAAf;IACA,MAAMU,KAAK,GAAG,KAAKT,IAAL,CAAUF,OAAV,CAAkBmC,GAAlB,CAAsBF,MAAtB,CAAd;IACA,MAAMrB,UAAU,GAAG,KAAKV,IAAL,CAAUF,OAAV,CAAkBoC,GAAlB,CAAsBH,MAAtB,CAAnB;;IAEA,IAAIrB,UAAU,CAACyB,MAAX,EAAJ,EAAyB;MACvB,OAAO1B,KAAK,CAACmB,QAAN,EAAP;IACD,CAFD,MAEO;MACL,MAAMW,kBAAkB,GAAG7B,UAAU,CAACkB,QAAX,GAAsBY,QAAtB,CAA+B,KAAKxC,IAAL,CAAUD,gBAAzC,EAA2D,GAA3D,CAA3B;MACA,MAAM0C,qBAAqB,GAAGF,kBAAkB,CAACxB,OAAnB,CAA2B,KAA3B,EAAkC,EAAlC,CAA9B;MACA,OAAO,GAAGN,KAAK,CAACmB,QAAN,EAAgB,IAAIa,qBAAqB,EAAnD;IACD;EACF;EAED;;;;;;EAIOC,oBAAoB;IACzB,MAAMC,GAAG,GAAGrB,MAAM,CAAC,KAAKM,QAAL,EAAD,CAAlB;IACA,IAAIN,MAAM,CAACsB,KAAP,CAAaD,GAAb,CAAJ,EAAuB,MAAM,IAAIpC,KAAJ,CAAU,6BAAV,CAAN;IACvB,OAAOoC,GAAP;EACD;EAED;;;;;;;EAKOE,IAAI,CAACnB,CAAD,EAAW;IACpB,IAAI,KAAK3B,gBAAL,KAA0B2B,CAAC,CAAC3B,gBAAhC,EAAkD,MAAM,IAAIQ,KAAJ,CAAU,gCAAV,CAAN;IAClD,MAAMuC,GAAG,GAAG,KAAK9C,IAAL,CAAUF,OAAV,CAAkBiD,GAAlB,CAAsB,IAAI9C,eAAJ,CAAOyB,CAAC,CAAC5B,OAAT,CAAtB,CAAZ;IACA,OAAO,IAAIF,OAAJ,CAAYkD,GAAG,CAAClB,QAAJ,EAAZ,EAA4B,KAAK7B,gBAAjC,CAAP;EACD;EAED;;;;;;;;EAMOiD,KAAK,CAACtB,CAAD,EAAW;IACrB,IAAI,KAAK3B,gBAAL,KAA0B2B,CAAC,CAAC3B,gBAAhC,EAAkD,MAAM,IAAIQ,KAAJ,CAAU,gCAAV,CAAN;IAClD,MAAM0C,UAAU,GAAG,KAAKjD,IAAL,CAAUF,OAAV,CAAkBoD,GAAlB,CAAsB,IAAIjD,eAAJ,CAAOyB,CAAC,CAAC5B,OAAT,CAAtB,CAAnB;IACA,IAAImD,UAAU,CAACE,GAAX,CAAe,CAAf,CAAJ,EAAuB,MAAM,IAAI5C,KAAJ,CAAU,iCAAV,CAAN;IACvB,OAAO,IAAIX,OAAJ,CAAYqD,UAAU,CAACrB,QAAX,EAAZ,EAAmC,KAAK7B,gBAAxC,CAAP;EACD;EAED;;;;;;;EAKOqD,QAAQ,CAAC1B,CAAD,EAA4B;IACzC,MAAM2B,OAAO,GAAG,KAAKrD,IAAL,CAAUF,OAAV,CAAkBsC,GAAlB,CAAsB,IAAInC,eAAJ,CAAOyB,CAAC,CAACE,QAAF,EAAP,CAAtB,CAAhB;IACA,OAAO,IAAIhC,OAAJ,CAAYyD,OAAO,CAACzB,QAAR,EAAZ,EAAgC,KAAK7B,gBAArC,CAAP;EACD;;EAEMuD,MAAM,CAAC5B,CAAD,EAAW;IACtB,OAAO9B,OAAO,CAAC4B,OAAR,CAAgB,IAAhB,EAAsBE,CAAtB,MAA6B,CAApC;EACD;;EAEM6B,UAAU,CAAC7B,CAAD,EAAW;IAC1B,OAAO9B,OAAO,CAAC4B,OAAR,CAAgB,IAAhB,EAAsBE,CAAtB,IAA2B,CAAlC;EACD;;EAEM8B,iBAAiB,CAAC9B,CAAD,EAAW;IACjC,OAAO9B,OAAO,CAAC4B,OAAR,CAAgB,IAAhB,EAAsBE,CAAtB,KAA4B,CAAnC;EACD;;EAEM+B,aAAa,CAAC/B,CAAD,EAAW;IAC7B,OAAO9B,OAAO,CAAC4B,OAAR,CAAgB,IAAhB,EAAsBE,CAAtB,IAA2B,CAAlC;EACD;;EAEMgC,oBAAoB,CAAChC,CAAD,EAAW;IACpC,OAAO9B,OAAO,CAAC4B,OAAR,CAAgB,IAAhB,EAAsBE,CAAtB,KAA4B,CAAnC;EACD;;AAjNiB;;AAApBiC","names":["maxFractionalDigits","Decimal","constructor","atomics","fractionalDigits","data","bn_js_1","fromUserInput","input","verifyFractionalDigits","badCharacter","match","Error","index","whole","fractional","search","parts","split","length","replace","quantity","padEnd","fromAtomics","zero","one","repeat","Number","isInteger","compare","a","b","cmp","toString","clone","floor","factor","pow","div","mod","isZero","mul","ceil","addn","fullFractionalPart","padStart","trimmedFractionalPart","toFloatApproximation","out","isNaN","plus","sum","add","minus","difference","sub","ltn","multiply","product","equals","isLessThan","isLessThanOrEqual","isGreaterThan","isGreaterThanOrEqual","exports"],"sourceRoot":"","sources":["../src/decimal.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}