{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DirectSecp256k1Wallet = void 0;\n\nconst amino_1 = require(\"@cosmjs/amino\");\n\nconst crypto_1 = require(\"@cosmjs/crypto\");\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst signing_1 = require(\"./signing\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use DirectSecp256k1HdWallet.\n */\n\n\nclass DirectSecp256k1Wallet {\n  constructor(privkey, pubkey, prefix) {\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n    this.prefix = prefix;\n  }\n  /**\n   * Creates a DirectSecp256k1Wallet from the given private key\n   *\n   * @param privkey The private key.\n   * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n   */\n\n\n  static async fromKey(privkey) {\n    let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"cosmos\";\n    const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n    return new DirectSecp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n  }\n\n  get address() {\n    return (0, encoding_1.toBech32)(this.prefix, (0, amino_1.rawSecp256k1PubkeyToRawAddress)(this.pubkey));\n  }\n\n  async getAccounts() {\n    return [{\n      algo: \"secp256k1\",\n      address: this.address,\n      pubkey: this.pubkey\n    }];\n  }\n\n  async signDirect(address, signDoc) {\n    const signBytes = (0, signing_1.makeSignBytes)(signDoc);\n\n    if (address !== this.address) {\n      throw new Error(`Address ${address} not found in wallet`);\n    }\n\n    const hashedMessage = (0, crypto_1.sha256)(signBytes);\n    const signature = await crypto_1.Secp256k1.createSignature(hashedMessage, this.privkey);\n    const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n    const stdSignature = (0, amino_1.encodeSecp256k1Signature)(this.pubkey, signatureBytes);\n    return {\n      signed: signDoc,\n      signature: stdSignature\n    };\n  }\n\n}\n\nexports.DirectSecp256k1Wallet = DirectSecp256k1Wallet;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAIA;AAEA;;;;;;;AAKA,MAAaA,qBAAb,CAAkC;EAgBhCC,YAAoBC,OAApB,EAAyCC,MAAzC,EAA6DC,MAA7D,EAA2E;IACzE,KAAKF,OAAL,GAAeA,OAAf;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,MAAL,GAAcA,MAAd;EACD;EAnBD;;;;;;;;EAM2B,aAAPC,OAAO,CAACH,OAAD,EAAuC;IAAA,IAAjBE,MAAiB,uEAAR,QAAQ;IAChE,MAAME,YAAY,GAAG,CAAC,MAAMC,mBAAUC,WAAV,CAAsBN,OAAtB,CAAP,EAAuCC,MAA5D;IACA,OAAO,IAAIH,qBAAJ,CAA0BE,OAA1B,EAAmCK,mBAAUE,cAAV,CAAyBH,YAAzB,CAAnC,EAA2EF,MAA3E,CAAP;EACD;;EAYkB,IAAPM,OAAO;IACjB,OAAO,yBAAS,KAAKN,MAAd,EAAsB,4CAA+B,KAAKD,MAApC,CAAtB,CAAP;EACD;;EAEuB,MAAXQ,WAAW;IACtB,OAAO,CACL;MACEC,IAAI,EAAE,WADR;MAEEF,OAAO,EAAE,KAAKA,OAFhB;MAGEP,MAAM,EAAE,KAAKA;IAHf,CADK,CAAP;EAOD;;EAEsB,MAAVU,UAAU,CAACH,OAAD,EAAkBI,OAAlB,EAAkC;IACvD,MAAMC,SAAS,GAAG,6BAAcD,OAAd,CAAlB;;IACA,IAAIJ,OAAO,KAAK,KAAKA,OAArB,EAA8B;MAC5B,MAAM,IAAIM,KAAJ,CAAU,WAAWN,OAAO,sBAA5B,CAAN;IACD;;IACD,MAAMO,aAAa,GAAG,qBAAOF,SAAP,CAAtB;IACA,MAAMG,SAAS,GAAG,MAAMX,mBAAUY,eAAV,CAA0BF,aAA1B,EAAyC,KAAKf,OAA9C,CAAxB;IACA,MAAMkB,cAAc,GAAG,IAAIC,UAAJ,CAAe,CAAC,GAAGH,SAAS,CAACI,CAAV,CAAY,EAAZ,CAAJ,EAAqB,GAAGJ,SAAS,CAACK,CAAV,CAAY,EAAZ,CAAxB,CAAf,CAAvB;IACA,MAAMC,YAAY,GAAG,sCAAyB,KAAKrB,MAA9B,EAAsCiB,cAAtC,CAArB;IACA,OAAO;MACLK,MAAM,EAAEX,OADH;MAELI,SAAS,EAAEM;IAFN,CAAP;EAID;;AAjD+B;;AAAlCE","names":["DirectSecp256k1Wallet","constructor","privkey","pubkey","prefix","fromKey","uncompressed","crypto_1","makeKeypair","compressPubkey","address","getAccounts","algo","signDirect","signDoc","signBytes","Error","hashedMessage","signature","createSignature","signatureBytes","Uint8Array","r","s","stdSignature","signed","exports"],"sourceRoot":"","sources":["../src/directsecp256k1wallet.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}